
final_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08008e04  08008e04  00018e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091bc  080091bc  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  080091bc  080091bc  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091bc  080091bc  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          00000b54  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c4c  20000c4c  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ae5  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002990  00000000  00000000  00033c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  00037660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f590  00000000  00000000  00038678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140e9  00000000  00000000  00057c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be693  00000000  00000000  0006bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a384  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a90  00000000  00000000  0012a3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dec 	.word	0x08008dec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08008dec 	.word	0x08008dec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08e      	sub	sp, #56	; 0x38
 80002a4:	af0a      	add	r7, sp, #40	; 0x28
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4603      	mov	r3, r0
 80002b0:	817b      	strh	r3, [r7, #10]
 80002b2:	460b      	mov	r3, r1
 80002b4:	813b      	strh	r3, [r7, #8]
 80002b6:	4613      	mov	r3, r2
 80002b8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <LiquidCrystal+0x90>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d019      	beq.n	80002f6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002c2:	8939      	ldrh	r1, [r7, #8]
 80002c4:	897a      	ldrh	r2, [r7, #10]
 80002c6:	2300      	movs	r3, #0
 80002c8:	9308      	str	r3, [sp, #32]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9307      	str	r3, [sp, #28]
 80002ce:	2300      	movs	r3, #0
 80002d0:	9306      	str	r3, [sp, #24]
 80002d2:	2300      	movs	r3, #0
 80002d4:	9305      	str	r3, [sp, #20]
 80002d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002d8:	9304      	str	r3, [sp, #16]
 80002da:	8c3b      	ldrh	r3, [r7, #32]
 80002dc:	9303      	str	r3, [sp, #12]
 80002de:	8bbb      	ldrh	r3, [r7, #28]
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	8b3b      	ldrh	r3, [r7, #24]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	460b      	mov	r3, r1
 80002ec:	68f9      	ldr	r1, [r7, #12]
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 f820 	bl	8000334 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002f4:	e018      	b.n	8000328 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002f6:	8939      	ldrh	r1, [r7, #8]
 80002f8:	897a      	ldrh	r2, [r7, #10]
 80002fa:	2300      	movs	r3, #0
 80002fc:	9308      	str	r3, [sp, #32]
 80002fe:	2300      	movs	r3, #0
 8000300:	9307      	str	r3, [sp, #28]
 8000302:	2300      	movs	r3, #0
 8000304:	9306      	str	r3, [sp, #24]
 8000306:	2300      	movs	r3, #0
 8000308:	9305      	str	r3, [sp, #20]
 800030a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800030c:	9304      	str	r3, [sp, #16]
 800030e:	8c3b      	ldrh	r3, [r7, #32]
 8000310:	9303      	str	r3, [sp, #12]
 8000312:	8bbb      	ldrh	r3, [r7, #28]
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	8b3b      	ldrh	r3, [r7, #24]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	460b      	mov	r3, r1
 8000320:	68f9      	ldr	r1, [r7, #12]
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f806 	bl	8000334 <init>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000000 	.word	0x20000000

08000334 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	4611      	mov	r1, r2
 800033e:	461a      	mov	r2, r3
 8000340:	4603      	mov	r3, r0
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	460b      	mov	r3, r1
 8000346:	81bb      	strh	r3, [r7, #12]
 8000348:	4613      	mov	r3, r2
 800034a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800034c:	4a1a      	ldr	r2, [pc, #104]	; (80003b8 <init+0x84>)
 800034e:	89bb      	ldrh	r3, [r7, #12]
 8000350:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <init+0x88>)
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000358:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <init+0x8c>)
 800035a:	8b3b      	ldrh	r3, [r7, #24]
 800035c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <init+0x90>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000364:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <init+0x94>)
 8000366:	8bbb      	ldrh	r3, [r7, #28]
 8000368:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <init+0x94>)
 800036c:	8c3b      	ldrh	r3, [r7, #32]
 800036e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000370:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <init+0x94>)
 8000372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000374:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <init+0x94>)
 8000378:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800037a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <init+0x94>)
 800037e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000380:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <init+0x94>)
 8000384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000386:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <init+0x94>)
 800038a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800038c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <init+0x94>)
 8000390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000392:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <init+0x98>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
 80003a0:	e002      	b.n	80003a8 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <init+0x98>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80003a8:	2102      	movs	r1, #2
 80003aa:	2010      	movs	r0, #16
 80003ac:	f000 f810 	bl	80003d0 <begin>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000116 	.word	0x20000116
 80003bc:	20000118 	.word	0x20000118
 80003c0:	2000011a 	.word	0x2000011a
 80003c4:	2000012c 	.word	0x2000012c
 80003c8:	2000011c 	.word	0x2000011c
 80003cc:	20000130 	.word	0x20000130

080003d0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d906      	bls.n	80003f4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003e6:	4b77      	ldr	r3, [pc, #476]	; (80005c4 <begin+0x1f4>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b74      	ldr	r3, [pc, #464]	; (80005c4 <begin+0x1f4>)
 80003f2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003f4:	4a74      	ldr	r2, [pc, #464]	; (80005c8 <begin+0x1f8>)
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	3340      	adds	r3, #64	; 0x40
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f988 	bl	8000718 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000408:	4b70      	ldr	r3, [pc, #448]	; (80005cc <begin+0x1fc>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d009      	beq.n	8000424 <begin+0x54>
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d106      	bne.n	8000424 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000416:	4b6b      	ldr	r3, [pc, #428]	; (80005c4 <begin+0x1f4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b68      	ldr	r3, [pc, #416]	; (80005c4 <begin+0x1f4>)
 8000422:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000424:	f000 f8e4 	bl	80005f0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	2303      	movs	r3, #3
 800042a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000430:	4b67      	ldr	r3, [pc, #412]	; (80005d0 <begin+0x200>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d01b      	beq.n	8000470 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000438:	4b66      	ldr	r3, [pc, #408]	; (80005d4 <begin+0x204>)
 800043a:	881a      	ldrh	r2, [r3, #0]
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <begin+0x208>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <begin+0x20c>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	4b64      	ldr	r3, [pc, #400]	; (80005e0 <begin+0x210>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4313      	orrs	r3, r2
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b62      	ldr	r3, [pc, #392]	; (80005e0 <begin+0x210>)
 8000456:	885b      	ldrh	r3, [r3, #2]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <begin+0x210>)
 800045e:	889b      	ldrh	r3, [r3, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b5e      	ldr	r3, [pc, #376]	; (80005e0 <begin+0x210>)
 8000466:	88db      	ldrh	r3, [r3, #6]
 8000468:	4313      	orrs	r3, r2
 800046a:	b29b      	uxth	r3, r3
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	e02a      	b.n	80004c6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <begin+0x204>)
 8000472:	881a      	ldrh	r2, [r3, #0]
 8000474:	4b58      	ldr	r3, [pc, #352]	; (80005d8 <begin+0x208>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b57      	ldr	r3, [pc, #348]	; (80005dc <begin+0x20c>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000484:	4b56      	ldr	r3, [pc, #344]	; (80005e0 <begin+0x210>)
 8000486:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800048c:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <begin+0x210>)
 800048e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000494:	4b52      	ldr	r3, [pc, #328]	; (80005e0 <begin+0x210>)
 8000496:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800049c:	4b50      	ldr	r3, [pc, #320]	; (80005e0 <begin+0x210>)
 800049e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <begin+0x210>)
 80004a6:	891b      	ldrh	r3, [r3, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b4c      	ldr	r3, [pc, #304]	; (80005e0 <begin+0x210>)
 80004ae:	895b      	ldrh	r3, [r3, #10]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <begin+0x210>)
 80004b6:	899b      	ldrh	r3, [r3, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <begin+0x210>)
 80004be:	89db      	ldrh	r3, [r3, #14]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004c4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004c6:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <begin+0x214>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f107 020c 	add.w	r2, r7, #12
 80004ce:	4611      	mov	r1, r2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 f915 	bl	8003700 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004d6:	2032      	movs	r0, #50	; 0x32
 80004d8:	f002 ff66 	bl	80033a8 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004dc:	4b41      	ldr	r3, [pc, #260]	; (80005e4 <begin+0x214>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <begin+0x204>)
 80004e2:	8811      	ldrh	r1, [r2, #0]
 80004e4:	2200      	movs	r2, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 fa9c 	bl	8003a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004ec:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <begin+0x214>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a3a      	ldr	r2, [pc, #232]	; (80005dc <begin+0x20c>)
 80004f2:	8811      	ldrh	r1, [r2, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fa94 	bl	8003a24 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <begin+0x208>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d007      	beq.n	8000514 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000504:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <begin+0x214>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a33      	ldr	r2, [pc, #204]	; (80005d8 <begin+0x208>)
 800050a:	8811      	ldrh	r1, [r2, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fa88 	bl	8003a24 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <begin+0x1f4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f003 0310 	and.w	r3, r3, #16
 800051c:	2b00      	cmp	r3, #0
 800051e:	d115      	bne.n	800054c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 fa45 	bl	80009b0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000526:	2005      	movs	r0, #5
 8000528:	f002 ff3e 	bl	80033a8 <HAL_Delay>

    // second try
    write4bits(0x03);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fa3f 	bl	80009b0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000532:	2005      	movs	r0, #5
 8000534:	f002 ff38 	bl	80033a8 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000538:	2003      	movs	r0, #3
 800053a:	f000 fa39 	bl	80009b0 <write4bits>
    HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f002 ff32 	bl	80033a8 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fa33 	bl	80009b0 <write4bits>
 800054a:	e01d      	b.n	8000588 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <begin+0x1f4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f9a4 	bl	80008a4 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800055c:	2005      	movs	r0, #5
 800055e:	f002 ff23 	bl	80033a8 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <begin+0x1f4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f999 	bl	80008a4 <command>
    HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f002 ff18 	bl	80033a8 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <begin+0x1f4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f043 0320 	orr.w	r3, r3, #32
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f98e 	bl	80008a4 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <begin+0x1f4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f986 	bl	80008a4 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <begin+0x218>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
  display();
 800059e:	f000 f917 	bl	80007d0 <display>

  // clear it off
  clear();
 80005a2:	f000 f8d9 	bl	8000758 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <begin+0x21c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <begin+0x21c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f974 	bl	80008a4 <command>

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000130 	.word	0x20000130
 80005c8:	20000133 	.word	0x20000133
 80005cc:	20000114 	.word	0x20000114
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000116 	.word	0x20000116
 80005d8:	20000118 	.word	0x20000118
 80005dc:	2000011a 	.word	0x2000011a
 80005e0:	2000011c 	.word	0x2000011c
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	20000131 	.word	0x20000131
 80005ec:	20000132 	.word	0x20000132

080005f0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <enableClock+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005fe:	d10c      	bne.n	800061a <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <enableClock+0x110>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <enableClock+0x110>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000618:	e06a      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <enableClock+0x10c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a39      	ldr	r2, [pc, #228]	; (8000704 <enableClock+0x114>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d10c      	bne.n	800063e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <enableClock+0x110>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a35      	ldr	r2, [pc, #212]	; (8000700 <enableClock+0x110>)
 800062a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <enableClock+0x110>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	69bb      	ldr	r3, [r7, #24]
}
 800063c:	e058      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <enableClock+0x10c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <enableClock+0x114>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d10c      	bne.n	8000662 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <enableClock+0x110>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <enableClock+0x110>)
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	6153      	str	r3, [r2, #20]
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <enableClock+0x110>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]
}
 8000660:	e046      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <enableClock+0x10c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <enableClock+0x118>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d10c      	bne.n	8000686 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <enableClock+0x110>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <enableClock+0x110>)
 8000672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <enableClock+0x110>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
}
 8000684:	e034      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <enableClock+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <enableClock+0x11c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10c      	bne.n	80006aa <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <enableClock+0x110>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <enableClock+0x110>)
 8000696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <enableClock+0x110>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	e022      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOE)
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <enableClock+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <enableClock+0x120>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d10c      	bne.n	80006ce <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <enableClock+0x110>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <enableClock+0x110>)
 80006ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <enableClock+0x110>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	e010      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <enableClock+0x10c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <enableClock+0x124>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d10b      	bne.n	80006f0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <enableClock+0x110>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <enableClock+0x110>)
 80006de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e2:	6153      	str	r3, [r2, #20]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <enableClock+0x110>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
}
 80006f0:	bf00      	nop
 80006f2:	3724      	adds	r7, #36	; 0x24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	2000012c 	.word	0x2000012c
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000800 	.word	0x48000800
 800070c:	48000c00 	.word	0x48000c00
 8000710:	48001000 	.word	0x48001000
 8000714:	48001400 	.word	0x48001400

08000718 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <setRowOffsets+0x3c>)
 800072c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <setRowOffsets+0x3c>)
 8000734:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <setRowOffsets+0x3c>)
 800073c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <setRowOffsets+0x3c>)
 8000744:	70da      	strb	r2, [r3, #3]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000134 	.word	0x20000134

08000758 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800075c:	2001      	movs	r0, #1
 800075e:	f000 f8a1 	bl	80008a4 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000762:	2002      	movs	r0, #2
 8000764:	f002 fe20 	bl	80033a8 <HAL_Delay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800077c:	2304      	movs	r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d803      	bhi.n	8000790 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3b01      	subs	r3, #1
 800078e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <setCursor+0x5c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d303      	bcc.n	80007a2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <setCursor+0x5c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <setCursor+0x60>)
 80007a6:	5cd2      	ldrb	r2, [r2, r3]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f873 	bl	80008a4 <command>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000133 	.word	0x20000133
 80007cc:	20000134 	.word	0x20000134

080007d0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <display+0x28>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <display+0x28>)
 80007e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <display+0x28>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f859 	bl	80008a4 <command>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000131 	.word	0x20000131

080007fc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <print+0x12>
 800080a:	2300      	movs	r3, #0
 800080c:	e01d      	b.n	800084a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fce6 	bl	80001e4 <strlen>
 8000818:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800081e:	e00c      	b.n	800083a <print+0x3e>
    if (write(*buffer++)) n++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	617a      	str	r2, [r7, #20]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f849 	bl	80008c0 <write>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <print+0x4a>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	613a      	str	r2, [r7, #16]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ed      	bne.n	8000820 <print+0x24>
 8000844:	e000      	b.n	8000848 <print+0x4c>
    else break;
 8000846:	bf00      	nop
  }
  return n;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	6039      	str	r1, [r7, #0]
 800085c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	b25b      	sxtb	r3, r3
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	b25b      	sxtb	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f815 	bl	80008a4 <command>
  for (int i=0; i<8; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e009      	b.n	8000894 <createChar+0x42>
    write(charmap[i]);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f819 	bl	80008c0 <write>
  for (int i=0; i<8; i++) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b07      	cmp	r3, #7
 8000898:	ddf2      	ble.n	8000880 <createChar+0x2e>
  }
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f814 	bl	80008e0 <send>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <write>:

inline size_t write(uint8_t value) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f806 	bl	80008e0 <send>
  return 1; // assume sucess
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <send+0x6c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a16      	ldr	r2, [pc, #88]	; (8000950 <send+0x70>)
 80008f6:	8811      	ldrh	r1, [r2, #0]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 f892 	bl	8003a24 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <send+0x74>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d007      	beq.n	8000918 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <send+0x6c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a11      	ldr	r2, [pc, #68]	; (8000954 <send+0x74>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f003 f886 	bl	8003a24 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <send+0x78>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <send+0x4e>
    write8bits(value); 
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f86c 	bl	8000a04 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800092c:	e009      	b.n	8000942 <send+0x62>
    write4bits(value>>4);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f83b 	bl	80009b0 <write4bits>
    write4bits(value);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f837 	bl	80009b0 <write4bits>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000012c 	.word	0x2000012c
 8000950:	20000116 	.word	0x20000116
 8000954:	20000118 	.word	0x20000118
 8000958:	20000130 	.word	0x20000130

0800095c <pulseEnable>:

void pulseEnable(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <pulseEnable+0x4c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <pulseEnable+0x50>)
 8000966:	8811      	ldrh	r1, [r2, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 f85a 	bl	8003a24 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000970:	2001      	movs	r0, #1
 8000972:	f002 fd19 	bl	80033a8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <pulseEnable+0x4c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <pulseEnable+0x50>)
 800097c:	8811      	ldrh	r1, [r2, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f003 f84f 	bl	8003a24 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000986:	2001      	movs	r0, #1
 8000988:	f002 fd0e 	bl	80033a8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <pulseEnable+0x4c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <pulseEnable+0x50>)
 8000992:	8811      	ldrh	r1, [r2, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 f844 	bl	8003a24 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800099c:	2001      	movs	r0, #1
 800099e:	f002 fd03 	bl	80033a8 <HAL_Delay>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000012c 	.word	0x2000012c
 80009ac:	2000011a 	.word	0x2000011a

080009b0 <write4bits>:

void write4bits(uint8_t value) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e013      	b.n	80009e8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <write4bits+0x4c>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <write4bits+0x50>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	fa42 f303 	asr.w	r3, r2, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	f003 f821 	bl	8003a24 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	dde8      	ble.n	80009c0 <write4bits+0x10>
  }

  pulseEnable();
 80009ee:	f7ff ffb5 	bl	800095c <pulseEnable>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000012c 	.word	0x2000012c
 8000a00:	2000011c 	.word	0x2000011c

08000a04 <write8bits>:

void write8bits(uint8_t value) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e013      	b.n	8000a3c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <write8bits+0x4c>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <write8bits+0x50>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	fa42 f303 	asr.w	r3, r2, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	f002 fff7 	bl	8003a24 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	dde8      	ble.n	8000a14 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a42:	f7ff ff8b 	bl	800095c <pulseEnable>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000012c 	.word	0x2000012c
 8000a54:	2000011c 	.word	0x2000011c

08000a58 <setScore>:
int timeFlag = 0;

int uarttime = 1;
int uartdate = 0;

void setScore(int score) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	; 0x40
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "\nScore: %d", score);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	490b      	ldr	r1, [pc, #44]	; (8000a94 <setScore+0x3c>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 fdb5 	bl	80085d8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer),
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbb6 	bl	80001e4 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f107 010c 	add.w	r1, r7, #12
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <setScore+0x40>)
 8000a86:	f006 fa1f 	bl	8006ec8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8000a8a:	bf00      	nop
 8000a8c:	3740      	adds	r7, #64	; 0x40
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08008e04 	.word	0x08008e04
 8000a98:	200001f0 	.word	0x200001f0

08000a9c <parser>:

void parser() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	if (uarttime) {
 8000aa2:	4b59      	ldr	r3, [pc, #356]	; (8000c08 <parser+0x16c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d04f      	beq.n	8000b4a <parser+0xae>
		hour = 0;
 8000aaa:	4b58      	ldr	r3, [pc, #352]	; (8000c0c <parser+0x170>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
		minute = 0;
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <parser+0x174>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
		second = 0;
 8000ab6:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <parser+0x178>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 8; i++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	e040      	b.n	8000b44 <parser+0xa8>
			if (i == 1) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d111      	bne.n	8000aec <parser+0x50>
				inputHours[0] = inArray[0];
 8000ac8:	4b53      	ldr	r3, [pc, #332]	; (8000c18 <parser+0x17c>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <parser+0x180>)
 8000ace:	701a      	strb	r2, [r3, #0]
				inputHours[1] = inArray[1];
 8000ad0:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <parser+0x17c>)
 8000ad2:	785a      	ldrb	r2, [r3, #1]
 8000ad4:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <parser+0x180>)
 8000ad6:	705a      	strb	r2, [r3, #1]
				inputHours[2] = '\0';
 8000ad8:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <parser+0x180>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	709a      	strb	r2, [r3, #2]
				hour = atoi(inputHours);
 8000ade:	484f      	ldr	r0, [pc, #316]	; (8000c1c <parser+0x180>)
 8000ae0:	f007 fc4c 	bl	800837c <atoi>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a49      	ldr	r2, [pc, #292]	; (8000c0c <parser+0x170>)
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e028      	b.n	8000b3e <parser+0xa2>
			} else if (i == 3) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d111      	bne.n	8000b16 <parser+0x7a>
				inputMin[0] = inArray[3];
 8000af2:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <parser+0x17c>)
 8000af4:	78da      	ldrb	r2, [r3, #3]
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <parser+0x184>)
 8000af8:	701a      	strb	r2, [r3, #0]
				inputMin[1] = inArray[4];
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <parser+0x17c>)
 8000afc:	791a      	ldrb	r2, [r3, #4]
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <parser+0x184>)
 8000b00:	705a      	strb	r2, [r3, #1]
				inputMin[2] = '\0';
 8000b02:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <parser+0x184>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	709a      	strb	r2, [r3, #2]
				minute = atoi(inputMin);
 8000b08:	4845      	ldr	r0, [pc, #276]	; (8000c20 <parser+0x184>)
 8000b0a:	f007 fc37 	bl	800837c <atoi>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a3f      	ldr	r2, [pc, #252]	; (8000c10 <parser+0x174>)
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e013      	b.n	8000b3e <parser+0xa2>
			} else if (i == 6) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	d110      	bne.n	8000b3e <parser+0xa2>
				inputSec[0] = inArray[6];
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <parser+0x17c>)
 8000b1e:	799a      	ldrb	r2, [r3, #6]
 8000b20:	4b40      	ldr	r3, [pc, #256]	; (8000c24 <parser+0x188>)
 8000b22:	701a      	strb	r2, [r3, #0]
				inputSec[1] = inArray[7];
 8000b24:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <parser+0x17c>)
 8000b26:	79da      	ldrb	r2, [r3, #7]
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <parser+0x188>)
 8000b2a:	705a      	strb	r2, [r3, #1]
				inputSec[2] = '\0';
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <parser+0x188>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	709a      	strb	r2, [r3, #2]
				second = atoi(inputSec);
 8000b32:	483c      	ldr	r0, [pc, #240]	; (8000c24 <parser+0x188>)
 8000b34:	f007 fc22 	bl	800837c <atoi>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <parser+0x178>)
 8000b3c:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 8; i++) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	ddbb      	ble.n	8000ac2 <parser+0x26>
//		char y[3];
//		sprintf(y, "%2d", second);
//		HAL_UART_Transmit(&huart3, y, 2, HAL_MAX_DELAY);
	}

	if (uartdate) {
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <parser+0x18c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d052      	beq.n	8000bf8 <parser+0x15c>
		year = 0;
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <parser+0x190>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
		month = 0;
 8000b58:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <parser+0x194>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
		day = 0;
 8000b5e:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <parser+0x198>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 8; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	e040      	b.n	8000bec <parser+0x150>
			if (i == 1) {
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d111      	bne.n	8000b94 <parser+0xf8>
				inputYear[0] = inArray[0];
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <parser+0x17c>)
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <parser+0x19c>)
 8000b76:	701a      	strb	r2, [r3, #0]
				inputYear[1] = inArray[1];
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <parser+0x17c>)
 8000b7a:	785a      	ldrb	r2, [r3, #1]
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <parser+0x19c>)
 8000b7e:	705a      	strb	r2, [r3, #1]
				inputYear[2] = '\0';
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <parser+0x19c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	709a      	strb	r2, [r3, #2]
				year = atoi(inputYear);
 8000b86:	482c      	ldr	r0, [pc, #176]	; (8000c38 <parser+0x19c>)
 8000b88:	f007 fbf8 	bl	800837c <atoi>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <parser+0x190>)
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e028      	b.n	8000be6 <parser+0x14a>
			} else if (i == 3) {
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d111      	bne.n	8000bbe <parser+0x122>
				inputMonth[0] = inArray[3];
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <parser+0x17c>)
 8000b9c:	78da      	ldrb	r2, [r3, #3]
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <parser+0x1a0>)
 8000ba0:	701a      	strb	r2, [r3, #0]
				inputMonth[1] = inArray[4];
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <parser+0x17c>)
 8000ba4:	791a      	ldrb	r2, [r3, #4]
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <parser+0x1a0>)
 8000ba8:	705a      	strb	r2, [r3, #1]
				inputMonth[2] = '\0';
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <parser+0x1a0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	709a      	strb	r2, [r3, #2]
				month = atoi(inputMonth);
 8000bb0:	4822      	ldr	r0, [pc, #136]	; (8000c3c <parser+0x1a0>)
 8000bb2:	f007 fbe3 	bl	800837c <atoi>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <parser+0x194>)
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e013      	b.n	8000be6 <parser+0x14a>
			} else if (i == 6) {
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d110      	bne.n	8000be6 <parser+0x14a>
				inputDay[0] = inArray[6];
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <parser+0x17c>)
 8000bc6:	799a      	ldrb	r2, [r3, #6]
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <parser+0x1a4>)
 8000bca:	701a      	strb	r2, [r3, #0]
				inputDay[1] = inArray[7];
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <parser+0x17c>)
 8000bce:	79da      	ldrb	r2, [r3, #7]
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <parser+0x1a4>)
 8000bd2:	705a      	strb	r2, [r3, #1]
				inputDay[2] = '\0';
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <parser+0x1a4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	709a      	strb	r2, [r3, #2]
				day = atoi(inputDay);
 8000bda:	4819      	ldr	r0, [pc, #100]	; (8000c40 <parser+0x1a4>)
 8000bdc:	f007 fbce 	bl	800837c <atoi>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <parser+0x198>)
 8000be4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 8; i++) {
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	ddbb      	ble.n	8000b6a <parser+0xce>
			}
		}
		uartdate = 0;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <parser+0x18c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
	}

	timeFlag = 1;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <parser+0x1a8>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]

//	memset(inArray, '\0', sizeof(inArray));
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000024 	.word	0x20000024
 8000c0c:	20000bf0 	.word	0x20000bf0
 8000c10:	20000bf4 	.word	0x20000bf4
 8000c14:	20000bf8 	.word	0x20000bf8
 8000c18:	20000bd8 	.word	0x20000bd8
 8000c1c:	20000be4 	.word	0x20000be4
 8000c20:	20000be8 	.word	0x20000be8
 8000c24:	20000bec 	.word	0x20000bec
 8000c28:	20000c18 	.word	0x20000c18
 8000c2c:	20000c08 	.word	0x20000c08
 8000c30:	20000c0c 	.word	0x20000c0c
 8000c34:	20000c10 	.word	0x20000c10
 8000c38:	20000bfc 	.word	0x20000bfc
 8000c3c:	20000c00 	.word	0x20000c00
 8000c40:	20000c04 	.word	0x20000c04
 8000c44:	20000c14 	.word	0x20000c14

08000c48 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_UART_TxCpltCallback+0x24>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d104      	bne.n	8000c64 <HAL_UART_TxCpltCallback+0x1c>
		memset(inArray, '\0', sizeof(inArray));
 8000c5a:	2209      	movs	r2, #9
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <HAL_UART_TxCpltCallback+0x28>)
 8000c60:	f007 fbc2 	bl	80083e8 <memset>
	}
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	20000bd8 	.word	0x20000bd8

08000c74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_UART_RxCpltCallback+0x58>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11e      	bne.n	8000cc4 <HAL_UART_RxCpltCallback+0x50>
		inArray[idx] = rx_byte;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_UART_RxCpltCallback+0x60>)
 8000c8c:	7811      	ldrb	r1, [r2, #0]
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <HAL_UART_RxCpltCallback+0x64>)
 8000c90:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c9a:	6013      	str	r3, [r2, #0]
		if (idx == 9) {
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b09      	cmp	r3, #9
 8000ca2:	d10a      	bne.n	8000cba <HAL_UART_RxCpltCallback+0x46>
			idx = 0;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
			parser();
 8000caa:	f7ff fef7 	bl	8000a9c <parser>
			uarttime = 0;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_UART_RxCpltCallback+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
			uartdate = 1;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_UART_RxCpltCallback+0x6c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4905      	ldr	r1, [pc, #20]	; (8000cd4 <HAL_UART_RxCpltCallback+0x60>)
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_RxCpltCallback+0x70>)
 8000cc0:	f006 f98c 	bl	8006fdc <HAL_UART_Receive_IT>
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	20000bd4 	.word	0x20000bd4
 8000cd4:	20000bd0 	.word	0x20000bd0
 8000cd8:	20000bd8 	.word	0x20000bd8
 8000cdc:	20000024 	.word	0x20000024
 8000ce0:	20000c18 	.word	0x20000c18
 8000ce4:	200001f0 	.word	0x200001f0

08000ce8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	if (last_gpio_exti + 300 > HAL_GetTick()) // Simple button debouncing
 8000cf2:	4bb3      	ldr	r3, [pc, #716]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8000cfa:	f002 fb49 	bl	8003390 <HAL_GetTick>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f200 81d9 	bhi.w	80010b8 <HAL_GPIO_EXTI_Callback+0x3d0>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000d06:	f002 fb43 	bl	8003390 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4aac      	ldr	r2, [pc, #688]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000d0e:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000d10:	23ff      	movs	r3, #255	; 0xff
 8000d12:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000d14:	23ff      	movs	r3, #255	; 0xff
 8000d16:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000d18:	2300      	movs	r3, #0
 8000d1a:	737b      	strb	r3, [r7, #13]
 8000d1c:	e00b      	b.n	8000d36 <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000d1e:	7b7b      	ldrb	r3, [r7, #13]
 8000d20:	4aa8      	ldr	r2, [pc, #672]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d26:	88fa      	ldrh	r2, [r7, #6]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000d30:	7b7b      	ldrb	r3, [r7, #13]
 8000d32:	3301      	adds	r3, #1
 8000d34:	737b      	strb	r3, [r7, #13]
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d9f0      	bls.n	8000d1e <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000d3c:	4ba2      	ldr	r3, [pc, #648]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000d3e:	2120      	movs	r1, #32
 8000d40:	2200      	movs	r2, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fe6e 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000d48:	4b9f      	ldr	r3, [pc, #636]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fe68 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000d54:	4b9c      	ldr	r3, [pc, #624]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fe62 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000d60:	4b9a      	ldr	r3, [pc, #616]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000d62:	2110      	movs	r1, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fe5c 	bl	8003a24 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	733b      	strb	r3, [r7, #12]
 8000d70:	e02d      	b.n	8000dce <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4a96      	ldr	r2, [pc, #600]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000d76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7a:	7b3b      	ldrb	r3, [r7, #12]
 8000d7c:	4a95      	ldr	r2, [pc, #596]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	f002 fe4d 	bl	8003a24 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4a92      	ldr	r2, [pc, #584]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d98:	498a      	ldr	r1, [pc, #552]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000d9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4610      	mov	r0, r2
 8000da2:	f002 fe27 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_GPIO_EXTI_Callback+0xc8>
			column_number = col;
 8000dac:	7b3b      	ldrb	r3, [r7, #12]
 8000dae:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	4a87      	ldr	r2, [pc, #540]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000db4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	4a86      	ldr	r2, [pc, #536]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f002 fe2e 	bl	8003a24 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000dc8:	7b3b      	ldrb	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	733b      	strb	r3, [r7, #12]
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d9ce      	bls.n	8000d72 <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000dd4:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fe22 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000de0:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	2201      	movs	r2, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fe1c 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000dec:	4b76      	ldr	r3, [pc, #472]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	2201      	movs	r2, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fe16 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000df8:	4b74      	ldr	r3, [pc, #464]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fe10 	bl	8003a24 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e0c:	f000 8156 	beq.w	80010bc <HAL_GPIO_EXTI_Callback+0x3d4>
 8000e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e18:	f000 8150 	beq.w	80010bc <HAL_GPIO_EXTI_Callback+0x3d4>
	// +----+----+----+----+
	// | 9  | 10 | 11 | 12 |  R2
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	4413      	add	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	f200 8145 	bhi.w	80010c0 <HAL_GPIO_EXTI_Callback+0x3d8>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <HAL_GPIO_EXTI_Callback+0x154>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e7d 	.word	0x08000e7d
 8000e40:	08000e9d 	.word	0x08000e9d
 8000e44:	08000eaf 	.word	0x08000eaf
 8000e48:	08000ecf 	.word	0x08000ecf
 8000e4c:	08000ef3 	.word	0x08000ef3
 8000e50:	08000f13 	.word	0x08000f13
 8000e54:	08000f25 	.word	0x08000f25
 8000e58:	08000f45 	.word	0x08000f45
 8000e5c:	08000f6d 	.word	0x08000f6d
 8000e60:	08000f8d 	.word	0x08000f8d
 8000e64:	08000f9f 	.word	0x08000f9f
 8000e68:	08001009 	.word	0x08001009
 8000e6c:	080010c1 	.word	0x080010c1
 8000e70:	0800102f 	.word	0x0800102f
 8000e74:	0800103f 	.word	0x0800103f
 8000e78:	0800106b 	.word	0x0800106b
	case 1:
//		HAL_UART_Transmit(&huart3, "11", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000e7c:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_GPIO_EXTI_Callback+0x1a2>
			setSettingValues(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 ff11 	bl	8001cac <setSettingValues>

		if (menuOption[0].flag)
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8118 	beq.w	80010c4 <HAL_GPIO_EXTI_Callback+0x3dc>
			rotateDirection90(&player[0]);
 8000e94:	4852      	ldr	r0, [pc, #328]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000e96:	f001 fc75 	bl	8002784 <rotateDirection90>

		break;
 8000e9a:	e113      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x3dc>
	case 2:
//		HAL_UART_Transmit(&huart3, "12", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 8111 	beq.w	80010c8 <HAL_GPIO_EXTI_Callback+0x3e0>
			setSettingValues(2);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f000 ff00 	bl	8001cac <setSettingValues>

		break;
 8000eac:	e10c      	b.n	80010c8 <HAL_GPIO_EXTI_Callback+0x3e0>
	case 3:
//		HAL_UART_Transmit(&huart3, "13", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000eae:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <HAL_GPIO_EXTI_Callback+0x1d4>
			setSettingValues(3);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 fef8 	bl	8001cac <setSettingValues>

		if (menuOption[0].flag)
 8000ebc:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 8103 	beq.w	80010cc <HAL_GPIO_EXTI_Callback+0x3e4>
			rotateDirection90(&player[1]);
 8000ec6:	4847      	ldr	r0, [pc, #284]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000ec8:	f001 fc5c 	bl	8002784 <rotateDirection90>

		/* code */
		break;
 8000ecc:	e0fe      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0x3e4>
	case 4:
//		HAL_UART_Transmit(&huart3, "14", 2, HAL_MAX_DELAY);

		/* change needed flags to display menu */
		if (initPageFlag == 1) {
 8000ece:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x300>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	f040 80fc 	bne.w	80010d0 <HAL_GPIO_EXTI_Callback+0x3e8>
			initPageFlag = 0;
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x300>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
			menuFlag = 1;
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_GPIO_EXTI_Callback+0x304>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
			menuPageExecuted = 0;
 8000ee4:	4b42      	ldr	r3, [pc, #264]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			clearLcdFlag = 1;
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
		}

		break;
 8000ef0:	e0ee      	b.n	80010d0 <HAL_GPIO_EXTI_Callback+0x3e8>
	case 5:
//		HAL_UART_Transmit(&huart3, "21", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_GPIO_EXTI_Callback+0x218>
			setSettingValues(4);
 8000efa:	2004      	movs	r0, #4
 8000efc:	f000 fed6 	bl	8001cac <setSettingValues>

		if (menuOption[0].flag)
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80e5 	beq.w	80010d4 <HAL_GPIO_EXTI_Callback+0x3ec>
			move(&player[0]);
 8000f0a:	4835      	ldr	r0, [pc, #212]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000f0c:	f001 fb00 	bl	8002510 <move>

		/* code */
		break;
 8000f10:	e0e0      	b.n	80010d4 <HAL_GPIO_EXTI_Callback+0x3ec>
	case 6:
//		HAL_UART_Transmit(&huart3, "22", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 80de 	beq.w	80010d8 <HAL_GPIO_EXTI_Callback+0x3f0>
			setSettingValues(5);
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	f000 fec5 	bl	8001cac <setSettingValues>

		/* code */
		break;
 8000f22:	e0d9      	b.n	80010d8 <HAL_GPIO_EXTI_Callback+0x3f0>
	case 7:
//		HAL_UART_Transmit(&huart3, "23", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_GPIO_EXTI_Callback+0x24a>
			setSettingValues(6);
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f000 febd 	bl	8001cac <setSettingValues>

		if (menuOption[0].flag)
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80d0 	beq.w	80010dc <HAL_GPIO_EXTI_Callback+0x3f4>
			move(&player[1]);
 8000f3c:	4829      	ldr	r0, [pc, #164]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000f3e:	f001 fae7 	bl	8002510 <move>

		/* code */
		break;
 8000f42:	e0cb      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x3f4>
	case 8:
//		HAL_UART_Transmit(&huart3, "24", 2, HAL_MAX_DELAY);

		/* upward key on menu */
		if (menuFlag) {
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_GPIO_EXTI_Callback+0x304>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <HAL_GPIO_EXTI_Callback+0x26e>
			changePointer(&menuPointerLocation, &menuPageExecuted, "up");
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x310>)
 8000f4e:	4928      	ldr	r1, [pc, #160]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000f50:	482a      	ldr	r0, [pc, #168]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x314>)
 8000f52:	f000 fedf 	bl	8001d14 <changePointer>
		}

		/* upward key on setting */
		if (menuOption[1].flag) {
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80c0 	beq.w	80010e0 <HAL_GPIO_EXTI_Callback+0x3f8>
			changePointer(&settingPointerLocation, &menuOption[1].pageExecuted,
 8000f60:	4a25      	ldr	r2, [pc, #148]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x310>)
 8000f62:	4927      	ldr	r1, [pc, #156]	; (8001000 <HAL_GPIO_EXTI_Callback+0x318>)
 8000f64:	4827      	ldr	r0, [pc, #156]	; (8001004 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000f66:	f000 fed5 	bl	8001d14 <changePointer>
					"up");
		}

		break;
 8000f6a:	e0b9      	b.n	80010e0 <HAL_GPIO_EXTI_Callback+0x3f8>
	case 9:
//		HAL_UART_Transmit(&huart3, "31", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <HAL_GPIO_EXTI_Callback+0x292>
			setSettingValues(7);
 8000f74:	2007      	movs	r0, #7
 8000f76:	f000 fe99 	bl	8001cac <setSettingValues>

		if (menuOption[0].flag)
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80b0 	beq.w	80010e4 <HAL_GPIO_EXTI_Callback+0x3fc>
			shoot(&player[0]);
 8000f84:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000f86:	f001 fa6f 	bl	8002468 <shoot>
		/* code */
		break;
 8000f8a:	e0ab      	b.n	80010e4 <HAL_GPIO_EXTI_Callback+0x3fc>
	case 10:
//		HAL_UART_Transmit(&huart3, "32", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80a9 	beq.w	80010e8 <HAL_GPIO_EXTI_Callback+0x400>
			setSettingValues(8);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f000 fe88 	bl	8001cac <setSettingValues>

		/* code */
		break;
 8000f9c:	e0a4      	b.n	80010e8 <HAL_GPIO_EXTI_Callback+0x400>
	case 11:
//		HAL_UART_Transmit(&huart3, "33", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_GPIO_EXTI_Callback+0x2c4>
			setSettingValues(9);
 8000fa6:	2009      	movs	r0, #9
 8000fa8:	f000 fe80 	bl	8001cac <setSettingValues>

		if (menuOption[0].flag)
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 809b 	beq.w	80010ec <HAL_GPIO_EXTI_Callback+0x404>
			shoot(&player[1]);
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000fb8:	f001 fa56 	bl	8002468 <shoot>
		/* code */
		break;
 8000fbc:	e096      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x404>
 8000fbe:	bf00      	nop
 8000fc0:	20000bcc 	.word	0x20000bcc
 8000fc4:	08008f2c 	.word	0x08008f2c
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	08008f34 	.word	0x08008f34
 8000fd4:	08008f44 	.word	0x08008f44
 8000fd8:	08008f1c 	.word	0x08008f1c
 8000fdc:	20000278 	.word	0x20000278
 8000fe0:	20000290 	.word	0x20000290
 8000fe4:	200002b0 	.word	0x200002b0
 8000fe8:	200002d0 	.word	0x200002d0
 8000fec:	200002d4 	.word	0x200002d4
 8000ff0:	200002e0 	.word	0x200002e0
 8000ff4:	200002d8 	.word	0x200002d8
 8000ff8:	08008e10 	.word	0x08008e10
 8000ffc:	200002e4 	.word	0x200002e4
 8001000:	20000284 	.word	0x20000284
 8001004:	200002e8 	.word	0x200002e8
	case 12:
//		HAL_UART_Transmit(&huart3, "34", 2, HAL_MAX_DELAY);

		/* downward key on menu */
		if (menuFlag)
 8001008:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <HAL_GPIO_EXTI_Callback+0x418>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <HAL_GPIO_EXTI_Callback+0x332>
			changePointer(&menuPointerLocation, &menuPageExecuted, "down");
 8001010:	4a3c      	ldr	r2, [pc, #240]	; (8001104 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001012:	493d      	ldr	r1, [pc, #244]	; (8001108 <HAL_GPIO_EXTI_Callback+0x420>)
 8001014:	483d      	ldr	r0, [pc, #244]	; (800110c <HAL_GPIO_EXTI_Callback+0x424>)
 8001016:	f000 fe7d 	bl	8001d14 <changePointer>

		/* downward key on setting */
		if (menuOption[1].flag)
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d066      	beq.n	80010f0 <HAL_GPIO_EXTI_Callback+0x408>
			changePointer(&settingPointerLocation, &menuOption[1].pageExecuted,
 8001022:	4a38      	ldr	r2, [pc, #224]	; (8001104 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001024:	493b      	ldr	r1, [pc, #236]	; (8001114 <HAL_GPIO_EXTI_Callback+0x42c>)
 8001026:	483c      	ldr	r0, [pc, #240]	; (8001118 <HAL_GPIO_EXTI_Callback+0x430>)
 8001028:	f000 fe74 	bl	8001d14 <changePointer>
					"down");

		break;
 800102c:	e060      	b.n	80010f0 <HAL_GPIO_EXTI_Callback+0x408>
		/* code */
		break;
	case 14:
//		HAL_UART_Transmit(&huart3, "42", 2, HAL_MAX_DELAY);

		if (menuOption[1].flag)
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d05e      	beq.n	80010f4 <HAL_GPIO_EXTI_Callback+0x40c>
			setSettingValues(0);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fe38 	bl	8001cac <setSettingValues>

		/* code */
		break;
 800103c:	e05a      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x40c>
	case 15:

//		HAL_UART_Transmit(&huart3, "43", 2, HAL_MAX_DELAY);

		/* back key to menu */
		menuOption[0].flag = 0, menuOption[1].flag = 0, menuOption[2].flag = 0;
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
//		menuOption[0].pageExecuted = 0, menuOption[1].pageExecuted = 0, menuOption[2].pageExecuted= 0;
		menuFlag = 1;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_GPIO_EXTI_Callback+0x418>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
		menuPageExecuted = 0;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_GPIO_EXTI_Callback+0x420>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		initPageFlag = 0;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_GPIO_EXTI_Callback+0x434>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		clearLcdFlag = 1;
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_GPIO_EXTI_Callback+0x438>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
		break;
 8001068:	e047      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
	case 16:
//		HAL_UART_Transmit(&huart3, "44", 2, HAL_MAX_DELAY);

		/* enter key for menu */
		if (menuFlag) {
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_GPIO_EXTI_Callback+0x418>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d042      	beq.n	80010f8 <HAL_GPIO_EXTI_Callback+0x410>
			if (menuPointerLocation >= 0) {
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <HAL_GPIO_EXTI_Callback+0x424>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db14      	blt.n	80010a4 <HAL_GPIO_EXTI_Callback+0x3bc>
				menuOption[menuPointerLocation].flag = 1;
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_GPIO_EXTI_Callback+0x424>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a24      	ldr	r2, [pc, #144]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 8001080:	2101      	movs	r1, #1
 8001082:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				if (menuOption[menuPointerLocation].pageExecuted != NULL) {
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_GPIO_EXTI_Callback+0x424>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <HAL_GPIO_EXTI_Callback+0x3bc>
					menuOption[menuPointerLocation].pageExecuted = 0;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_GPIO_EXTI_Callback+0x424>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_GPIO_EXTI_Callback+0x428>)
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4413      	add	r3, r2
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
				}
			}
			menuFlag = 0;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_GPIO_EXTI_Callback+0x418>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
			initPageFlag = 0;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_GPIO_EXTI_Callback+0x434>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
			clearLcdFlag = 1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_GPIO_EXTI_Callback+0x438>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
		}
		break;
 80010b6:	e01f      	b.n	80010f8 <HAL_GPIO_EXTI_Callback+0x410>
		return;
 80010b8:	bf00      	nop
 80010ba:	e01e      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		return; // Reject invalid scan
 80010bc:	bf00      	nop
 80010be:	e01c      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>

	default:
//		HAL_UART_Transmit(&huart3, "b", 1, HAL_MAX_DELAY);

		break;
 80010c0:	bf00      	nop
 80010c2:	e01a      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010c4:	bf00      	nop
 80010c6:	e018      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010c8:	bf00      	nop
 80010ca:	e016      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010cc:	bf00      	nop
 80010ce:	e014      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010d0:	bf00      	nop
 80010d2:	e012      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010d4:	bf00      	nop
 80010d6:	e010      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010d8:	bf00      	nop
 80010da:	e00e      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010dc:	bf00      	nop
 80010de:	e00c      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010e0:	bf00      	nop
 80010e2:	e00a      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010e4:	bf00      	nop
 80010e6:	e008      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010e8:	bf00      	nop
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010ec:	bf00      	nop
 80010ee:	e004      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010f0:	bf00      	nop
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010f4:	bf00      	nop
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x412>
		break;
 80010f8:	bf00      	nop
	}
}
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	200002d4 	.word	0x200002d4
 8001104:	08008e14 	.word	0x08008e14
 8001108:	200002e0 	.word	0x200002e0
 800110c:	200002e4 	.word	0x200002e4
 8001110:	20000278 	.word	0x20000278
 8001114:	20000284 	.word	0x20000284
 8001118:	200002e8 	.word	0x200002e8
 800111c:	200002d0 	.word	0x200002d0
 8001120:	200002d8 	.word	0x200002d8

08001124 <HAL_TIM_PeriodElapsedCallback>:

int counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12f      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x72>
		int x = (player[1].numBullet * 1000) + (player[1].health * 100)
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113e:	fb03 f202 	mul.w	r2, r3, r2
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2164      	movs	r1, #100	; 0x64
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	18d1      	adds	r1, r2, r3
				+ (player[0].numBullet * 10) + (player[0].health);
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	18ca      	adds	r2, r1, r3
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800115e:	685b      	ldr	r3, [r3, #4]
		int x = (player[1].numBullet * 1000) + (player[1].health * 100)
 8001160:	4413      	add	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
		programInit(x);
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f001 fd4f 	bl	8002c08 <programInit>
		programLoop();
 800116a:	f001 fd59 	bl	8002c20 <programLoop>

		counter++;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001176:	6013      	str	r3, [r2, #0]
		if (counter == 30000 && menuOption[0].flag) {
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001180:	4293      	cmp	r3, r2
 8001182:	d108      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x72>
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x72>
			generateQM();
 800118c:	f001 fa7e 	bl	800268c <generateQM>
			counter = 0;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

//    if (htim->Instance == TIM4)
//    {
//    	refresh();
//    }
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	20000290 	.word	0x20000290
 80011a8:	20000c1c 	.word	0x20000c1c
 80011ac:	20000278 	.word	0x20000278

080011b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011b6:	f002 f891 	bl	80032dc <HAL_Init>

	/* USER CODE BEGIN Init */

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10,
 80011ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011be:	9303      	str	r3, [sp, #12]
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011de:	4875      	ldr	r0, [pc, #468]	; (80013b4 <main+0x204>)
 80011e0:	f7ff f85e 	bl	80002a0 <LiquidCrystal>
	GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	begin(20, 4);
 80011e4:	2104      	movs	r1, #4
 80011e6:	2014      	movs	r0, #20
 80011e8:	f7ff f8f2 	bl	80003d0 <begin>
	setCursor(0, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fabc 	bl	800076c <setCursor>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011f4:	f000 f8f8 	bl	80013e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011f8:	f000 faaa 	bl	8001750 <MX_GPIO_Init>
	MX_TIM1_Init();
 80011fc:	f000 f9ae 	bl	800155c <MX_TIM1_Init>
	MX_RTC_Init();
 8001200:	f000 f952 	bl	80014a8 <MX_RTC_Init>
	MX_TIM2_Init();
 8001204:	f000 f9fe 	bl	8001604 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8001208:	f000 fa72 	bl	80016f0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <main+0x204>)
 800120e:	2120      	movs	r1, #32
 8001210:	2201      	movs	r2, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fc06 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8001218:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <main+0x204>)
 800121a:	2140      	movs	r1, #64	; 0x40
 800121c:	2201      	movs	r2, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fc00 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <main+0x204>)
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	2201      	movs	r2, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fbfa 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <main+0x208>)
 8001232:	2110      	movs	r1, #16
 8001234:	2201      	movs	r2, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fbf4 	bl	8003a24 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim1);
 800123c:	485f      	ldr	r0, [pc, #380]	; (80013bc <main+0x20c>)
 800123e:	f004 fba9 	bl	8005994 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim4);
	HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	495e      	ldr	r1, [pc, #376]	; (80013c0 <main+0x210>)
 8001246:	485f      	ldr	r0, [pc, #380]	; (80013c4 <main+0x214>)
 8001248:	f005 fec8 	bl	8006fdc <HAL_UART_Receive_IT>

	clear();
 800124c:	f7ff fa84 	bl	8000758 <clear>

	initPageFlag = 1;
 8001250:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <main+0x218>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (timeFlag) {
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <main+0x21c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <main+0xb8>
			setRtcTime();
 800125e:	f000 fcdd 	bl	8001c1c <setRtcTime>
			timeFlag = 0;
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <main+0x21c>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
		}
		if (clearLcdFlag == 1) {
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <main+0x220>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d104      	bne.n	800127a <main+0xca>
			clear();
 8001270:	f7ff fa72 	bl	8000758 <clear>
			clearLcdFlag = 0;
 8001274:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <main+0x220>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
		}

		if (initPageFlag == 1 && initPageExecuted == 0) {
 800127a:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <main+0x218>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d109      	bne.n	8001296 <main+0xe6>
 8001282:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <main+0x224>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <main+0xe6>
			/* display name of game & play a song */
			begin_page();
 800128a:	f000 fbb5 	bl	80019f8 <begin_page>
			initPageExecuted = 1;
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <main+0x224>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e038      	b.n	8001308 <main+0x158>

		} else if (initPageFlag == 0) {
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <main+0x218>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d134      	bne.n	8001308 <main+0x158>
			if (menuFlag == 1 && menuPageExecuted == 0) {
 800129e:	4b4e      	ldr	r3, [pc, #312]	; (80013d8 <main+0x228>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10a      	bne.n	80012bc <main+0x10c>
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <main+0x22c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <main+0x10c>
				emptyArray();
 80012ae:	f001 fb43 	bl	8002938 <emptyArray>
				/* menu display */
				menuDisplay();
 80012b2:	f000 fbb1 	bl	8001a18 <menuDisplay>
				menuPageExecuted = 1;
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <main+0x22c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
			}

			if (menuOption[0].flag == 1 && menuOption[0].pageExecuted == 0) {
 80012bc:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <main+0x230>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d10d      	bne.n	80012e0 <main+0x130>
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <main+0x230>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d109      	bne.n	80012e0 <main+0x130>
				/* clear lcd and start game */
				PWM_Stop();
 80012cc:	f001 fdd8 	bl	8002e80 <PWM_Stop>
				initPlayers();
 80012d0:	f000 fd98 	bl	8001e04 <initPlayers>
//				int x = (player[1].numBullet * 1000) + (player[1].health * 100)
//						+ (player[0].numBullet * 10) + (player[0].health);
//				programInit(x);

				initGamePage();
 80012d4:	f000 fde6 	bl	8001ea4 <initGamePage>

				menuOption[0].pageExecuted = 1;
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <main+0x230>)
 80012da:	2201      	movs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
			if (menuOption[0].flag == 1 && menuOption[0].pageExecuted == 0) {
 80012de:	e013      	b.n	8001308 <main+0x158>

			} else if (menuOption[1].flag == 1
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <main+0x230>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d109      	bne.n	80012fc <main+0x14c>
					&& menuOption[1].pageExecuted == 0) {
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <main+0x230>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <main+0x14c>
				/* clear lcd and display setting */
				setting_page();
 80012f0:	f000 fc2e 	bl	8001b50 <setting_page>
				menuOption[1].pageExecuted = 1;
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <main+0x230>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	e005      	b.n	8001308 <main+0x158>

			} else if (menuOption[2].flag == 1) {
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <main+0x230>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <main+0x158>
				/* clear lcd and name of group member and RTC time(live update) */
				aboutUs_page();
 8001304:	f000 fbbc 	bl	8001a80 <aboutUs_page>
			}
		}

//		moveBullets();

		if (menuOption[0].pageExecuted == 1
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <main+0x230>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d149      	bne.n	80013a4 <main+0x1f4>
				&& (player[0].isAlive == 0 || player[1].isAlive == 0)) {
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <main+0x234>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <main+0x170>
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <main+0x234>)
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	2b00      	cmp	r3, #0
 800131e:	d141      	bne.n	80013a4 <main+0x1f4>
			//finaltime();
			//uart end
			clear();
 8001320:	f7ff fa1a 	bl	8000758 <clear>
			if (player[0].isAlive == 0) {
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <main+0x234>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d114      	bne.n	8001356 <main+0x1a6>
				HAL_UART_Transmit(&huart3, player[1].name,
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <main+0x234>)
 800132e:	6a1c      	ldr	r4, [r3, #32]
						strlen(player[1].name), HAL_MAX_DELAY);
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <main+0x234>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff55 	bl	80001e4 <strlen>
 800133a:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, player[1].name,
 800133c:	b29a      	uxth	r2, r3
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001342:	4621      	mov	r1, r4
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <main+0x214>)
 8001346:	f005 fdbf 	bl	8006ec8 <HAL_UART_Transmit>
				setScore(player[1].score);
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <main+0x234>)
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fb82 	bl	8000a58 <setScore>
 8001354:	e013      	b.n	800137e <main+0x1ce>
			} else {
				HAL_UART_Transmit(&huart3, player[0].name,
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <main+0x234>)
 8001358:	681c      	ldr	r4, [r3, #0]
						strlen(player[0].name), HAL_MAX_DELAY);
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <main+0x234>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff40 	bl	80001e4 <strlen>
 8001364:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, player[0].name,
 8001366:	b29a      	uxth	r2, r3
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136c:	4621      	mov	r1, r4
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <main+0x214>)
 8001370:	f005 fdaa 	bl	8006ec8 <HAL_UART_Transmit>
				setScore(player[0].score);
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <main+0x234>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fb6d 	bl	8000a58 <setScore>
			}
			//random animation
			for(int i=0;i<19;i++){
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e00b      	b.n	800139c <main+0x1ec>
					setCursor(i, 1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2101      	movs	r1, #1
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f9ee 	bl	800076c <setCursor>
					write(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff fa95 	bl	80008c0 <write>
			for(int i=0;i<19;i++){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b12      	cmp	r3, #18
 80013a0:	ddf0      	ble.n	8001384 <main+0x1d4>
 80013a2:	e001      	b.n	80013a8 <main+0x1f8>
			}

		} else
			refresh();
 80013a4:	f000 fdec 	bl	8001f80 <refresh>

		HAL_Delay(600);
 80013a8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80013ac:	f001 fffc 	bl	80033a8 <HAL_Delay>
		if (timeFlag) {
 80013b0:	e751      	b.n	8001256 <main+0xa6>
 80013b2:	bf00      	nop
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	48000400 	.word	0x48000400
 80013bc:	20000158 	.word	0x20000158
 80013c0:	20000bd0 	.word	0x20000bd0
 80013c4:	200001f0 	.word	0x200001f0
 80013c8:	200002d0 	.word	0x200002d0
 80013cc:	20000c14 	.word	0x20000c14
 80013d0:	200002d8 	.word	0x200002d8
 80013d4:	200002dc 	.word	0x200002dc
 80013d8:	200002d4 	.word	0x200002d4
 80013dc:	200002e0 	.word	0x200002e0
 80013e0:	20000278 	.word	0x20000278
 80013e4:	20000290 	.word	0x20000290

080013e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b09e      	sub	sp, #120	; 0x78
 80013ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f2:	2228      	movs	r2, #40	; 0x28
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f006 fff6 	bl	80083e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800140c:	463b      	mov	r3, r7
 800140e:	223c      	movs	r2, #60	; 0x3c
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f006 ffe8 	bl	80083e8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001418:	230a      	movs	r3, #10
 800141a:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001420:	2310      	movs	r3, #16
 8001422:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001424:	2301      	movs	r3, #1
 8001426:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001430:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001434:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001436:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fb22 	bl	8003a84 <HAL_RCC_OscConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x62>
		Error_Handler();
 8001446:	f001 fafa 	bl	8002a3e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800144a:	230f      	movs	r3, #15
 800144c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	2302      	movs	r3, #2
 8001450:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001460:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001464:	2102      	movs	r1, #2
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fb4a 	bl	8004b00 <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x8e>
		Error_Handler();
 8001472:	f001 fae4 	bl	8002a3e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <SystemClock_Config+0xbc>)
 8001478:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800147e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001482:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001488:	463b      	mov	r3, r7
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fd6e 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xb2>
		Error_Handler();
 8001496:	f001 fad2 	bl	8002a3e <Error_Handler>
	}
}
 800149a:	bf00      	nop
 800149c:	3778      	adds	r7, #120	; 0x78
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	00011004 	.word	0x00011004

080014a8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_RTC_Init+0xac>)
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <MX_RTC_Init+0xb0>)
 80014c4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <MX_RTC_Init+0xac>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <MX_RTC_Init+0xac>)
 80014ce:	227f      	movs	r2, #127	; 0x7f
 80014d0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_RTC_Init+0xac>)
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_RTC_Init+0xac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_RTC_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_RTC_Init+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80014ea:	481a      	ldr	r0, [pc, #104]	; (8001554 <MX_RTC_Init+0xac>)
 80014ec:	f003 feee 	bl	80052cc <HAL_RTC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_RTC_Init+0x52>
		Error_Handler();
 80014f6:	f001 faa2 	bl	8002a3e <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80014fe:	2300      	movs	r3, #0
 8001500:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001502:	2300      	movs	r3, #0
 8001504:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2201      	movs	r2, #1
 8001512:	4619      	mov	r1, r3
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <MX_RTC_Init+0xac>)
 8001516:	f003 ff5c 	bl	80053d2 <HAL_RTC_SetTime>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_RTC_Init+0x7c>
		Error_Handler();
 8001520:	f001 fa8d 	bl	8002a3e <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001524:	2301      	movs	r3, #1
 8001526:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001528:	2301      	movs	r3, #1
 800152a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 800152c:	2301      	movs	r3, #1
 800152e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001530:	2300      	movs	r3, #0
 8001532:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001534:	463b      	mov	r3, r7
 8001536:	2201      	movs	r2, #1
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_RTC_Init+0xac>)
 800153c:	f004 f841 	bl	80055c2 <HAL_RTC_SetDate>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_RTC_Init+0xa2>
		Error_Handler();
 8001546:	f001 fa7a 	bl	8002a3e <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000138 	.word	0x20000138
 8001558:	40002800 	.word	0x40002800

0800155c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_TIM1_Init+0xa0>)
 800157c:	4a20      	ldr	r2, [pc, #128]	; (8001600 <MX_TIM1_Init+0xa4>)
 800157e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_TIM1_Init+0xa0>)
 8001582:	223f      	movs	r2, #63	; 0x3f
 8001584:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_TIM1_Init+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_TIM1_Init+0xa0>)
 800158e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001592:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM1_Init+0xa0>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_TIM1_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_TIM1_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <MX_TIM1_Init+0xa0>)
 80015a8:	f004 f99c 	bl	80058e4 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x5a>
		Error_Handler();
 80015b2:	f001 fa44 	bl	8002a3e <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <MX_TIM1_Init+0xa0>)
 80015c4:	f004 fe7c 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x76>
		Error_Handler();
 80015ce:	f001 fa36 	bl	8002a3e <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_TIM1_Init+0xa0>)
 80015e4:	f005 fb84 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80015ee:	f001 fa26 	bl	8002a3e <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000158 	.word	0x20000158
 8001600:	40012c00 	.word	0x40012c00

08001604 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <MX_TIM2_Init+0xe8>)
 8001638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_TIM2_Init+0xe8>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_TIM2_Init+0xe8>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_TIM2_Init+0xe8>)
 800164c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001650:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_TIM2_Init+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <MX_TIM2_Init+0xe8>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_TIM2_Init+0xe8>)
 8001660:	f004 f940 	bl	80058e4 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x6a>
		Error_Handler();
 800166a:	f001 f9e8 	bl	8002a3e <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_TIM2_Init+0xe8>)
 800167c:	f004 fe20 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0x86>
		Error_Handler();
 8001686:	f001 f9da 	bl	8002a3e <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM2_Init+0xe8>)
 800168c:	f004 f9ec 	bl	8005a68 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x96>
		Error_Handler();
 8001696:	f001 f9d2 	bl	8002a3e <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_TIM2_Init+0xe8>)
 80016aa:	f005 fb21 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80016b4:	f001 f9c3 	bl	8002a3e <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
 80016ba:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80016c8:	463b      	mov	r3, r7
 80016ca:	220c      	movs	r2, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM2_Init+0xe8>)
 80016d0:	f004 fce2 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80016da:	f001 f9b0 	bl	8002a3e <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM2_Init+0xe8>)
 80016e0:	f001 fb3e 	bl	8002d60 <HAL_TIM_MspPostInit>

}
 80016e4:	bf00      	nop
 80016e6:	3738      	adds	r7, #56	; 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200001a4 	.word	0x200001a4

080016f0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART3_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART3_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART3_UART_Init+0x58>)
 80016fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001700:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART3_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART3_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART3_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART3_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART3_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART3_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART3_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART3_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART3_UART_Init+0x58>)
 8001734:	f005 fb7a 	bl	8006e2c <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800173e:	f001 f97e 	bl	8002a3e <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001f0 	.word	0x200001f0
 800174c:	40004800 	.word	0x40004800

08001750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001766:	4b9e      	ldr	r3, [pc, #632]	; (80019e0 <MX_GPIO_Init+0x290>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a9d      	ldr	r2, [pc, #628]	; (80019e0 <MX_GPIO_Init+0x290>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001770:	6153      	str	r3, [r2, #20]
 8001772:	4b9b      	ldr	r3, [pc, #620]	; (80019e0 <MX_GPIO_Init+0x290>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b98      	ldr	r3, [pc, #608]	; (80019e0 <MX_GPIO_Init+0x290>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4a97      	ldr	r2, [pc, #604]	; (80019e0 <MX_GPIO_Init+0x290>)
 8001784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001788:	6153      	str	r3, [r2, #20]
 800178a:	4b95      	ldr	r3, [pc, #596]	; (80019e0 <MX_GPIO_Init+0x290>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <MX_GPIO_Init+0x290>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a91      	ldr	r2, [pc, #580]	; (80019e0 <MX_GPIO_Init+0x290>)
 800179c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a8b      	ldr	r2, [pc, #556]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a85      	ldr	r2, [pc, #532]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017e8:	6153      	str	r3, [r2, #20]
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <MX_GPIO_Init+0x290>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80017f6:	2200      	movs	r2, #0
 80017f8:	f64f 7188 	movw	r1, #65416	; 0xff88
 80017fc:	4879      	ldr	r0, [pc, #484]	; (80019e4 <MX_GPIO_Init+0x294>)
 80017fe:	f002 f911 	bl	8003a24 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | GPIO_PIN_7 | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
					| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	210c      	movs	r1, #12
 8001806:	4878      	ldr	r0, [pc, #480]	; (80019e8 <MX_GPIO_Init+0x298>)
 8001808:	f002 f90c 	bl	8003a24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2104      	movs	r1, #4
 8001810:	4876      	ldr	r0, [pc, #472]	; (80019ec <MX_GPIO_Init+0x29c>)
 8001812:	f002 f907 	bl	8003a24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2102      	movs	r1, #2
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f002 f901 	bl	8003a24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001822:	2200      	movs	r2, #0
 8001824:	2117      	movs	r1, #23
 8001826:	4872      	ldr	r0, [pc, #456]	; (80019f0 <MX_GPIO_Init+0x2a0>)
 8001828:	f002 f8fc 	bl	8003a24 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 800182c:	2200      	movs	r2, #0
 800182e:	21e0      	movs	r1, #224	; 0xe0
 8001830:	4870      	ldr	r0, [pc, #448]	; (80019f4 <MX_GPIO_Init+0x2a4>)
 8001832:	f002 f8f7 	bl	8003a24 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : CS_I2C_SPI_Pin PE7 LD4_Pin LD3_Pin
	 LD5_Pin LD7_Pin LD9_Pin LD10_Pin
	 LD8_Pin LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | GPIO_PIN_7 | LD4_Pin | LD3_Pin
 8001836:	f64f 7388 	movw	r3, #65416	; 0xff88
 800183a:	61fb      	str	r3, [r7, #28]
			| LD5_Pin | LD7_Pin | LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4865      	ldr	r0, [pc, #404]	; (80019e4 <MX_GPIO_Init+0x294>)
 8001850:	f001 ff56 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT4_Pin MEMS_INT1_Pin */
	GPIO_InitStruct.Pin = MEMS_INT4_Pin | MEMS_INT1_Pin;
 8001854:	2321      	movs	r3, #33	; 0x21
 8001856:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001858:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800185c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	485e      	ldr	r0, [pc, #376]	; (80019e4 <MX_GPIO_Init+0x294>)
 800186a:	f001 ff49 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800186e:	230c      	movs	r3, #12
 8001870:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4858      	ldr	r0, [pc, #352]	; (80019e8 <MX_GPIO_Init+0x298>)
 8001886:	f001 ff3b 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188a:	2304      	movs	r3, #4
 800188c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	4852      	ldr	r0, [pc, #328]	; (80019ec <MX_GPIO_Init+0x29c>)
 80018a2:	f001 ff2d 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f001 ff20 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f001 ff11 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MISOA7_Pin;
 80018de:	23e0      	movs	r3, #224	; 0xe0
 80018e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ee:	2305      	movs	r3, #5
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f001 ff00 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4;
 8001900:	2317      	movs	r3, #23
 8001902:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	4836      	ldr	r0, [pc, #216]	; (80019f0 <MX_GPIO_Init+0x2a0>)
 8001918:	f001 fef2 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : DM_Pin DP_Pin */
	GPIO_InitStruct.Pin = DM_Pin | DP_Pin;
 800191c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001920:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800192e:	230e      	movs	r3, #14
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f001 fee0 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8001940:	231e      	movs	r3, #30
 8001942:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001948:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800194a:	2302      	movs	r3, #2
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4827      	ldr	r0, [pc, #156]	; (80019f4 <MX_GPIO_Init+0x2a4>)
 8001956:	f001 fed3 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD5 PD6 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800195a:	23e0      	movs	r3, #224	; 0xe0
 800195c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4820      	ldr	r0, [pc, #128]	; (80019f4 <MX_GPIO_Init+0x2a4>)
 8001972:	f001 fec5 	bl	8003700 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
	GPIO_InitStruct.Pin = I2C1_SCL_Pin | I2C1_SDA_Pin;
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001986:	2304      	movs	r3, #4
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4817      	ldr	r0, [pc, #92]	; (80019f0 <MX_GPIO_Init+0x2a0>)
 8001992:	f001 feb5 	bl	8003700 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2102      	movs	r1, #2
 800199a:	2007      	movs	r0, #7
 800199c:	f001 fe03 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019a0:	2007      	movs	r0, #7
 80019a2:	f001 fe1c 	bl	80035de <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 2, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2102      	movs	r1, #2
 80019aa:	2008      	movs	r0, #8
 80019ac:	f001 fdfb 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80019b0:	2008      	movs	r0, #8
 80019b2:	f001 fe14 	bl	80035de <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2102      	movs	r1, #2
 80019ba:	2009      	movs	r0, #9
 80019bc:	f001 fdf3 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019c0:	2009      	movs	r0, #9
 80019c2:	f001 fe0c 	bl	80035de <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2102      	movs	r1, #2
 80019ca:	200a      	movs	r0, #10
 80019cc:	f001 fdeb 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019d0:	200a      	movs	r0, #10
 80019d2:	f001 fe04 	bl	80035de <HAL_NVIC_EnableIRQ>

}
 80019d6:	bf00      	nop
 80019d8:	3730      	adds	r7, #48	; 0x30
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48001000 	.word	0x48001000
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48001400 	.word	0x48001400
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000c00 	.word	0x48000c00

080019f8 <begin_page>:

/* USER CODE BEGIN 4 */

void begin_page() {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7fe feb4 	bl	800076c <setCursor>
	print("Welcome to the Tank Battle");
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <begin_page+0x1c>)
 8001a06:	f7fe fef9 	bl	80007fc <print>
	play_song();
 8001a0a:	f000 f833 	bl	8001a74 <play_song>

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08008e1c 	.word	0x08008e1c

08001a18 <menuDisplay>:

void menuDisplay() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	setCursor(0, menuPointerLocation);
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <menuDisplay+0x48>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7fe fea1 	bl	800076c <setCursor>
//	write(0);
	print("-");
 8001a2a:	480e      	ldr	r0, [pc, #56]	; (8001a64 <menuDisplay+0x4c>)
 8001a2c:	f7fe fee6 	bl	80007fc <print>

	setCursor(1, 0);
 8001a30:	2100      	movs	r1, #0
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7fe fe9a 	bl	800076c <setCursor>
	print("start game");
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <menuDisplay+0x50>)
 8001a3a:	f7fe fedf 	bl	80007fc <print>
	setCursor(1, 1);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7fe fe93 	bl	800076c <setCursor>
	print("setting");
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <menuDisplay+0x54>)
 8001a48:	f7fe fed8 	bl	80007fc <print>
	setCursor(1, 2);
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f7fe fe8c 	bl	800076c <setCursor>
	print("about us");
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <menuDisplay+0x58>)
 8001a56:	f7fe fed1 	bl	80007fc <print>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002e4 	.word	0x200002e4
 8001a64:	08008e38 	.word	0x08008e38
 8001a68:	08008e3c 	.word	0x08008e3c
 8001a6c:	08008e48 	.word	0x08008e48
 8001a70:	08008e50 	.word	0x08008e50

08001a74 <play_song>:

void play_song() {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	call_change_melody();
 8001a78:	f001 fad0 	bl	800301c <call_change_melody>
	return;
 8001a7c:	bf00      	nop
}
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <aboutUs_page>:

void aboutUs_page() {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08e      	sub	sp, #56	; 0x38
 8001a84:	af02      	add	r7, sp, #8
	setCursor(0, 0);
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7fe fe6f 	bl	800076c <setCursor>

	for (int i = 0; i < 2; i++) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a92:	e00f      	b.n	8001ab4 <aboutUs_page+0x34>
		print(teamMembers[i]);
 8001a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <aboutUs_page+0xb4>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe feaa 	bl	80007fc <print>
		print(" ");
 8001aa8:	4823      	ldr	r0, [pc, #140]	; (8001b38 <aboutUs_page+0xb8>)
 8001aaa:	f7fe fea7 	bl	80007fc <print>
	for (int i = 0; i < 2; i++) {
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	ddec      	ble.n	8001a94 <aboutUs_page+0x14>
	}

	char timeStr[20], dateStr[20];

	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001aba:	2200      	movs	r2, #0
 8001abc:	491f      	ldr	r1, [pc, #124]	; (8001b3c <aboutUs_page+0xbc>)
 8001abe:	4820      	ldr	r0, [pc, #128]	; (8001b40 <aboutUs_page+0xc0>)
 8001ac0:	f003 fd21 	bl	8005506 <HAL_RTC_GetTime>

	setCursor(0, 1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7fe fe50 	bl	800076c <setCursor>
	sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <aboutUs_page+0xbc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <aboutUs_page+0xbc>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	4619      	mov	r1, r3
			mytime.Seconds);
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <aboutUs_page+0xbc>)
 8001ada:	789b      	ldrb	r3, [r3, #2]
	sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8001adc:	f107 0018 	add.w	r0, r7, #24
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4917      	ldr	r1, [pc, #92]	; (8001b44 <aboutUs_page+0xc4>)
 8001ae6:	f006 fd77 	bl	80085d8 <siprintf>
	print(timeStr);
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fe84 	bl	80007fc <print>

	HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001af4:	2200      	movs	r2, #0
 8001af6:	4914      	ldr	r1, [pc, #80]	; (8001b48 <aboutUs_page+0xc8>)
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <aboutUs_page+0xc0>)
 8001afa:	f003 fde6 	bl	80056ca <HAL_RTC_GetDate>

	setCursor(0, 2);
 8001afe:	2102      	movs	r1, #2
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7fe fe33 	bl	800076c <setCursor>
	sprintf(dateStr, "%d - %d - %d", mydate.Year, mydate.Month, mydate.Date);
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <aboutUs_page+0xc8>)
 8001b08:	78db      	ldrb	r3, [r3, #3]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <aboutUs_page+0xc8>)
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <aboutUs_page+0xc8>)
 8001b14:	789b      	ldrb	r3, [r3, #2]
 8001b16:	1d38      	adds	r0, r7, #4
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	490b      	ldr	r1, [pc, #44]	; (8001b4c <aboutUs_page+0xcc>)
 8001b1e:	f006 fd5b 	bl	80085d8 <siprintf>
	print(dateStr);
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fe69 	bl	80007fc <print>

}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	; 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000010 	.word	0x20000010
 8001b38:	08008e5c 	.word	0x08008e5c
 8001b3c:	200002ec 	.word	0x200002ec
 8001b40:	20000138 	.word	0x20000138
 8001b44:	08008e60 	.word	0x08008e60
 8001b48:	20000300 	.word	0x20000300
 8001b4c:	08008e6c 	.word	0x08008e6c

08001b50 <setting_page>:

void setting_page() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
	setCursor(0, settingPointerLocation);
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <setting_page+0xa8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7fe fe04 	bl	800076c <setCursor>
	print("-");
 8001b64:	4825      	ldr	r0, [pc, #148]	; (8001bfc <setting_page+0xac>)
 8001b66:	f7fe fe49 	bl	80007fc <print>

	setCursor(1, 0);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7fe fdfd 	bl	800076c <setCursor>

	char temp[21];
	sprintf(temp, "df health: %d", dfSetting.health);
 8001b72:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <setting_page+0xb0>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	463b      	mov	r3, r7
 8001b78:	4922      	ldr	r1, [pc, #136]	; (8001c04 <setting_page+0xb4>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 fd2c 	bl	80085d8 <siprintf>
	print(temp);
 8001b80:	463b      	mov	r3, r7
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fe3a 	bl	80007fc <print>

	setCursor(1, 1);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7fe fdee 	bl	800076c <setCursor>

	strcpy(temp, ""); // Clears the previous content
 8001b90:	2300      	movs	r3, #0
 8001b92:	703b      	strb	r3, [r7, #0]
	sprintf(temp, "df num blt: %d", dfSetting.numBullet);
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <setting_page+0xb0>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	463b      	mov	r3, r7
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <setting_page+0xb8>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fd1b 	bl	80085d8 <siprintf>
	print(temp);
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fe29 	bl	80007fc <print>

	setCursor(1, 2);
 8001baa:	2102      	movs	r1, #2
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7fe fddd 	bl	800076c <setCursor>

	strcpy(temp, ""); // Clears the previous content
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	703b      	strb	r3, [r7, #0]
	sprintf(temp, "df sounEeffect: %d", dfSetting.soundEfect);
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <setting_page+0xb0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4913      	ldr	r1, [pc, #76]	; (8001c0c <setting_page+0xbc>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f006 fd0a 	bl	80085d8 <siprintf>
	print(temp);
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fe18 	bl	80007fc <print>

	setCursor(1, 4);
 8001bcc:	2104      	movs	r1, #4
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7fe fdcc 	bl	800076c <setCursor>

	print(teamMembers[0]);
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <setting_page+0xc0>)
 8001bd6:	f7fe fe11 	bl	80007fc <print>
	print(" ");
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <setting_page+0xc4>)
 8001bdc:	f7fe fe0e 	bl	80007fc <print>
	print(teamMembers[1]);
 8001be0:	480d      	ldr	r0, [pc, #52]	; (8001c18 <setting_page+0xc8>)
 8001be2:	f7fe fe0b 	bl	80007fc <print>

	free(temp);
 8001be6:	463b      	mov	r3, r7
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 fbf5 	bl	80083d8 <free>

}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002e8 	.word	0x200002e8
 8001bfc:	08008e38 	.word	0x08008e38
 8001c00:	20000004 	.word	0x20000004
 8001c04:	08008e7c 	.word	0x08008e7c
 8001c08:	08008e8c 	.word	0x08008e8c
 8001c0c:	08008e9c 	.word	0x08008e9c
 8001c10:	20000010 	.word	0x20000010
 8001c14:	08008e5c 	.word	0x08008e5c
 8001c18:	2000001a 	.word	0x2000001a

08001c1c <setRtcTime>:

void setRtcTime() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	mytime.Hours = (int) hour;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <setRtcTime+0x6c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <setRtcTime+0x70>)
 8001c28:	701a      	strb	r2, [r3, #0]
	mytime.Minutes = (int) minute;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <setRtcTime+0x74>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <setRtcTime+0x70>)
 8001c32:	705a      	strb	r2, [r3, #1]
	mytime.Seconds = (int) second;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <setRtcTime+0x78>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <setRtcTime+0x70>)
 8001c3c:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN) != HAL_OK) {
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4912      	ldr	r1, [pc, #72]	; (8001c8c <setRtcTime+0x70>)
 8001c42:	4815      	ldr	r0, [pc, #84]	; (8001c98 <setRtcTime+0x7c>)
 8001c44:	f003 fbc5 	bl	80053d2 <HAL_RTC_SetTime>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <setRtcTime+0x36>
		Error_Handler();
 8001c4e:	f000 fef6 	bl	8002a3e <Error_Handler>
	}

	mydate.Year = year;
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <setRtcTime+0x80>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <setRtcTime+0x84>)
 8001c5a:	70da      	strb	r2, [r3, #3]
	mydate.Month = month;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <setRtcTime+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <setRtcTime+0x84>)
 8001c64:	705a      	strb	r2, [r3, #1]
	mydate.Date = day;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <setRtcTime+0x8c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <setRtcTime+0x84>)
 8001c6e:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN) != HAL_OK) {
 8001c70:	2200      	movs	r2, #0
 8001c72:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <setRtcTime+0x84>)
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <setRtcTime+0x7c>)
 8001c76:	f003 fca4 	bl	80055c2 <HAL_RTC_SetDate>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <setRtcTime+0x68>
		Error_Handler();
 8001c80:	f000 fedd 	bl	8002a3e <Error_Handler>
	}
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000bf0 	.word	0x20000bf0
 8001c8c:	200002ec 	.word	0x200002ec
 8001c90:	20000bf4 	.word	0x20000bf4
 8001c94:	20000bf8 	.word	0x20000bf8
 8001c98:	20000138 	.word	0x20000138
 8001c9c:	20000c08 	.word	0x20000c08
 8001ca0:	20000300 	.word	0x20000300
 8001ca4:	20000c0c 	.word	0x20000c0c
 8001ca8:	20000c10 	.word	0x20000c10

08001cac <setSettingValues>:

void setSettingValues(int val) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	switch (settingPointerLocation) {
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <setSettingValues+0x5c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d00e      	beq.n	8001cda <setSettingValues+0x2e>
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	dc16      	bgt.n	8001cee <setSettingValues+0x42>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <setSettingValues+0x1e>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d004      	beq.n	8001cd2 <setSettingValues+0x26>
	case 2:
		if (val == 0 || val == 1)
			dfSetting.soundEfect = val;
		break;
	default:
		break;
 8001cc8:	e011      	b.n	8001cee <setSettingValues+0x42>
		dfSetting.health = val;
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <setSettingValues+0x60>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6013      	str	r3, [r2, #0]
		break;
 8001cd0:	e010      	b.n	8001cf4 <setSettingValues+0x48>
		dfSetting.numBullet = val;
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <setSettingValues+0x60>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6053      	str	r3, [r2, #4]
		break;
 8001cd8:	e00c      	b.n	8001cf4 <setSettingValues+0x48>
		if (val == 0 || val == 1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <setSettingValues+0x3a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <setSettingValues+0x46>
			dfSetting.soundEfect = val;
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <setSettingValues+0x60>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6093      	str	r3, [r2, #8]
		break;
 8001cec:	e001      	b.n	8001cf2 <setSettingValues+0x46>
		break;
 8001cee:	bf00      	nop
 8001cf0:	e000      	b.n	8001cf4 <setSettingValues+0x48>
		break;
 8001cf2:	bf00      	nop
	}
	menuOption[1].pageExecuted = 0;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <setSettingValues+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200002e8 	.word	0x200002e8
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	20000278 	.word	0x20000278

08001d14 <changePointer>:

void changePointer(int *ptrLoc, int *pageExecuted, char *dir) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
	if (strcmp(dir, "up") == 0) {
 8001d20:	491a      	ldr	r1, [pc, #104]	; (8001d8c <changePointer+0x78>)
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fa54 	bl	80001d0 <strcmp>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10e      	bne.n	8001d4c <changePointer+0x38>
		*ptrLoc = (*ptrLoc + 1) % 3;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <changePointer+0x7c>)
 8001d36:	fb83 3201 	smull	r3, r2, r3, r1
 8001d3a:	17cb      	asrs	r3, r1, #31
 8001d3c:	1ad2      	subs	r2, r2, r3
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	1aca      	subs	r2, r1, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e014      	b.n	8001d76 <changePointer+0x62>
	} else if (strcmp(dir, "down") == 0) {
 8001d4c:	4911      	ldr	r1, [pc, #68]	; (8001d94 <changePointer+0x80>)
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fa3e 	bl	80001d0 <strcmp>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10d      	bne.n	8001d76 <changePointer+0x62>
		*ptrLoc = (*ptrLoc - 1 + 3) % 3;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c99      	adds	r1, r3, #2
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <changePointer+0x7c>)
 8001d62:	fb83 3201 	smull	r3, r2, r3, r1
 8001d66:	17cb      	asrs	r3, r1, #31
 8001d68:	1ad2      	subs	r2, r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	601a      	str	r2, [r3, #0]
	}
	*pageExecuted = 0;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	clearLcdFlag = 1;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <changePointer+0x84>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	08008e10 	.word	0x08008e10
 8001d90:	55555556 	.word	0x55555556
 8001d94:	08008e14 	.word	0x08008e14
 8001d98:	200002d8 	.word	0x200002d8

08001d9c <customCharsCreate>:

void customCharsCreate() {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	createChar(0, tankRightChar);
 8001da0:	4910      	ldr	r1, [pc, #64]	; (8001de4 <customCharsCreate+0x48>)
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7fe fd55 	bl	8000852 <createChar>
	createChar(1, tankDownChar);
 8001da8:	490f      	ldr	r1, [pc, #60]	; (8001de8 <customCharsCreate+0x4c>)
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7fe fd51 	bl	8000852 <createChar>
	createChar(2, tankLeftChar);
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <customCharsCreate+0x50>)
 8001db2:	2002      	movs	r0, #2
 8001db4:	f7fe fd4d 	bl	8000852 <createChar>
	createChar(3, tankUpChar);
 8001db8:	490d      	ldr	r1, [pc, #52]	; (8001df0 <customCharsCreate+0x54>)
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f7fe fd49 	bl	8000852 <createChar>
	createChar(4, bulletChar);
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <customCharsCreate+0x58>)
 8001dc2:	2004      	movs	r0, #4
 8001dc4:	f7fe fd45 	bl	8000852 <createChar>
	createChar(5, healthChar);
 8001dc8:	490b      	ldr	r1, [pc, #44]	; (8001df8 <customCharsCreate+0x5c>)
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f7fe fd41 	bl	8000852 <createChar>
	createChar(6, barrierChar);
 8001dd0:	490a      	ldr	r1, [pc, #40]	; (8001dfc <customCharsCreate+0x60>)
 8001dd2:	2006      	movs	r0, #6
 8001dd4:	f7fe fd3d 	bl	8000852 <createChar>
	createChar(7, questionmarkChar);
 8001dd8:	4909      	ldr	r1, [pc, #36]	; (8001e00 <customCharsCreate+0x64>)
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f7fe fd39 	bl	8000852 <createChar>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	08008edc 	.word	0x08008edc
 8001de8:	08008eec 	.word	0x08008eec
 8001dec:	08008ee4 	.word	0x08008ee4
 8001df0:	08008ef4 	.word	0x08008ef4
 8001df4:	08008f0c 	.word	0x08008f0c
 8001df8:	08008efc 	.word	0x08008efc
 8001dfc:	08008f04 	.word	0x08008f04
 8001e00:	08008f14 	.word	0x08008f14

08001e04 <initPlayers>:

void initPlayers() {
 8001e04:	b480      	push	{r7}
 8001e06:	b091      	sub	sp, #68	; 0x44
 8001e08:	af00      	add	r7, sp, #0

	player[0] = (Player ) { "Alireza", dfSetting.health, dfSetting.numBullet,
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <initPlayers+0x8c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <initPlayers+0x8c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4920      	ldr	r1, [pc, #128]	; (8001e94 <initPlayers+0x90>)
 8001e14:	4820      	ldr	r0, [pc, #128]	; (8001e98 <initPlayers+0x94>)
 8001e16:	6008      	str	r0, [r1, #0]
 8001e18:	491e      	ldr	r1, [pc, #120]	; (8001e94 <initPlayers+0x90>)
 8001e1a:	604a      	str	r2, [r1, #4]
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <initPlayers+0x90>)
 8001e1e:	6093      	str	r3, [r2, #8]
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <initPlayers+0x90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	731a      	strb	r2, [r3, #12]
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <initPlayers+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <initPlayers+0x90>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	615a      	str	r2, [r3, #20]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <initPlayers+0x90>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <initPlayers+0x90>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
					RIGHT, 0, 2, 1, 0 };
	player[1] = (Player ) { "Ali", dfSetting.health, dfSetting.numBullet, LEFT,
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <initPlayers+0x8c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <initPlayers+0x8c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4913      	ldr	r1, [pc, #76]	; (8001e94 <initPlayers+0x90>)
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <initPlayers+0x98>)
 8001e4a:	6208      	str	r0, [r1, #32]
 8001e4c:	4911      	ldr	r1, [pc, #68]	; (8001e94 <initPlayers+0x90>)
 8001e4e:	624a      	str	r2, [r1, #36]	; 0x24
 8001e50:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <initPlayers+0x90>)
 8001e52:	6293      	str	r3, [r2, #40]	; 0x28
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <initPlayers+0x90>)
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <initPlayers+0x90>)
 8001e5e:	2213      	movs	r2, #19
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <initPlayers+0x90>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <initPlayers+0x90>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <initPlayers+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c
					19, 1, 1, 0 };

	array[0][2] = 1;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <initPlayers+0x9c>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	609a      	str	r2, [r3, #8]
	array[19][1] = 3;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <initPlayers+0x9c>)
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8001e82:	bf00      	nop
 8001e84:	3744      	adds	r7, #68	; 0x44
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000004 	.word	0x20000004
 8001e94:	20000290 	.word	0x20000290
 8001e98:	08008eb0 	.word	0x08008eb0
 8001e9c:	08008eb8 	.word	0x08008eb8
 8001ea0:	20000948 	.word	0x20000948

08001ea4 <initGamePage>:

void initGamePage() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0a0      	sub	sp, #128	; 0x80
 8001ea8:	af00      	add	r7, sp, #0
	array[1][1] = 8;
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <initGamePage+0xd8>)
 8001eac:	2208      	movs	r2, #8
 8001eae:	615a      	str	r2, [r3, #20]
	array[1][2] = 8;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <initGamePage+0xd8>)
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	619a      	str	r2, [r3, #24]
	array[18][1] = 8;
 8001eb6:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <initGamePage+0xd8>)
 8001eb8:	2208      	movs	r2, #8
 8001eba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	array[18][2] = 8;
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <initGamePage+0xd8>)
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	customCharsCreate();
 8001ec6:	f7ff ff69 	bl	8001d9c <customCharsCreate>

	Pair pairs[15];
	generatePairs(pairs, 15, 0);
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fce9 	bl	80028a8 <generatePairs>

	//amirali
	uint8_t pointerrow;
	uint8_t pointercolumn;

	for (int i = 0; i < 15; ++i) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001eda:	e046      	b.n	8001f6a <initGamePage+0xc6>
		pointerrow = pairs[i].first;
 8001edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	3380      	adds	r3, #128	; 0x80
 8001ee2:	443b      	add	r3, r7
 8001ee4:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001ee8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		pointercolumn = pairs[i].second;
 8001eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	3380      	adds	r3, #128	; 0x80
 8001ef2:	443b      	add	r3, r7
 8001ef4:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001ef8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

		//0-5 for bullet
		if (i < 5) {
 8001efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	dc0a      	bgt.n	8001f18 <initGamePage+0x74>
			array[pointercolumn][pointerrow] = 5;
 8001f02:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8001f06:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001f0a:	491c      	ldr	r1, [pc, #112]	; (8001f7c <initGamePage+0xd8>)
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	2205      	movs	r2, #5
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f16:	e025      	b.n	8001f64 <initGamePage+0xc0>
		} //5-8 for health
		else if (i < 8) {
 8001f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	dc0a      	bgt.n	8001f34 <initGamePage+0x90>
			array[pointercolumn][pointerrow] = 6;
 8001f1e:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8001f22:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001f26:	4915      	ldr	r1, [pc, #84]	; (8001f7c <initGamePage+0xd8>)
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2206      	movs	r2, #6
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f32:	e017      	b.n	8001f64 <initGamePage+0xc0>
		} // 8-14 for barrier
		else if (i < 14) {
 8001f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f36:	2b0d      	cmp	r3, #13
 8001f38:	dc0a      	bgt.n	8001f50 <initGamePage+0xac>
			array[pointercolumn][pointerrow] = 7;
 8001f3a:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8001f3e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001f42:	490e      	ldr	r1, [pc, #56]	; (8001f7c <initGamePage+0xd8>)
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	2207      	movs	r2, #7
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f4e:	e009      	b.n	8001f64 <initGamePage+0xc0>
		} // 15 for questionmark
		else {
			array[pointercolumn][pointerrow] = 9;
 8001f50:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8001f54:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001f58:	4908      	ldr	r1, [pc, #32]	; (8001f7c <initGamePage+0xd8>)
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2209      	movs	r2, #9
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 15; ++i) {
 8001f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f66:	3301      	adds	r3, #1
 8001f68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6c:	2b0e      	cmp	r3, #14
 8001f6e:	ddb5      	ble.n	8001edc <initGamePage+0x38>
		}
	}
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3780      	adds	r7, #128	; 0x80
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000948 	.word	0x20000948

08001f80 <refresh>:

int rflag = 0;
void refresh() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e07d      	b.n	8002088 <refresh+0x108>
		for (int j = 0; j < 4; j++) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	e074      	b.n	800207c <refresh+0xfc>
			if (array[i][j] != prevarray[i][j]) {
 8001f92:	49a3      	ldr	r1, [pc, #652]	; (8002220 <refresh+0x2a0>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	009a      	lsls	r2, r3, #2
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001fa0:	48a0      	ldr	r0, [pc, #640]	; (8002224 <refresh+0x2a4>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0099      	lsls	r1, r3, #2
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	440b      	add	r3, r1
 8001faa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d061      	beq.n	8002076 <refresh+0xf6>
				int x = array[i][j];
 8001fb2:	499b      	ldr	r1, [pc, #620]	; (8002220 <refresh+0x2a0>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fc0:	607b      	str	r3, [r7, #4]
				setCursor(i, j);
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fbcd 	bl	800076c <setCursor>
				switch (x) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d83f      	bhi.n	8002058 <refresh+0xd8>
 8001fd8:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <refresh+0x60>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08002009 	.word	0x08002009
 8001fe4:	08002011 	.word	0x08002011
 8001fe8:	08002019 	.word	0x08002019
 8001fec:	08002021 	.word	0x08002021
 8001ff0:	08002029 	.word	0x08002029
 8001ff4:	08002031 	.word	0x08002031
 8001ff8:	08002039 	.word	0x08002039
 8001ffc:	08002041 	.word	0x08002041
 8002000:	08002049 	.word	0x08002049
 8002004:	08002051 	.word	0x08002051
				case 0:
					print(" ");
 8002008:	4887      	ldr	r0, [pc, #540]	; (8002228 <refresh+0x2a8>)
 800200a:	f7fe fbf7 	bl	80007fc <print>
					break;
 800200e:	e024      	b.n	800205a <refresh+0xda>
				case 1:
					write(0);
 8002010:	2000      	movs	r0, #0
 8002012:	f7fe fc55 	bl	80008c0 <write>
					break;
 8002016:	e020      	b.n	800205a <refresh+0xda>
				case 2:
					write(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f7fe fc51 	bl	80008c0 <write>
					break;
 800201e:	e01c      	b.n	800205a <refresh+0xda>
				case 3:
					write(2);
 8002020:	2002      	movs	r0, #2
 8002022:	f7fe fc4d 	bl	80008c0 <write>
					break;
 8002026:	e018      	b.n	800205a <refresh+0xda>
				case 4:
					write(3);
 8002028:	2003      	movs	r0, #3
 800202a:	f7fe fc49 	bl	80008c0 <write>
					break;
 800202e:	e014      	b.n	800205a <refresh+0xda>
				case 5:
					write(4);
 8002030:	2004      	movs	r0, #4
 8002032:	f7fe fc45 	bl	80008c0 <write>
					break;
 8002036:	e010      	b.n	800205a <refresh+0xda>
				case 6:
					write(5);
 8002038:	2005      	movs	r0, #5
 800203a:	f7fe fc41 	bl	80008c0 <write>
					break;
 800203e:	e00c      	b.n	800205a <refresh+0xda>
				case 7:
					write(6);
 8002040:	2006      	movs	r0, #6
 8002042:	f7fe fc3d 	bl	80008c0 <write>
					break;
 8002046:	e008      	b.n	800205a <refresh+0xda>
				case 8:
					print("|");
 8002048:	4878      	ldr	r0, [pc, #480]	; (800222c <refresh+0x2ac>)
 800204a:	f7fe fbd7 	bl	80007fc <print>
					break;
 800204e:	e004      	b.n	800205a <refresh+0xda>
				case 9:
					write(7);
 8002050:	2007      	movs	r0, #7
 8002052:	f7fe fc35 	bl	80008c0 <write>
					break;
 8002056:	e000      	b.n	800205a <refresh+0xda>
//				case 10:
//					print(".");
//					break;
				default:
					break;
 8002058:	bf00      	nop
				}
				prevarray[i][j] = array[i][j];
 800205a:	4971      	ldr	r1, [pc, #452]	; (8002220 <refresh+0x2a0>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	009a      	lsls	r2, r3, #2
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	4413      	add	r3, r2
 8002064:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8002068:	486e      	ldr	r0, [pc, #440]	; (8002224 <refresh+0x2a4>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	0099      	lsls	r1, r3, #2
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	440b      	add	r3, r1
 8002072:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	3301      	adds	r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b03      	cmp	r3, #3
 8002080:	dd87      	ble.n	8001f92 <refresh+0x12>
	for (int i = 0; i < 20; i++) {
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b13      	cmp	r3, #19
 800208c:	f77f af7e 	ble.w	8001f8c <refresh+0xc>
			}
		}
	}
	if (shootflag == 1) {
 8002090:	4b67      	ldr	r3, [pc, #412]	; (8002230 <refresh+0x2b0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	f040 81d5 	bne.w	8002444 <refresh+0x4c4>
		for (int k = 0; k < num_shooted_bullet; k++) {
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e1cb      	b.n	8002438 <refresh+0x4b8>
			if (bullets[k].isAlive) {
 80020a0:	4a64      	ldr	r2, [pc, #400]	; (8002234 <refresh+0x2b4>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	330c      	adds	r3, #12
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 81c0 	beq.w	8002432 <refresh+0x4b2>

				int col = bullets[k].col;
 80020b2:	4a60      	ldr	r2, [pc, #384]	; (8002234 <refresh+0x2b4>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	613b      	str	r3, [r7, #16]
				int row = bullets[k].row;
 80020be:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <refresh+0x2b4>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	4413      	add	r3, r2
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

				switch (bullets[k].direction) {
 80020cc:	4a59      	ldr	r2, [pc, #356]	; (8002234 <refresh+0x2b4>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	3308      	adds	r3, #8
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d83f      	bhi.n	800215c <refresh+0x1dc>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <refresh+0x164>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	0800210d 	.word	0x0800210d
 80020ec:	08002129 	.word	0x08002129
 80020f0:	08002141 	.word	0x08002141
				case RIGHT:
					bullets[k].col++;
 80020f4:	4a4f      	ldr	r2, [pc, #316]	; (8002234 <refresh+0x2b4>)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	494c      	ldr	r1, [pc, #304]	; (8002234 <refresh+0x2b4>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	440b      	add	r3, r1
 8002108:	601a      	str	r2, [r3, #0]
					break;
 800210a:	e028      	b.n	800215e <refresh+0x1de>
				case DOWN:
					bullets[k].row++;
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <refresh+0x2b4>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	4946      	ldr	r1, [pc, #280]	; (8002234 <refresh+0x2b4>)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	440b      	add	r3, r1
 8002122:	3304      	adds	r3, #4
 8002124:	601a      	str	r2, [r3, #0]
					break;
 8002126:	e01a      	b.n	800215e <refresh+0x1de>
				case LEFT:
					bullets[k].col--;
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <refresh+0x2b4>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	493f      	ldr	r1, [pc, #252]	; (8002234 <refresh+0x2b4>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	440b      	add	r3, r1
 800213c:	601a      	str	r2, [r3, #0]
					break;
 800213e:	e00e      	b.n	800215e <refresh+0x1de>
				case UP:
					bullets[k].row--;
 8002140:	4a3c      	ldr	r2, [pc, #240]	; (8002234 <refresh+0x2b4>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	4939      	ldr	r1, [pc, #228]	; (8002234 <refresh+0x2b4>)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	440b      	add	r3, r1
 8002156:	3304      	adds	r3, #4
 8002158:	601a      	str	r2, [r3, #0]
					break;
 800215a:	e000      	b.n	800215e <refresh+0x1de>
				default:
					break;
 800215c:	bf00      	nop
				}

				int f = array[bullets[k].col][bullets[k].row];
 800215e:	4a35      	ldr	r2, [pc, #212]	; (8002234 <refresh+0x2b4>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4932      	ldr	r1, [pc, #200]	; (8002234 <refresh+0x2b4>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	440b      	add	r3, r1
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	492a      	ldr	r1, [pc, #168]	; (8002220 <refresh+0x2a0>)
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4413      	add	r3, r2
 800217a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800217e:	60bb      	str	r3, [r7, #8]

				if (f == 5 || f == 6 || f == 9) { // if health / bulletIcon / chance
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d005      	beq.n	8002192 <refresh+0x212>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d002      	beq.n	8002192 <refresh+0x212>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b09      	cmp	r3, #9
 8002190:	d16e      	bne.n	8002270 <refresh+0x2f0>
					do {
						switch (bullets[k].direction) {
 8002192:	4a28      	ldr	r2, [pc, #160]	; (8002234 <refresh+0x2b4>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	3308      	adds	r3, #8
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d84a      	bhi.n	8002238 <refresh+0x2b8>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <refresh+0x228>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021d1 	.word	0x080021d1
 80021b0:	080021ed 	.word	0x080021ed
 80021b4:	08002205 	.word	0x08002205
						case RIGHT:
							bullets[k].col++;
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <refresh+0x2b4>)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	491b      	ldr	r1, [pc, #108]	; (8002234 <refresh+0x2b4>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	440b      	add	r3, r1
 80021cc:	601a      	str	r2, [r3, #0]
							break;
 80021ce:	e034      	b.n	800223a <refresh+0x2ba>
						case DOWN:
							bullets[k].row++;
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <refresh+0x2b4>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4915      	ldr	r1, [pc, #84]	; (8002234 <refresh+0x2b4>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	440b      	add	r3, r1
 80021e6:	3304      	adds	r3, #4
 80021e8:	601a      	str	r2, [r3, #0]
							break;
 80021ea:	e026      	b.n	800223a <refresh+0x2ba>
						case LEFT:
							bullets[k].col--;
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <refresh+0x2b4>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4413      	add	r3, r2
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1e5a      	subs	r2, r3, #1
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <refresh+0x2b4>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	601a      	str	r2, [r3, #0]
							break;
 8002202:	e01a      	b.n	800223a <refresh+0x2ba>
						case UP:
							bullets[k].row--;
 8002204:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <refresh+0x2b4>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <refresh+0x2b4>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	440b      	add	r3, r1
 800221a:	3304      	adds	r3, #4
 800221c:	601a      	str	r2, [r3, #0]
							break;
 800221e:	e00c      	b.n	800223a <refresh+0x2ba>
 8002220:	20000948 	.word	0x20000948
 8002224:	20000a88 	.word	0x20000a88
 8002228:	08008e5c 	.word	0x08008e5c
 800222c:	08008ebc 	.word	0x08008ebc
 8002230:	20000bc8 	.word	0x20000bc8
 8002234:	20000308 	.word	0x20000308
						default:
							break;
 8002238:	bf00      	nop
						}
						f = array[bullets[k].col][bullets[k].row];
 800223a:	4a84      	ldr	r2, [pc, #528]	; (800244c <refresh+0x4cc>)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4981      	ldr	r1, [pc, #516]	; (800244c <refresh+0x4cc>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	440b      	add	r3, r1
 800224c:	3304      	adds	r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	497f      	ldr	r1, [pc, #508]	; (8002450 <refresh+0x4d0>)
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	4413      	add	r3, r2
 8002256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800225a:	60bb      	str	r3, [r7, #8]
					} while (f == 5 || f == 6 || f == 9);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d097      	beq.n	8002192 <refresh+0x212>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d094      	beq.n	8002192 <refresh+0x212>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b09      	cmp	r3, #9
 800226c:	d091      	beq.n	8002192 <refresh+0x212>
				if (f == 5 || f == 6 || f == 9) { // if health / bulletIcon / chance
 800226e:	e091      	b.n	8002394 <refresh+0x414>
				} else if (f == 8) { //if wall
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b08      	cmp	r3, #8
 8002274:	d107      	bne.n	8002286 <refresh+0x306>
					bullets[k].isAlive = 0;
 8002276:	4a75      	ldr	r2, [pc, #468]	; (800244c <refresh+0x4cc>)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	330c      	adds	r3, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e086      	b.n	8002394 <refresh+0x414>
				} else if (f == 7) { //if barrier
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b07      	cmp	r3, #7
 800228a:	d118      	bne.n	80022be <refresh+0x33e>
					array[bullets[k].col][bullets[k].row] = 0;
 800228c:	4a6f      	ldr	r2, [pc, #444]	; (800244c <refresh+0x4cc>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4413      	add	r3, r2
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	496d      	ldr	r1, [pc, #436]	; (800244c <refresh+0x4cc>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	440b      	add	r3, r1
 800229e:	3304      	adds	r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	496b      	ldr	r1, [pc, #428]	; (8002450 <refresh+0x4d0>)
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	2200      	movs	r2, #0
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					bullets[k].isAlive = 0;
 80022ae:	4a67      	ldr	r2, [pc, #412]	; (800244c <refresh+0x4cc>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	330c      	adds	r3, #12
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e06a      	b.n	8002394 <refresh+0x414>
				} else if (bullets[k].col == player[0].col
 80022be:	4a63      	ldr	r2, [pc, #396]	; (800244c <refresh+0x4cc>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b62      	ldr	r3, [pc, #392]	; (8002454 <refresh+0x4d4>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d119      	bne.n	8002304 <refresh+0x384>
						&& bullets[k].row == player[0].row) {
 80022d0:	4a5e      	ldr	r2, [pc, #376]	; (800244c <refresh+0x4cc>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	3304      	adds	r3, #4
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <refresh+0x4d4>)
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d10f      	bne.n	8002304 <refresh+0x384>
					player[1].score++;
 80022e4:	4b5b      	ldr	r3, [pc, #364]	; (8002454 <refresh+0x4d4>)
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	3301      	adds	r3, #1
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <refresh+0x4d4>)
 80022ec:	63d3      	str	r3, [r2, #60]	; 0x3c
					decreaseHealth(&player[0]);
 80022ee:	4859      	ldr	r0, [pc, #356]	; (8002454 <refresh+0x4d4>)
 80022f0:	f000 fb8b 	bl	8002a0a <decreaseHealth>
					bullets[k].isAlive = 0;
 80022f4:	4a55      	ldr	r2, [pc, #340]	; (800244c <refresh+0x4cc>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4413      	add	r3, r2
 80022fc:	330c      	adds	r3, #12
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e047      	b.n	8002394 <refresh+0x414>
				} else if (bullets[k].col == player[1].col
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <refresh+0x4cc>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b51      	ldr	r3, [pc, #324]	; (8002454 <refresh+0x4d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	429a      	cmp	r2, r3
 8002314:	d119      	bne.n	800234a <refresh+0x3ca>
						&& bullets[k].row == player[1].row) {
 8002316:	4a4d      	ldr	r2, [pc, #308]	; (800244c <refresh+0x4cc>)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <refresh+0x4d4>)
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	429a      	cmp	r2, r3
 8002328:	d10f      	bne.n	800234a <refresh+0x3ca>
					player[0].score++;
 800232a:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <refresh+0x4d4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	3301      	adds	r3, #1
 8002330:	4a48      	ldr	r2, [pc, #288]	; (8002454 <refresh+0x4d4>)
 8002332:	61d3      	str	r3, [r2, #28]
					decreaseHealth(&player[1]);
 8002334:	4848      	ldr	r0, [pc, #288]	; (8002458 <refresh+0x4d8>)
 8002336:	f000 fb68 	bl	8002a0a <decreaseHealth>
					bullets[k].isAlive = 0;
 800233a:	4a44      	ldr	r2, [pc, #272]	; (800244c <refresh+0x4cc>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	330c      	adds	r3, #12
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e024      	b.n	8002394 <refresh+0x414>
				} else if (bullets[k].col < 0 || bullets[k].col >= 20
 800234a:	4a40      	ldr	r2, [pc, #256]	; (800244c <refresh+0x4cc>)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db16      	blt.n	8002386 <refresh+0x406>
 8002358:	4a3c      	ldr	r2, [pc, #240]	; (800244c <refresh+0x4cc>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4413      	add	r3, r2
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b13      	cmp	r3, #19
 8002364:	dc0f      	bgt.n	8002386 <refresh+0x406>
						|| bullets[k].row < 0 || bullets[k].row >= 4) {
 8002366:	4a39      	ldr	r2, [pc, #228]	; (800244c <refresh+0x4cc>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db07      	blt.n	8002386 <refresh+0x406>
 8002376:	4a35      	ldr	r2, [pc, #212]	; (800244c <refresh+0x4cc>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b03      	cmp	r3, #3
 8002384:	dd06      	ble.n	8002394 <refresh+0x414>
					bullets[k].isAlive = 0;
 8002386:	4a31      	ldr	r2, [pc, #196]	; (800244c <refresh+0x4cc>)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	330c      	adds	r3, #12
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
//						bullets[k].isAlive = 0;
//						bullets[m].isAlive = 0;
//					}
//				}

				if (!((col == player[0].col && row == player[0].row)
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <refresh+0x4d4>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	d104      	bne.n	80023a8 <refresh+0x428>
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <refresh+0x4d4>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d018      	beq.n	80023da <refresh+0x45a>
						|| (col == player[1].col && row == player[1].row))) {
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <refresh+0x4d4>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				if (!((col == player[0].col && row == player[0].row)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d104      	bne.n	80023bc <refresh+0x43c>
						|| (col == player[1].col && row == player[1].row))) {
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <refresh+0x4d4>)
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d00e      	beq.n	80023da <refresh+0x45a>
					setCursor(col, row);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f9d0 	bl	800076c <setCursor>
					print(" ");
 80023cc:	4823      	ldr	r0, [pc, #140]	; (800245c <refresh+0x4dc>)
 80023ce:	f7fe fa15 	bl	80007fc <print>
					HAL_Delay(500);
 80023d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023d6:	f000 ffe7 	bl	80033a8 <HAL_Delay>
				}

				if (bullets[k].isAlive) {
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <refresh+0x4cc>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4413      	add	r3, r2
 80023e2:	330c      	adds	r3, #12
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <refresh+0x494>
					setCursor(bullets[k].col, bullets[k].row);
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <refresh+0x4cc>)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4915      	ldr	r1, [pc, #84]	; (800244c <refresh+0x4cc>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	440b      	add	r3, r1
 80023fe:	3304      	adds	r3, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f7fe f9b0 	bl	800076c <setCursor>
					print(".");
 800240c:	4814      	ldr	r0, [pc, #80]	; (8002460 <refresh+0x4e0>)
 800240e:	f7fe f9f5 	bl	80007fc <print>
 8002412:	e00e      	b.n	8002432 <refresh+0x4b2>
				} else {
					bullets[k].col = -1;
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <refresh+0x4cc>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002420:	601a      	str	r2, [r3, #0]
					bullets[k].row = -1;
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <refresh+0x4cc>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002430:	601a      	str	r2, [r3, #0]
		for (int k = 0; k < num_shooted_bullet; k++) {
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <refresh+0x4e4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	f6ff ae2e 	blt.w	80020a0 <refresh+0x120>
				}
			}
		}
//		num_shooted_bullet--;
	}
}
 8002444:	bf00      	nop
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000308 	.word	0x20000308
 8002450:	20000948 	.word	0x20000948
 8002454:	20000290 	.word	0x20000290
 8002458:	200002b0 	.word	0x200002b0
 800245c:	08008e5c 	.word	0x08008e5c
 8002460:	08008ec0 	.word	0x08008ec0
 8002464:	20000304 	.word	0x20000304

08002468 <shoot>:

void shoot(Player *player) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	if (hasBullet(player) == 0) {
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8f9 	bl	8002668 <hasBullet>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03e      	beq.n	80024fa <shoot+0x92>
		return;
	}
	decreaseBullet(player);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fa9e 	bl	80029be <decreaseBullet>
//	playShotSound();

	num_shooted_bullet++;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <shoot+0x9c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <shoot+0x9c>)
 800248a:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < num_shooted_bullet; i++) {
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e02d      	b.n	80024ee <shoot+0x86>
		if (!bullets[i].isAlive) {
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <shoot+0xa0>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	330c      	adds	r3, #12
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d122      	bne.n	80024e8 <shoot+0x80>
			bullets[i].col = player->col;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	4918      	ldr	r1, [pc, #96]	; (8002508 <shoot+0xa0>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	440b      	add	r3, r1
 80024ae:	601a      	str	r2, [r3, #0]
			bullets[i].row = player->row;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	4914      	ldr	r1, [pc, #80]	; (8002508 <shoot+0xa0>)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	440b      	add	r3, r1
 80024bc:	3304      	adds	r3, #4
 80024be:	601a      	str	r2, [r3, #0]
			bullets[i].direction = player->direction;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7b19      	ldrb	r1, [r3, #12]
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <shoot+0xa0>)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	3308      	adds	r3, #8
 80024ce:	460a      	mov	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
			bullets[i].isAlive = 1;
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <shoot+0xa0>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	330c      	adds	r3, #12
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

			shootflag = 1;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <shoot+0xa4>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
			break;
 80024e6:	e009      	b.n	80024fc <shoot+0x94>
	for (int i = 0; i < num_shooted_bullet; i++) {
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <shoot+0x9c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbcc      	blt.n	8002492 <shoot+0x2a>
 80024f8:	e000      	b.n	80024fc <shoot+0x94>
		return;
 80024fa:	bf00      	nop
		}
	}
}
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000304 	.word	0x20000304
 8002508:	20000308 	.word	0x20000308
 800250c:	20000bc8 	.word	0x20000bc8

08002510 <move>:

//void processBullet(){
//
//}

void move(Player *player) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	int moveflag = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]

	int column = player->col;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	617b      	str	r3, [r7, #20]
	int row = player->row;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	613b      	str	r3, [r7, #16]

	int tankType = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]

//	const char *currentDirection = player->direction;
	enum Direction currentDirection = player->direction;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	73fb      	strb	r3, [r7, #15]

	switch (currentDirection) {
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d86f      	bhi.n	8002618 <move+0x108>
 8002538:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <move+0x30>)
 800253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253e:	bf00      	nop
 8002540:	08002551 	.word	0x08002551
 8002544:	080025b5 	.word	0x080025b5
 8002548:	08002583 	.word	0x08002583
 800254c:	080025e7 	.word	0x080025e7
	case RIGHT:
		if (column < 19 && checkMovePossible(column + 1, row)) {
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b12      	cmp	r3, #18
 8002554:	dc62      	bgt.n	800261c <move+0x10c>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	6939      	ldr	r1, [r7, #16]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f8e5 	bl	800272c <checkMovePossible>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d059      	beq.n	800261c <move+0x10c>
			player->col++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	611a      	str	r2, [r3, #16]
			player->direction = RIGHT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	731a      	strb	r2, [r3, #12]
			tankType = 1;
 8002578:	2301      	movs	r3, #1
 800257a:	61bb      	str	r3, [r7, #24]
			moveflag = 1;
 800257c:	2301      	movs	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
		}
		break;
 8002580:	e04c      	b.n	800261c <move+0x10c>
	case LEFT:
		if (column > 0 && checkMovePossible(column - 1, row)) {
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	dd4b      	ble.n	8002620 <move+0x110>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3b01      	subs	r3, #1
 800258c:	6939      	ldr	r1, [r7, #16]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f8cc 	bl	800272c <checkMovePossible>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d042      	beq.n	8002620 <move+0x110>
			player->col--;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	611a      	str	r2, [r3, #16]
			player->direction = LEFT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	731a      	strb	r2, [r3, #12]
			tankType = 3;
 80025aa:	2303      	movs	r3, #3
 80025ac:	61bb      	str	r3, [r7, #24]
			moveflag = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
		}
		break;
 80025b2:	e035      	b.n	8002620 <move+0x110>
	case DOWN:
		if (row < 3 && checkMovePossible(column, row + 1)) {
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	dc34      	bgt.n	8002624 <move+0x114>
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	3301      	adds	r3, #1
 80025be:	4619      	mov	r1, r3
 80025c0:	6978      	ldr	r0, [r7, #20]
 80025c2:	f000 f8b3 	bl	800272c <checkMovePossible>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02b      	beq.n	8002624 <move+0x114>
			player->row++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	615a      	str	r2, [r3, #20]
			player->direction = DOWN;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	731a      	strb	r2, [r3, #12]
			tankType = 2;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
			moveflag = 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
		}
		break;
 80025e4:	e01e      	b.n	8002624 <move+0x114>
	case UP:
		if (row > 0 && checkMovePossible(column, row - 1)) {
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dd1d      	ble.n	8002628 <move+0x118>
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	4619      	mov	r1, r3
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f000 f89a 	bl	800272c <checkMovePossible>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d014      	beq.n	8002628 <move+0x118>
			player->row--;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	1e5a      	subs	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	615a      	str	r2, [r3, #20]
			player->direction = UP;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	731a      	strb	r2, [r3, #12]
			tankType = 4;
 800260e:	2304      	movs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
			moveflag = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
		}
		break;
 8002616:	e007      	b.n	8002628 <move+0x118>
	default:
		break;
 8002618:	bf00      	nop
 800261a:	e006      	b.n	800262a <move+0x11a>
		break;
 800261c:	bf00      	nop
 800261e:	e004      	b.n	800262a <move+0x11a>
		break;
 8002620:	bf00      	nop
 8002622:	e002      	b.n	800262a <move+0x11a>
		break;
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <move+0x11a>
		break;
 8002628:	bf00      	nop
	}
	if (moveflag) {
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <move+0x14a>
		//check if item exist in new location and apply item. (before change type of new loc in array)
		checkItemExist(player);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f843 	bl	80026bc <checkItemExist>

		array[column][row] = 0;
 8002636:	490b      	ldr	r1, [pc, #44]	; (8002664 <move+0x154>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	2200      	movs	r2, #0
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		array[player->col][player->row] = tankType;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4905      	ldr	r1, [pc, #20]	; (8002664 <move+0x154>)
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4413      	add	r3, r2
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}
 800265a:	bf00      	nop
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000948 	.word	0x20000948

08002668 <hasBullet>:
		print(player[0].score);
	}

}

int hasBullet(Player *player) {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	if (player->numBullet == 0) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <hasBullet+0x14>
		return 0;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <hasBullet+0x16>
	}
	return 1;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <generateQM>:

void generateQM() {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
	Pair pair[1];
//	HAL_UART_Transmit(&huart3, "g", 1, HAL_MAX_DELAY);
	generatePairs(pair, 1, 1);
 8002692:	463b      	mov	r3, r7
 8002694:	2201      	movs	r2, #1
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f905 	bl	80028a8 <generatePairs>

//	char x[5];
//	sprintf(x, "%d", pair[0].second);
//	HAL_UART_Transmit(&huart3, x, strlen(x), HAL_MAX_DELAY);

	array[pair[0].second][pair[0].first] = 9;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4905      	ldr	r1, [pc, #20]	; (80026b8 <generateQM+0x2c>)
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	2209      	movs	r2, #9
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000948 	.word	0x20000948

080026bc <checkItemExist>:

void checkItemExist(Player *player) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

	int x = array[player->col][player->row];
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4916      	ldr	r1, [pc, #88]	; (8002728 <checkItemExist+0x6c>)
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026d6:	60fb      	str	r3, [r7, #12]

	if (x == 5)	//bullet
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d103      	bne.n	80026e6 <checkItemExist+0x2a>
		increaseBullet(player);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f95a 	bl	8002998 <increaseBullet>
			increaseBullet(player);
		} else if (rand == 1) {
			increaseHealth(player);
		}
	}
}
 80026e4:	e01c      	b.n	8002720 <checkItemExist+0x64>
	else if (x == 6)	//health
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d103      	bne.n	80026f4 <checkItemExist+0x38>
		increaseHealth(player);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f979 	bl	80029e4 <increaseHealth>
}
 80026f2:	e015      	b.n	8002720 <checkItemExist+0x64>
	else if (x == 9) {
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	d112      	bne.n	8002720 <checkItemExist+0x64>
		int rand = HAL_GetTick() % 2;
 80026fa:	f000 fe49 	bl	8003390 <HAL_GetTick>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
		if (rand == 0) {
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <checkItemExist+0x58>
			increaseBullet(player);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f943 	bl	8002998 <increaseBullet>
}
 8002712:	e005      	b.n	8002720 <checkItemExist+0x64>
		} else if (rand == 1) {
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d102      	bne.n	8002720 <checkItemExist+0x64>
			increaseHealth(player);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f962 	bl	80029e4 <increaseHealth>
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000948 	.word	0x20000948

0800272c <checkMovePossible>:

int checkMovePossible(int col, int row) {
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	int x = array[col][row];
 8002736:	4912      	ldr	r1, [pc, #72]	; (8002780 <checkMovePossible+0x54>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	009a      	lsls	r2, r3, #2
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002744:	60fb      	str	r3, [r7, #12]
	if (x == 1 || x == 2 || x == 3 || x == 4) {		// if tank is ahead
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d008      	beq.n	800275e <checkMovePossible+0x32>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d005      	beq.n	800275e <checkMovePossible+0x32>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d002      	beq.n	800275e <checkMovePossible+0x32>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d101      	bne.n	8002762 <checkMovePossible+0x36>
		return 0;
 800275e:	2300      	movs	r3, #0
 8002760:	e008      	b.n	8002774 <checkMovePossible+0x48>
	}
	if (x == 7 || x == 8) {						// wall or barrier is ahead
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b07      	cmp	r3, #7
 8002766:	d002      	beq.n	800276e <checkMovePossible+0x42>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d101      	bne.n	8002772 <checkMovePossible+0x46>
		return 0;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <checkMovePossible+0x48>
	}
	return 1;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	20000948 	.word	0x20000948

08002784 <rotateDirection90>:

const char *directions[] = { "right", "down", "left", "up" };

void rotateDirection90(Player *player) {
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

	enum Direction currentDirection = player->direction;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7b1b      	ldrb	r3, [r3, #12]
 8002790:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 4; i++) {
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e03c      	b.n	8002812 <rotateDirection90+0x8e>
		if (currentDirection == i) {
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d135      	bne.n	800280c <rotateDirection90+0x88>
			// Rotate clockwise 90 degrees
			player->direction = (enum Direction) ((i + 1) % 4);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	425a      	negs	r2, r3
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	bf58      	it	pl
 80027b0:	4253      	negpl	r3, r2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	731a      	strb	r2, [r3, #12]

			int x = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
			switch (player->direction) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7b1b      	ldrb	r3, [r3, #12]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d817      	bhi.n	80027f4 <rotateDirection90+0x70>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <rotateDirection90+0x48>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	080027dd 	.word	0x080027dd
 80027d0:	080027e3 	.word	0x080027e3
 80027d4:	080027e9 	.word	0x080027e9
 80027d8:	080027ef 	.word	0x080027ef
			case RIGHT:
				x = 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
				break;
 80027e0:	e009      	b.n	80027f6 <rotateDirection90+0x72>
			case DOWN:
				x = 2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	613b      	str	r3, [r7, #16]
				break;
 80027e6:	e006      	b.n	80027f6 <rotateDirection90+0x72>
			case LEFT:
				x = 3;
 80027e8:	2303      	movs	r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
				break;
 80027ec:	e003      	b.n	80027f6 <rotateDirection90+0x72>
			case UP:
				x = 4;
 80027ee:	2304      	movs	r3, #4
 80027f0:	613b      	str	r3, [r7, #16]
				break;
 80027f2:	e000      	b.n	80027f6 <rotateDirection90+0x72>
			default:
				break;
 80027f4:	bf00      	nop
			}

			array[player->col][player->row] = x;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	490a      	ldr	r1, [pc, #40]	; (8002828 <rotateDirection90+0xa4>)
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	4413      	add	r3, r2
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800280a:	e006      	b.n	800281a <rotateDirection90+0x96>
	for (int i = 0; i < 4; i++) {
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3301      	adds	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b03      	cmp	r3, #3
 8002816:	ddbf      	ble.n	8002798 <rotateDirection90+0x14>
//			array[player->col][player->row] = x;
//
//			break;
//		}
//	}
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000948 	.word	0x20000948

0800282c <isDuplicate>:

int isDuplicate(Pair arr[], int index, int first, int second, int duringGame) {
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
	if (duringGame) {
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <isDuplicate+0x2a>
		if (array[second][first] != 0) {
 8002840:	4918      	ldr	r1, [pc, #96]	; (80028a4 <isDuplicate+0x78>)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	009a      	lsls	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <isDuplicate+0x68>
//			HAL_UART_Transmit(&huart3, "p", 1, HAL_MAX_DELAY);
			return 1;
 8002852:	2301      	movs	r3, #1
 8002854:	e01f      	b.n	8002896 <isDuplicate+0x6a>
		}
	} else if (duringGame == 0)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11b      	bne.n	8002894 <isDuplicate+0x68>
		for (int i = 0; i < index; ++i) {
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e014      	b.n	800288c <isDuplicate+0x60>
			if (arr[i].first == first && arr[i].second == second) {
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d109      	bne.n	8002886 <isDuplicate+0x5a>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d101      	bne.n	8002886 <isDuplicate+0x5a>
				return 1;  // Duplicate found
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <isDuplicate+0x6a>
		for (int i = 0; i < index; ++i) {
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbe6      	blt.n	8002862 <isDuplicate+0x36>
			}
		}
	return 0;  // No duplicate found
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000948 	.word	0x20000948

080028a8 <generatePairs>:

void generatePairs(Pair arr[], int n, int duringGame) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; ++i) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e034      	b.n	8002924 <generatePairs+0x7c>
		int first = HAL_GetTick() % 4; // Generates a random number between 0 and 4
 80028ba:	f000 fd69 	bl	8003390 <HAL_GetTick>
 80028be:	4603      	mov	r3, r0
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	61bb      	str	r3, [r7, #24]
		int second = HAL_GetTick() % 16 + 2; // Generates a random number between 2 and 17
 80028c6:	f000 fd63 	bl	8003390 <HAL_GetTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	3302      	adds	r3, #2
 80028d2:	617b      	str	r3, [r7, #20]

		while (isDuplicate(arr, i, first, second, duringGame)) {
 80028d4:	e00c      	b.n	80028f0 <generatePairs+0x48>
			first = HAL_GetTick() % 4;
 80028d6:	f000 fd5b 	bl	8003390 <HAL_GetTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	61bb      	str	r3, [r7, #24]
			second = HAL_GetTick() % 16 + 2;
 80028e2:	f000 fd55 	bl	8003390 <HAL_GetTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	3302      	adds	r3, #2
 80028ee:	617b      	str	r3, [r7, #20]
		while (isDuplicate(arr, i, first, second, duringGame)) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	69f9      	ldr	r1, [r7, #28]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff96 	bl	800282c <isDuplicate>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e7      	bne.n	80028d6 <generatePairs+0x2e>
		}

		arr[i].first = first;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	601a      	str	r2, [r3, #0]
		arr[i].second = second;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; ++i) {
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	dbc6      	blt.n	80028ba <generatePairs+0x12>
	}
//	HAL_UART_Transmit(&huart3, "l", 1, HAL_MAX_DELAY);

}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <emptyArray>:
			prevarray[i][j] = array[i][j];
		}
	}
}

void emptyArray() {
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++) {
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	e01b      	b.n	800297c <emptyArray+0x44>
		for (int j = 0; j < 4; j++) {
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	e012      	b.n	8002970 <emptyArray+0x38>
			array[i][j] = 0;
 800294a:	4911      	ldr	r1, [pc, #68]	; (8002990 <emptyArray+0x58>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4413      	add	r3, r2
 8002954:	2200      	movs	r2, #0
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			prevarray[i][j] = 0;
 800295a:	490e      	ldr	r1, [pc, #56]	; (8002994 <emptyArray+0x5c>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4413      	add	r3, r2
 8002964:	2200      	movs	r2, #0
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b03      	cmp	r3, #3
 8002974:	dde9      	ble.n	800294a <emptyArray+0x12>
	for (int i = 0; i < 20; i++) {
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3301      	adds	r3, #1
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b13      	cmp	r3, #19
 8002980:	dde0      	ble.n	8002944 <emptyArray+0xc>
		}
	}
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	20000948 	.word	0x20000948
 8002994:	20000a88 	.word	0x20000a88

08002998 <increaseBullet>:

void increaseBullet(Player *player) {
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	if (player->numBullet < 9) {
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	dc04      	bgt.n	80029b2 <increaseBullet+0x1a>
		player->numBullet++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	609a      	str	r2, [r3, #8]
	}
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <decreaseBullet>:

void decreaseBullet(Player *player) {
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
	if (player->numBullet > 0) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	dd04      	ble.n	80029d8 <decreaseBullet+0x1a>
		player->numBullet--;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	609a      	str	r2, [r3, #8]
	}
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <increaseHealth>:

void increaseHealth(Player *player) {
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	if (player->health < 9) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	dc04      	bgt.n	80029fe <increaseHealth+0x1a>
		player->health++;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	605a      	str	r2, [r3, #4]
	}
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <decreaseHealth>:

void decreaseHealth(Player *player) {
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	if (player->health > 0) {
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	dd04      	ble.n	8002a24 <decreaseHealth+0x1a>
		player->health--;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	1e5a      	subs	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	605a      	str	r2, [r3, #4]
//		playExplosionSound();
	}  if (player->health <= 0) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	dc02      	bgt.n	8002a32 <decreaseHealth+0x28>
		player->isAlive = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
	}
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a42:	b672      	cpsid	i
}
 8002a44:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a46:	e7fe      	b.n	8002a46 <Error_Handler+0x8>

08002a48 <seven_segment_display_decimal>:
                    {.port=GPIOF, .pin=GPIO_PIN_2},
                    {.port=GPIOA, .pin=GPIO_PIN_1}},
        .digits={0, 0, 0, 0},
        .number = 0};

void seven_segment_display_decimal(uint32_t n) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d832      	bhi.n	8002abc <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002a58:	6a18      	ldr	r0, [r3, #32]
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002a5c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
                          (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f000 ffdb 	bl	8003a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002a70:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002a74:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
                          (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 ffce 	bl	8003a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002a8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002a8e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
                          (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f000 ffc1 	bl	8003a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002aa4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <seven_segment_display_decimal+0x7c>)
 8002aa8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
                          (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	08db      	lsrs	r3, r3, #3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 ffb4 	bl	8003a24 <HAL_GPIO_WritePin>
    }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000028 	.word	0x20000028

08002ac8 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	e00f      	b.n	8002af4 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin,
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <seven_segment_deactivate_digits+0x3c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002adc:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <seven_segment_deactivate_digits+0x3c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	889b      	ldrh	r3, [r3, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f000 ff9b 	bl	8003a24 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3301      	adds	r3, #1
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	ddec      	ble.n	8002ad4 <seven_segment_deactivate_digits+0xc>
                          GPIO_PIN_SET);
    }
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000028 	.word	0x20000028

08002b08 <seven_segment_activate_digit>:

void seven_segment_activate_digit(uint32_t d) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d80c      	bhi.n	8002b30 <seven_segment_activate_digit+0x28>
        HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin,
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <seven_segment_activate_digit+0x30>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002b1e:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <seven_segment_activate_digit+0x30>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	889b      	ldrh	r3, [r3, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f000 ff7a 	bl	8003a24 <HAL_GPIO_WritePin>
                          GPIO_PIN_RESET);
    }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000028 	.word	0x20000028

08002b3c <seven_segment_set_num>:

void seven_segment_set_num(uint32_t n) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    if (n < 10000) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d823      	bhi.n	8002b96 <seven_segment_set_num+0x5a>
        seven_segment.number = n;
 8002b4e:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <seven_segment_set_num+0x68>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6513      	str	r3, [r2, #80]	; 0x50
        for (uint32_t i = 0; i < 4; ++i) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e01a      	b.n	8002b90 <seven_segment_set_num+0x54>
            seven_segment.digits[3 - i] = n % 10;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1c3 0003 	rsb	r0, r3, #3
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <seven_segment_set_num+0x6c>)
 8002b64:	fba3 2301 	umull	r2, r3, r3, r1
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	1aca      	subs	r2, r1, r3
 8002b74:	490b      	ldr	r1, [pc, #44]	; (8002ba4 <seven_segment_set_num+0x68>)
 8002b76:	f100 0310 	add.w	r3, r0, #16
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            n /= 10;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <seven_segment_set_num+0x6c>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	08db      	lsrs	r3, r3, #3
 8002b88:	607b      	str	r3, [r7, #4]
        for (uint32_t i = 0; i < 4; ++i) {
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d9e1      	bls.n	8002b5a <seven_segment_set_num+0x1e>
        }
    }
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000028 	.word	0x20000028
 8002ba8:	cccccccd 	.word	0xcccccccd

08002bac <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
    static uint32_t state = 0;
    static uint32_t last_time = 0;
    if (HAL_GetTick() - last_time > 5) {
 8002bb0:	f000 fbee 	bl	8003390 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <seven_segment_refresh+0x50>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d91b      	bls.n	8002bf8 <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 8002bc0:	f7ff ff82 	bl	8002ac8 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state);
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <seven_segment_refresh+0x54>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff9d 	bl	8002b08 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state]);
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <seven_segment_refresh+0x54>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <seven_segment_refresh+0x58>)
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff34 	bl	8002a48 <seven_segment_display_decimal>
        state = (state + 1) % 4;
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <seven_segment_refresh+0x54>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <seven_segment_refresh+0x54>)
 8002bec:	6013      	str	r3, [r2, #0]
        last_time = HAL_GetTick();
 8002bee:	f000 fbcf 	bl	8003390 <HAL_GetTick>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4a01      	ldr	r2, [pc, #4]	; (8002bfc <seven_segment_refresh+0x50>)
 8002bf6:	6013      	str	r3, [r2, #0]
    }
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000c20 	.word	0x20000c20
 8002c00:	20000c24 	.word	0x20000c24
 8002c04:	20000028 	.word	0x20000028

08002c08 <programInit>:

void programInit(int x) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    seven_segment_set_num(x);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff92 	bl	8002b3c <seven_segment_set_num>

}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <programLoop>:


void programLoop() {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 8002c24:	f7ff ffc2 	bl	8002bac <seven_segment_refresh>

}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_MspInit+0x44>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <HAL_MspInit+0x44>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6193      	str	r3, [r2, #24]
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_MspInit+0x44>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x44>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x44>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x44>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002c62:	2005      	movs	r0, #5
 8002c64:	f000 fc94 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_RTC_MspInit+0x44>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <HAL_RTC_MspInit+0x36>
 8002c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c94:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_RTC_MspInit+0x48>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40002800 	.word	0x40002800
 8002cbc:	10908100 	.word	0x10908100

08002cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_TIM_Base_MspInit+0x98>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12c      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_TIM_Base_MspInit+0x9c>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_TIM_Base_MspInit+0x9c>)
 8002cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cdc:	6193      	str	r3, [r2, #24]
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_TIM_Base_MspInit+0x9c>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2101      	movs	r1, #1
 8002cee:	2018      	movs	r0, #24
 8002cf0:	f000 fc59 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002cf4:	2018      	movs	r0, #24
 8002cf6:	f000 fc72 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2019      	movs	r0, #25
 8002d00:	f000 fc51 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d04:	2019      	movs	r0, #25
 8002d06:	f000 fc6a 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	201a      	movs	r0, #26
 8002d10:	f000 fc49 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002d14:	201a      	movs	r0, #26
 8002d16:	f000 fc62 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	201b      	movs	r0, #27
 8002d20:	f000 fc41 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002d24:	201b      	movs	r0, #27
 8002d26:	f000 fc5a 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d2a:	e010      	b.n	8002d4e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d10b      	bne.n	8002d4e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_TIM_Base_MspInit+0x9c>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_TIM_Base_MspInit+0x9c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	61d3      	str	r3, [r2, #28]
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_TIM_Base_MspInit+0x9c>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d11c      	bne.n	8002dbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_TIM_MspPostInit+0x64>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <HAL_TIM_MspPostInit+0x64>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	6153      	str	r3, [r2, #20]
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_TIM_MspPostInit+0x64>)
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db8:	f000 fca2 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <HAL_UART_MspInit+0x8c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d130      	bne.n	8002e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_UART_MspInit+0x90>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_UART_MspInit+0x90>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	61d3      	str	r3, [r2, #28]
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_UART_MspInit+0x90>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_UART_MspInit+0x90>)
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <HAL_UART_MspInit+0x90>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6153      	str	r3, [r2, #20]
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_UART_MspInit+0x90>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	4809      	ldr	r0, [pc, #36]	; (8002e5c <HAL_UART_MspInit+0x94>)
 8002e38:	f000 fc62 	bl	8003700 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2101      	movs	r1, #1
 8002e40:	2027      	movs	r0, #39	; 0x27
 8002e42:	f000 fbb0 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e46:	2027      	movs	r0, #39	; 0x27
 8002e48:	f000 fbc9 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e4c:	bf00      	nop
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40004800 	.word	0x40004800
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	48000400 	.word	0x48000400

08002e60 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <PWM_Start+0x18>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <PWM_Start+0x1c>)
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 fe5c 	bl	8005b2c <HAL_TIM_PWM_Start>
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000007c 	.word	0x2000007c
 8002e7c:	20000080 	.word	0x20000080

08002e80 <PWM_Stop>:

void PWM_Stop() {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <PWM_Stop+0x18>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <PWM_Stop+0x1c>)
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 ff4c 	bl	8005d2c <HAL_TIM_PWM_Stop>
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	2000007c 	.word	0x2000007c
 8002e9c:	20000080 	.word	0x20000080

08002ea0 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	80fb      	strh	r3, [r7, #6]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <PWM_Change_Tone+0x20>
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d937      	bls.n	8002f30 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8002ec0:	4b52      	ldr	r3, [pc, #328]	; (800300c <PWM_Change_Tone+0x16c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <PWM_Change_Tone+0x34>
 8002ec8:	4b51      	ldr	r3, [pc, #324]	; (8003010 <PWM_Change_Tone+0x170>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed2:	e097      	b.n	8003004 <PWM_Change_Tone+0x164>
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	; (800300c <PWM_Change_Tone+0x16c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d105      	bne.n	8002ee8 <PWM_Change_Tone+0x48>
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <PWM_Change_Tone+0x170>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ee6:	e08d      	b.n	8003004 <PWM_Change_Tone+0x164>
 8002ee8:	4b48      	ldr	r3, [pc, #288]	; (800300c <PWM_Change_Tone+0x16c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d105      	bne.n	8002efc <PWM_Change_Tone+0x5c>
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <PWM_Change_Tone+0x170>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002efa:	e083      	b.n	8003004 <PWM_Change_Tone+0x164>
 8002efc:	4b43      	ldr	r3, [pc, #268]	; (800300c <PWM_Change_Tone+0x16c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d105      	bne.n	8002f10 <PWM_Change_Tone+0x70>
 8002f04:	4b42      	ldr	r3, [pc, #264]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	e079      	b.n	8003004 <PWM_Change_Tone+0x164>
 8002f10:	4b3e      	ldr	r3, [pc, #248]	; (800300c <PWM_Change_Tone+0x16c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d105      	bne.n	8002f24 <PWM_Change_Tone+0x84>
 8002f18:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	6593      	str	r3, [r2, #88]	; 0x58
 8002f22:	e06f      	b.n	8003004 <PWM_Change_Tone+0x164>
 8002f24:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002f2e:	e069      	b.n	8003004 <PWM_Change_Tone+0x164>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8002f30:	f001 ff62 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8002f34:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4a35      	ldr	r2, [pc, #212]	; (8003014 <PWM_Change_Tone+0x174>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	0b9b      	lsrs	r3, r3, #14
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 8002f4c:	8b7b      	ldrh	r3, [r7, #26]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8002f60:	88bb      	ldrh	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <PWM_Change_Tone+0x178>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	09db      	lsrs	r3, r3, #7
 8002f70:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8002f72:	8b7b      	ldrh	r3, [r7, #26]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	3a01      	subs	r2, #1
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <PWM_Change_Tone+0x16c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <PWM_Change_Tone+0x108>
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <PWM_Change_Tone+0x170>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002fa6:	e02d      	b.n	8003004 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <PWM_Change_Tone+0x16c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d105      	bne.n	8002fbc <PWM_Change_Tone+0x11c>
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <PWM_Change_Tone+0x170>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fba:	e023      	b.n	8003004 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <PWM_Change_Tone+0x16c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d105      	bne.n	8002fd0 <PWM_Change_Tone+0x130>
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <PWM_Change_Tone+0x170>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002fce:	e019      	b.n	8003004 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <PWM_Change_Tone+0x16c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d105      	bne.n	8002fe4 <PWM_Change_Tone+0x144>
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <PWM_Change_Tone+0x170>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002fe2:	e00f      	b.n	8003004 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <PWM_Change_Tone+0x16c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d105      	bne.n	8002ff8 <PWM_Change_Tone+0x158>
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <PWM_Change_Tone+0x170>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002ff6:	e005      	b.n	8003004 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <PWM_Change_Tone+0x170>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003002:	e7ff      	b.n	8003004 <PWM_Change_Tone+0x164>
 8003004:	bf00      	nop
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000080 	.word	0x20000080
 8003010:	2000007c 	.word	0x2000007c
 8003014:	45e7b273 	.word	0x45e7b273
 8003018:	10624dd3 	.word	0x10624dd3

0800301c <call_change_melody>:

void call_change_melody() {
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	PWM_Start();
 8003020:	f7ff ff1e 	bl	8002e60 <PWM_Start>
	Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 8003024:	2141      	movs	r1, #65	; 0x41
 8003026:	4802      	ldr	r0, [pc, #8]	; (8003030 <call_change_melody+0x14>)
 8003028:	f000 f804 	bl	8003034 <Change_Melody>
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	08008f4c 	.word	0x08008f4c

08003034 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count) {
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <Change_Melody+0x2c>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8003046:	4a07      	ldr	r2, [pc, #28]	; (8003064 <Change_Melody+0x30>)
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <Change_Melody+0x34>)
 800304e:	2200      	movs	r2, #0
 8003050:	801a      	strh	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000c28 	.word	0x20000c28
 8003064:	20000c2c 	.word	0x20000c2c
 8003068:	20000c2e 	.word	0x20000c2e

0800306c <Update_Melody>:


void Update_Melody() {
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() > current_tone_end)
 8003072:	f000 f98d 	bl	8003390 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <Update_Melody+0x84>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d932      	bls.n	80030e6 <Update_Melody+0x7a>
			&& (current_tone_number < melody_tone_count)) {
 8003080:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <Update_Melody+0x88>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29a      	uxth	r2, r3
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <Update_Melody+0x8c>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	429a      	cmp	r2, r3
 800308e:	d22a      	bcs.n	80030e6 <Update_Melody+0x7a>
		const Tone active_tone = *(melody_ptr + current_tone_number);
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <Update_Melody+0x90>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <Update_Melody+0x88>)
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	441a      	add	r2, r3
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	6810      	ldr	r0, [r2, #0]
 80030a2:	6018      	str	r0, [r3, #0]
		PWM_Change_Tone(active_tone.frequency, volume);
 80030a4:	88bb      	ldrh	r3, [r7, #4]
 80030a6:	4a16      	ldr	r2, [pc, #88]	; (8003100 <Update_Melody+0x94>)
 80030a8:	8812      	ldrh	r2, [r2, #0]
 80030aa:	b292      	uxth	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fef6 	bl	8002ea0 <PWM_Change_Tone>
		current_tone_end = HAL_GetTick() + active_tone.duration;
 80030b4:	f000 f96c 	bl	8003390 <HAL_GetTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	4413      	add	r3, r2
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <Update_Melody+0x84>)
 80030c0:	6013      	str	r3, [r2, #0]
		current_tone_number++;
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <Update_Melody+0x88>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <Update_Melody+0x88>)
 80030ce:	801a      	strh	r2, [r3, #0]

		if (current_tone_number >= melody_tone_count) {
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <Update_Melody+0x88>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <Update_Melody+0x8c>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <Update_Melody+0x7a>
			current_tone_number = 0;
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <Update_Melody+0x88>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000c30 	.word	0x20000c30
 80030f4:	20000c2e 	.word	0x20000c2e
 80030f8:	20000c2c 	.word	0x20000c2c
 80030fc:	20000c28 	.word	0x20000c28
 8003100:	20000084 	.word	0x20000084

08003104 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003108:	e7fe      	b.n	8003108 <NMI_Handler+0x4>

0800310a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800310e:	e7fe      	b.n	800310e <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8003114:	e7fe      	b.n	8003114 <MemManage_Handler+0x4>

08003116 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800311a:	e7fe      	b.n	800311a <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003120:	e7fe      	b.n	8003120 <UsageFault_Handler+0x4>

08003122 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003150:	f000 f90a 	bl	8003368 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8003154:	f7ff ff8a 	bl	800306c <Update_Melody>
	/* USER CODE END SysTick_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}

0800315c <EXTI1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void) {
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003160:	2002      	movs	r0, #2
 8003162:	f000 fc77 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}

0800316a <EXTI2_TSC_IRQHandler>:

/**
 * @brief This function handles EXTI line2 and Touch Sense controller.
 */
void EXTI2_TSC_IRQHandler(void) {
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

	/* USER CODE END EXTI2_TSC_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800316e:	2004      	movs	r0, #4
 8003170:	f000 fc70 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

	/* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI3_IRQn 0 */

	/* USER CODE END EXTI3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800317c:	2008      	movs	r0, #8
 800317e:	f000 fc69 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI3_IRQn 1 */

	/* USER CODE END EXTI3_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}

08003186 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void) {
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */

	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800318a:	2010      	movs	r0, #16
 800318c:	f000 fc62 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */

	/* USER CODE END EXTI4_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <TIM1_BRK_TIM15_IRQHandler>:

/**
 * @brief This function handles TIM1 break and TIM15 interrupts.
 */
void TIM1_BRK_TIM15_IRQHandler(void) {
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800319a:	f002 fe5d 	bl	8005e58 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000158 	.word	0x20000158

080031a8 <TIM1_UP_TIM16_IRQHandler>:

/**
 * @brief This function handles TIM1 update and TIM16 interrupts.
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80031ae:	f002 fe53 	bl	8005e58 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000158 	.word	0x20000158

080031bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
 * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
 */
void TIM1_TRG_COM_TIM17_IRQHandler(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

	/* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80031c2:	f002 fe49 	bl	8005e58 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

	/* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000158 	.word	0x20000158

080031d0 <TIM1_CC_IRQHandler>:

/**
 * @brief This function handles TIM1 capture compare interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_CC_IRQn 0 */

	/* USER CODE END TIM1_CC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <TIM1_CC_IRQHandler+0x10>)
 80031d6:	f002 fe3f 	bl	8005e58 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_CC_IRQn 1 */

	/* USER CODE END TIM1_CC_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000158 	.word	0x20000158

080031e4 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
 */
void USART3_IRQHandler(void) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <USART3_IRQHandler+0x10>)
 80031ea:	f003 ff3b 	bl	8007064 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200001f0 	.word	0x200001f0

080031f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <_sbrk+0x5c>)
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <_sbrk+0x60>)
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <_sbrk+0x64>)
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <_sbrk+0x68>)
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003228:	f005 f8ac 	bl	8008384 <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	220c      	movs	r2, #12
 8003230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003236:	e009      	b.n	800324c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <_sbrk+0x64>)
 8003248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000a000 	.word	0x2000a000
 8003258:	00000400 	.word	0x00000400
 800325c:	20000c34 	.word	0x20000c34
 8003260:	20000c50 	.word	0x20000c50

08003264 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <SystemInit+0x20>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <SystemInit+0x20>)
 8003270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800328c:	f7ff ffea 	bl	8003264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003290:	480c      	ldr	r0, [pc, #48]	; (80032c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003292:	490d      	ldr	r1, [pc, #52]	; (80032c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003294:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <LoopForever+0xe>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003298:	e002      	b.n	80032a0 <LoopCopyDataInit>

0800329a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800329c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800329e:	3304      	adds	r3, #4

080032a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a4:	d3f9      	bcc.n	800329a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032a8:	4c0a      	ldr	r4, [pc, #40]	; (80032d4 <LoopForever+0x16>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ac:	e001      	b.n	80032b2 <LoopFillZerobss>

080032ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b0:	3204      	adds	r2, #4

080032b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b4:	d3fb      	bcc.n	80032ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032b6:	f005 f86b 	bl	8008390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ba:	f7fd ff79 	bl	80011b0 <main>

080032be <LoopForever>:

LoopForever:
    b LoopForever
 80032be:	e7fe      	b.n	80032be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80032c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032c8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80032cc:	080091c4 	.word	0x080091c4
  ldr r2, =_sbss
 80032d0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80032d4:	20000c4c 	.word	0x20000c4c

080032d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032d8:	e7fe      	b.n	80032d8 <ADC1_2_IRQHandler>
	...

080032dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_Init+0x28>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_Init+0x28>)
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ec:	2003      	movs	r0, #3
 80032ee:	f000 f94f 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f000 f808 	bl	8003308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f8:	f7ff fc98 	bl	8002c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40022000 	.word	0x40022000

08003308 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_InitTick+0x54>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_InitTick+0x58>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800331e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f967 	bl	80035fa <HAL_SYSTICK_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e00e      	b.n	8003354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d80a      	bhi.n	8003352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800333c:	2200      	movs	r2, #0
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003344:	f000 f92f 	bl	80035a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <HAL_InitTick+0x5c>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000088 	.word	0x20000088
 8003360:	20000090 	.word	0x20000090
 8003364:	2000008c 	.word	0x2000008c

08003368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_IncTick+0x20>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_IncTick+0x24>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4413      	add	r3, r2
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_IncTick+0x24>)
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000090 	.word	0x20000090
 800338c:	20000c38 	.word	0x20000c38

08003390 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return uwTick;  
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_GetTick+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000c38 	.word	0x20000c38

080033a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f7ff ffee 	bl	8003390 <HAL_GetTick>
 80033b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c0:	d005      	beq.n	80033ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_Delay+0x44>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033ce:	bf00      	nop
 80033d0:	f7ff ffde 	bl	8003390 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d8f7      	bhi.n	80033d0 <HAL_Delay+0x28>
  {
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000090 	.word	0x20000090

080033f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800341c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <__NVIC_GetPriorityGrouping+0x18>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	f003 0307 	and.w	r3, r3, #7
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	db0b      	blt.n	800347e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	4907      	ldr	r1, [pc, #28]	; (800348c <__NVIC_EnableIRQ+0x38>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2001      	movs	r0, #1
 8003476:	fa00 f202 	lsl.w	r2, r0, r2
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	; (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800355c:	d301      	bcc.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <SysTick_Config+0x40>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	210f      	movs	r1, #15
 800356c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003570:	f7ff ff8e 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <SysTick_Config+0x40>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <SysTick_Config+0x40>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000e010 	.word	0xe000e010

08003590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff29 	bl	80033f0 <__NVIC_SetPriorityGrouping>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff3e 	bl	8003438 <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff8e 	bl	80034e4 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5d 	bl	8003490 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff31 	bl	8003454 <__NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa2 	bl	800354c <SysTick_Config>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003620:	2b02      	cmp	r3, #2
 8003622:	d008      	beq.n	8003636 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e020      	b.n	8003678 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020e 	bic.w	r2, r2, #14
 8003644:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f202 	lsl.w	r2, r1, r2
 8003664:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003696:	2b02      	cmp	r3, #2
 8003698:	d005      	beq.n	80036a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e027      	b.n	80036f6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 020e 	bic.w	r2, r2, #14
 80036b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    } 
  }
  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370e:	e154      	b.n	80039ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8146 	beq.w	80039b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d005      	beq.n	8003740 <HAL_GPIO_Init+0x40>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d130      	bne.n	80037a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003776:	2201      	movs	r2, #1
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0201 	and.w	r2, r3, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d017      	beq.n	80037de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d123      	bne.n	8003832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	08da      	lsrs	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3208      	adds	r2, #8
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	08da      	lsrs	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3208      	adds	r2, #8
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2203      	movs	r2, #3
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80a0 	beq.w	80039b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003874:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_GPIO_Init+0x2d8>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_GPIO_Init+0x2d8>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6193      	str	r3, [r2, #24]
 8003880:	4b55      	ldr	r3, [pc, #340]	; (80039d8 <HAL_GPIO_Init+0x2d8>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800388c:	4a53      	ldr	r2, [pc, #332]	; (80039dc <HAL_GPIO_Init+0x2dc>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	3302      	adds	r3, #2
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038b6:	d019      	beq.n	80038ec <HAL_GPIO_Init+0x1ec>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a49      	ldr	r2, [pc, #292]	; (80039e0 <HAL_GPIO_Init+0x2e0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_GPIO_Init+0x1e8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a48      	ldr	r2, [pc, #288]	; (80039e4 <HAL_GPIO_Init+0x2e4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00d      	beq.n	80038e4 <HAL_GPIO_Init+0x1e4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a47      	ldr	r2, [pc, #284]	; (80039e8 <HAL_GPIO_Init+0x2e8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <HAL_GPIO_Init+0x1e0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a46      	ldr	r2, [pc, #280]	; (80039ec <HAL_GPIO_Init+0x2ec>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_GPIO_Init+0x1dc>
 80038d8:	2304      	movs	r3, #4
 80038da:	e008      	b.n	80038ee <HAL_GPIO_Init+0x1ee>
 80038dc:	2305      	movs	r3, #5
 80038de:	e006      	b.n	80038ee <HAL_GPIO_Init+0x1ee>
 80038e0:	2303      	movs	r3, #3
 80038e2:	e004      	b.n	80038ee <HAL_GPIO_Init+0x1ee>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e002      	b.n	80038ee <HAL_GPIO_Init+0x1ee>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_GPIO_Init+0x1ee>
 80038ec:	2300      	movs	r3, #0
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	f002 0203 	and.w	r2, r2, #3
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	4093      	lsls	r3, r2
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038fe:	4937      	ldr	r1, [pc, #220]	; (80039dc <HAL_GPIO_Init+0x2dc>)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003930:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800395a:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003984:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_GPIO_Init+0x2f0>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f47f aea3 	bne.w	8003710 <HAL_GPIO_Init+0x10>
  }
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	40010400 	.word	0x40010400

080039f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e001      	b.n	8003a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd f938 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f001 b823 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 817d 	beq.w	8003dba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ac0:	4bbc      	ldr	r3, [pc, #752]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d00c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003acc:	4bb9      	ldr	r3, [pc, #740]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d15c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x10e>
 8003ad8:	4bb6      	ldr	r3, [pc, #728]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d155      	bne.n	8003b92 <HAL_RCC_OscConfig+0x10e>
 8003ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003afa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_RCC_OscConfig+0x94>
 8003b12:	4ba8      	ldr	r3, [pc, #672]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	e015      	b.n	8003b44 <HAL_RCC_OscConfig+0xc0>
 8003b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b40:	4b9c      	ldr	r3, [pc, #624]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b50:	fa92 f2a2 	rbit	r2, r2
 8003b54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f042 0220 	orr.w	r2, r2, #32
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f002 021f 	and.w	r2, r2, #31
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 811f 	beq.w	8003db8 <HAL_RCC_OscConfig+0x334>
 8003b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 8116 	bne.w	8003db8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f000 bfaf 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12e>
 8003ba4:	4b83      	ldr	r3, [pc, #524]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a82      	ldr	r2, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e036      	b.n	8003c20 <HAL_RCC_OscConfig+0x19c>
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x158>
 8003bc2:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a7b      	ldr	r2, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a78      	ldr	r2, [pc, #480]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e021      	b.n	8003c20 <HAL_RCC_OscConfig+0x19c>
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x184>
 8003bee:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a70      	ldr	r2, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b6e      	ldr	r3, [pc, #440]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6d      	ldr	r2, [pc, #436]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0x19c>
 8003c08:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a69      	ldr	r2, [pc, #420]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b67      	ldr	r3, [pc, #412]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a66      	ldr	r2, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c20:	4b64      	ldr	r3, [pc, #400]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f023 020f 	bic.w	r2, r3, #15
 8003c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	495f      	ldr	r1, [pc, #380]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d059      	beq.n	8003cfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7ff fba1 	bl	8003390 <HAL_GetTick>
 8003c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7ff fb9c 	bl	8003390 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	; 0x64
 8003c62:	d902      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	f000 bf43 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
 8003c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d102      	bne.n	8003c9c <HAL_RCC_OscConfig+0x218>
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	e015      	b.n	8003cc8 <HAL_RCC_OscConfig+0x244>
 8003c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ccc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003cd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cd4:	fa92 f2a2 	rbit	r2, r2
 8003cd8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003cdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ce0:	fab2 f282 	clz	r2, r2
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f042 0220 	orr.w	r2, r2, #32
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f002 021f 	and.w	r2, r2, #31
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ab      	beq.n	8003c54 <HAL_RCC_OscConfig+0x1d0>
 8003cfc:	e05d      	b.n	8003dba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7ff fb47 	bl	8003390 <HAL_GetTick>
 8003d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d08:	f7ff fb42 	bl	8003390 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d902      	bls.n	8003d1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f000 bee9 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
 8003d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2cc>
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	e015      	b.n	8003d7c <HAL_RCC_OscConfig+0x2f8>
 8003d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCC_OscConfig+0x330>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d88:	fa92 f2a2 	rbit	r2, r2
 8003d8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d94:	fab2 f282 	clz	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f042 0220 	orr.w	r2, r2, #32
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f002 021f 	and.w	r2, r2, #31
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f202 	lsl.w	r2, r1, r2
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ab      	bne.n	8003d08 <HAL_RCC_OscConfig+0x284>
 8003db0:	e003      	b.n	8003dba <HAL_RCC_OscConfig+0x336>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 817d 	beq.w	80040ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003dd0:	4ba6      	ldr	r3, [pc, #664]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ddc:	4ba3      	ldr	r3, [pc, #652]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d172      	bne.n	8003ece <HAL_RCC_OscConfig+0x44a>
 8003de8:	4ba0      	ldr	r3, [pc, #640]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d16c      	bne.n	8003ece <HAL_RCC_OscConfig+0x44a>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003e06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d102      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3a0>
 8003e1e:	4b93      	ldr	r3, [pc, #588]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e013      	b.n	8003e4c <HAL_RCC_OscConfig+0x3c8>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e36:	2302      	movs	r3, #2
 8003e38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e48:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e56:	fa92 f2a2 	rbit	r2, r2
 8003e5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	f042 0220 	orr.w	r2, r2, #32
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f002 021f 	and.w	r2, r2, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCC_OscConfig+0x410>
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f000 be2e 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e94:	4b75      	ldr	r3, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	21f8      	movs	r1, #248	; 0xf8
 8003eaa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003eb2:	fa91 f1a1 	rbit	r1, r1
 8003eb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003eba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ebe:	fab1 f181 	clz	r1, r1
 8003ec2:	b2c9      	uxtb	r1, r1
 8003ec4:	408b      	lsls	r3, r1
 8003ec6:	4969      	ldr	r1, [pc, #420]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ecc:	e0fd      	b.n	80040ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8088 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x56c>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003ef2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	461a      	mov	r2, r3
 8003f08:	2301      	movs	r3, #1
 8003f0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7ff fa40 	bl	8003390 <HAL_GetTick>
 8003f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f16:	f7ff fa3b 	bl	8003390 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d902      	bls.n	8003f2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	f000 bde2 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4d8>
 8003f56:	4b45      	ldr	r3, [pc, #276]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e013      	b.n	8003f84 <HAL_RCC_OscConfig+0x500>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f6e:	2302      	movs	r3, #2
 8003f70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f80:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	2202      	movs	r2, #2
 8003f86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f8e:	fa92 f2a2 	rbit	r2, r2
 8003f92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f9a:	fab2 f282 	clz	r2, r2
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	f042 0220 	orr.w	r2, r2, #32
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	f002 021f 	and.w	r2, r2, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0af      	beq.n	8003f16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	21f8      	movs	r1, #248	; 0xf8
 8003fcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fd4:	fa91 f1a1 	rbit	r1, r1
 8003fd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003fdc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003fe0:	fab1 f181 	clz	r1, r1
 8003fe4:	b2c9      	uxtb	r1, r1
 8003fe6:	408b      	lsls	r3, r1
 8003fe8:	4920      	ldr	r1, [pc, #128]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
 8003fee:	e06c      	b.n	80040ca <HAL_RCC_OscConfig+0x646>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7ff f9b8 	bl	8003390 <HAL_GetTick>
 8004020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004026:	f7ff f9b3 	bl	8003390 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d902      	bls.n	800403c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f000 bd5a 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
 800403c:	2302      	movs	r3, #2
 800403e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800404e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d104      	bne.n	8004070 <HAL_RCC_OscConfig+0x5ec>
 8004066:	4b01      	ldr	r3, [pc, #4]	; (800406c <HAL_RCC_OscConfig+0x5e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	e015      	b.n	8004098 <HAL_RCC_OscConfig+0x614>
 800406c:	40021000 	.word	0x40021000
 8004070:	2302      	movs	r3, #2
 8004072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004082:	2302      	movs	r3, #2
 8004084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004088:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004094:	4bc8      	ldr	r3, [pc, #800]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2202      	movs	r2, #2
 800409a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800409e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80040a2:	fa92 f2a2 	rbit	r2, r2
 80040a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80040aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80040ae:	fab2 f282 	clz	r2, r2
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	f042 0220 	orr.w	r2, r2, #32
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	f002 021f 	and.w	r2, r2, #31
 80040be:	2101      	movs	r1, #1
 80040c0:	fa01 f202 	lsl.w	r2, r1, r2
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ad      	bne.n	8004026 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8110 	beq.w	8004300 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d079      	beq.n	80041e4 <HAL_RCC_OscConfig+0x760>
 80040f0:	2301      	movs	r3, #1
 80040f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	4bab      	ldr	r3, [pc, #684]	; (80043bc <HAL_RCC_OscConfig+0x938>)
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	461a      	mov	r2, r3
 8004116:	2301      	movs	r3, #1
 8004118:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7ff f939 	bl	8003390 <HAL_GetTick>
 800411e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	e00a      	b.n	800413a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004124:	f7ff f934 	bl	8003390 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d902      	bls.n	800413a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	f000 bcdb 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
 800413a:	2302      	movs	r3, #2
 800413c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004178:	2202      	movs	r2, #2
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004192:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004194:	4b88      	ldr	r3, [pc, #544]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 8004196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80041a0:	2102      	movs	r1, #2
 80041a2:	6019      	str	r1, [r3, #0]
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	fa93 f1a3 	rbit	r1, r3
 80041b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80041ba:	6019      	str	r1, [r3, #0]
  return result;
 80041bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0a0      	beq.n	8004124 <HAL_RCC_OscConfig+0x6a0>
 80041e2:	e08d      	b.n	8004300 <HAL_RCC_OscConfig+0x87c>
 80041e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	fa93 f2a3 	rbit	r2, r3
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004206:	601a      	str	r2, [r3, #0]
  return result;
 8004208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004210:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <HAL_RCC_OscConfig+0x938>)
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	461a      	mov	r2, r3
 8004222:	2300      	movs	r3, #0
 8004224:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7ff f8b3 	bl	8003390 <HAL_GetTick>
 800422a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004230:	f7ff f8ae 	bl	8003390 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d902      	bls.n	8004246 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	f000 bc55 	b.w	8004af0 <HAL_RCC_OscConfig+0x106c>
 8004246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800424e:	2202      	movs	r2, #2
 8004250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	fa93 f2a3 	rbit	r2, r3
 8004260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004264:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004272:	2202      	movs	r2, #2
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	fa93 f2a3 	rbit	r2, r3
 8004284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004296:	2202      	movs	r2, #2
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	fa93 f2a3 	rbit	r2, r3
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b2:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 80042b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042be:	2102      	movs	r1, #2
 80042c0:	6019      	str	r1, [r3, #0]
 80042c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	fa93 f1a3 	rbit	r1, r3
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80042d8:	6019      	str	r1, [r3, #0]
  return result;
 80042da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	fab3 f383 	clz	r3, r3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d197      	bne.n	8004230 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 81a1 	beq.w	8004658 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431c:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	61d3      	str	r3, [r2, #28]
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800434e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCC_OscConfig+0x93c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11a      	bne.n	8004398 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004362:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <HAL_RCC_OscConfig+0x93c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_RCC_OscConfig+0x93c>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7ff f80f 	bl	8003390 <HAL_GetTick>
 8004372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	e009      	b.n	800438c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004378:	f7ff f80a 	bl	8003390 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	; 0x64
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e3b1      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <HAL_RCC_OscConfig+0x93c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ef      	beq.n	8004378 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10d      	bne.n	80043c4 <HAL_RCC_OscConfig+0x940>
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a02      	ldr	r2, [pc, #8]	; (80043b8 <HAL_RCC_OscConfig+0x934>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	e03c      	b.n	8004430 <HAL_RCC_OscConfig+0x9ac>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	10908120 	.word	0x10908120
 80043c0:	40007000 	.word	0x40007000
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0x96a>
 80043d4:	4bc1      	ldr	r3, [pc, #772]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	4ac0      	ldr	r2, [pc, #768]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6213      	str	r3, [r2, #32]
 80043e0:	4bbe      	ldr	r3, [pc, #760]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4abd      	ldr	r2, [pc, #756]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6213      	str	r3, [r2, #32]
 80043ec:	e020      	b.n	8004430 <HAL_RCC_OscConfig+0x9ac>
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x994>
 80043fe:	4bb7      	ldr	r3, [pc, #732]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4ab6      	ldr	r2, [pc, #728]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	6213      	str	r3, [r2, #32]
 800440a:	4bb4      	ldr	r3, [pc, #720]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4ab3      	ldr	r2, [pc, #716]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6213      	str	r3, [r2, #32]
 8004416:	e00b      	b.n	8004430 <HAL_RCC_OscConfig+0x9ac>
 8004418:	4bb0      	ldr	r3, [pc, #704]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	4aaf      	ldr	r2, [pc, #700]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6213      	str	r3, [r2, #32]
 8004424:	4bad      	ldr	r3, [pc, #692]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4aac      	ldr	r2, [pc, #688]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 800442a:	f023 0304 	bic.w	r3, r3, #4
 800442e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8081 	beq.w	8004544 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004442:	f7fe ffa5 	bl	8003390 <HAL_GetTick>
 8004446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe ffa0 	bl	8003390 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e345      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
 8004464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004468:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800446c:	2202      	movs	r2, #2
 800446e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	fa93 f2a3 	rbit	r2, r3
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004490:	2202      	movs	r2, #2
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	fa93 f2a3 	rbit	r2, r3
 80044a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80044aa:	601a      	str	r2, [r3, #0]
  return result;
 80044ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80044b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f043 0302 	orr.w	r3, r3, #2
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d102      	bne.n	80044d0 <HAL_RCC_OscConfig+0xa4c>
 80044ca:	4b84      	ldr	r3, [pc, #528]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	e013      	b.n	80044f8 <HAL_RCC_OscConfig+0xa74>
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80044d8:	2202      	movs	r2, #2
 80044da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	4b79      	ldr	r3, [pc, #484]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004500:	2102      	movs	r1, #2
 8004502:	6011      	str	r1, [r2, #0]
 8004504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004508:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	fa92 f1a2 	rbit	r1, r2
 8004512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004516:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800451a:	6011      	str	r1, [r2, #0]
  return result;
 800451c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004520:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	fab2 f282 	clz	r2, r2
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	f002 021f 	and.w	r2, r2, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f202 	lsl.w	r2, r1, r2
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d084      	beq.n	800444c <HAL_RCC_OscConfig+0x9c8>
 8004542:	e07f      	b.n	8004644 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004544:	f7fe ff24 	bl	8003390 <HAL_GetTick>
 8004548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	e00b      	b.n	8004566 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fe ff1f 	bl	8003390 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e2c4      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
 8004566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800456e:	2202      	movs	r2, #2
 8004570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	fa93 f2a3 	rbit	r2, r3
 8004580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004584:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004592:	2202      	movs	r2, #2
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fa93 f2a3 	rbit	r2, r3
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80045ac:	601a      	str	r2, [r3, #0]
  return result;
 80045ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80045b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d102      	bne.n	80045d2 <HAL_RCC_OscConfig+0xb4e>
 80045cc:	4b43      	ldr	r3, [pc, #268]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	e013      	b.n	80045fa <HAL_RCC_OscConfig+0xb76>
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80045da:	2202      	movs	r2, #2
 80045dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	fa93 f2a3 	rbit	r2, r3
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004602:	2102      	movs	r1, #2
 8004604:	6011      	str	r1, [r2, #0]
 8004606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800460a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	fa92 f1a2 	rbit	r1, r2
 8004614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004618:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800461c:	6011      	str	r1, [r2, #0]
  return result;
 800461e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004622:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	fab2 f282 	clz	r2, r2
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	f002 021f 	and.w	r2, r2, #31
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d184      	bne.n	800454e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004644:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004656:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8242 	beq.w	8004aee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <HAL_RCC_OscConfig+0xc58>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b08      	cmp	r3, #8
 8004674:	f000 8213 	beq.w	8004a9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b02      	cmp	r3, #2
 8004686:	f040 8162 	bne.w	800494e <HAL_RCC_OscConfig+0xeca>
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fa93 f2a3 	rbit	r2, r3
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80046ae:	601a      	str	r2, [r3, #0]
  return result;
 80046b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80046b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe fe5e 	bl	8003390 <HAL_GetTick>
 80046d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d8:	e00c      	b.n	80046f4 <HAL_RCC_OscConfig+0xc70>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe fe56 	bl	8003390 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1fd      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80046fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004718:	601a      	str	r2, [r3, #0]
  return result;
 800471a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004722:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004724:	fab3 f383 	clz	r3, r3
 8004728:	b2db      	uxtb	r3, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <HAL_RCC_OscConfig+0xcba>
 8004738:	4bb0      	ldr	r3, [pc, #704]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	e027      	b.n	800478e <HAL_RCC_OscConfig+0xd0a>
 800473e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004742:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800474a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004750:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	fa93 f2a3 	rbit	r2, r3
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004768:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800476c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004776:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	fa93 f2a3 	rbit	r2, r3
 8004780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004784:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	4b9c      	ldr	r3, [pc, #624]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004792:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004796:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800479a:	6011      	str	r1, [r2, #0]
 800479c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	fa92 f1a2 	rbit	r1, r2
 80047aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80047b2:	6011      	str	r1, [r2, #0]
  return result;
 80047b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	fab2 f282 	clz	r2, r2
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	f042 0220 	orr.w	r2, r2, #32
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	f002 021f 	and.w	r2, r2, #31
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f202 	lsl.w	r2, r1, r2
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d182      	bne.n	80046e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047da:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	430b      	orrs	r3, r1
 80047fc:	497f      	ldr	r1, [pc, #508]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 8004802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004806:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800480a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800480e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	fa93 f2a3 	rbit	r2, r3
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004826:	601a      	str	r2, [r3, #0]
  return result;
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004830:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800483c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	461a      	mov	r2, r3
 8004844:	2301      	movs	r3, #1
 8004846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fe fda2 	bl	8003390 <HAL_GetTick>
 800484c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004850:	e009      	b.n	8004866 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004852:	f7fe fd9d 	bl	8003390 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e144      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800486e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	fa93 f2a3 	rbit	r2, r3
 8004882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004886:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800488a:	601a      	str	r2, [r3, #0]
  return result;
 800488c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004890:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_RCC_OscConfig+0xe2c>
 80048aa:	4b54      	ldr	r3, [pc, #336]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	e027      	b.n	8004900 <HAL_RCC_OscConfig+0xe7c>
 80048b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80048b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	fa93 f2a3 	rbit	r2, r3
 80048cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80048de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	fa93 f2a3 	rbit	r2, r3
 80048f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004904:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004912:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	fa92 f1a2 	rbit	r1, r2
 800491c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004920:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004924:	6011      	str	r1, [r2, #0]
  return result;
 8004926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800492a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	fab2 f282 	clz	r2, r2
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f042 0220 	orr.w	r2, r2, #32
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	f002 021f 	and.w	r2, r2, #31
 8004940:	2101      	movs	r1, #1
 8004942:	fa01 f202 	lsl.w	r2, r1, r2
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d082      	beq.n	8004852 <HAL_RCC_OscConfig+0xdce>
 800494c:	e0cf      	b.n	8004aee <HAL_RCC_OscConfig+0x106a>
 800494e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004952:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800495a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	fa93 f2a3 	rbit	r2, r3
 800496a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004972:	601a      	str	r2, [r3, #0]
  return result;
 8004974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004978:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800497c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004988:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fe fcfc 	bl	8003390 <HAL_GetTick>
 8004998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499c:	e009      	b.n	80049b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499e:	f7fe fcf7 	bl	8003390 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e09e      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
 80049b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80049ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	fa93 f2a3 	rbit	r2, r3
 80049ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049d6:	601a      	str	r2, [r3, #0]
  return result;
 80049d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d104      	bne.n	8004a00 <HAL_RCC_OscConfig+0xf7c>
 80049f6:	4b01      	ldr	r3, [pc, #4]	; (80049fc <HAL_RCC_OscConfig+0xf78>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	e029      	b.n	8004a50 <HAL_RCC_OscConfig+0xfcc>
 80049fc:	40021000 	.word	0x40021000
 8004a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	fa93 f2a3 	rbit	r2, r3
 8004a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a38:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	fa93 f2a3 	rbit	r2, r3
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_RCC_OscConfig+0x1078>)
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a54:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a5c:	6011      	str	r1, [r2, #0]
 8004a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a62:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	fa92 f1a2 	rbit	r1, r2
 8004a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a70:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a74:	6011      	str	r1, [r2, #0]
  return result;
 8004a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	fab2 f282 	clz	r2, r2
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	f042 0220 	orr.w	r2, r2, #32
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f002 021f 	and.w	r2, r2, #31
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f202 	lsl.w	r2, r1, r2
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d180      	bne.n	800499e <HAL_RCC_OscConfig+0xf1a>
 8004a9c:	e027      	b.n	8004aee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e01e      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCC_OscConfig+0x1078>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004aba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004abe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004ad2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b09e      	sub	sp, #120	; 0x78
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e162      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b90      	ldr	r3, [pc, #576]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d910      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b8d      	ldr	r3, [pc, #564]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 0207 	bic.w	r2, r3, #7
 8004b2e:	498b      	ldr	r1, [pc, #556]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b89      	ldr	r3, [pc, #548]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e14a      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b82      	ldr	r3, [pc, #520]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	497f      	ldr	r1, [pc, #508]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80dc 	beq.w	8004d2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d13c      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xf6>
 8004b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xa6>
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	e00f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0xc6>
 8004ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004baa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8004bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bca:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bce:	fa92 f2a2 	rbit	r2, r2
 8004bd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bd6:	fab2 f282 	clz	r2, r2
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	f042 0220 	orr.w	r2, r2, #32
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	f002 021f 	and.w	r2, r2, #31
 8004be6:	2101      	movs	r1, #1
 8004be8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d17b      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0f3      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d13c      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x178>
 8004bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d102      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x128>
 8004c22:	4b4f      	ldr	r3, [pc, #316]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	e00f      	b.n	8004c48 <HAL_RCC_ClockConfig+0x148>
 8004c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c30:	fa93 f3a3 	rbit	r3, r3
 8004c34:	647b      	str	r3, [r7, #68]	; 0x44
 8004c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	4b46      	ldr	r3, [pc, #280]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c50:	fa92 f2a2 	rbit	r2, r2
 8004c54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c58:	fab2 f282 	clz	r2, r2
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	f042 0220 	orr.w	r2, r2, #32
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	f002 021f 	and.w	r2, r2, #31
 8004c68:	2101      	movs	r1, #1
 8004c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d13a      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0b2      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x1a0>
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	e00d      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1bc>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
 8004cac:	2302      	movs	r3, #2
 8004cae:	623b      	str	r3, [r7, #32]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	61ba      	str	r2, [r7, #24]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	fa92 f2a2 	rbit	r2, r2
 8004cc6:	617a      	str	r2, [r7, #20]
  return result;
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0220 	orr.w	r2, r2, #32
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e079      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	491a      	ldr	r1, [pc, #104]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7fe fb48 	bl	8003390 <HAL_GetTick>
 8004d00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7fe fb44 	bl	8003390 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e061      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_RCC_ClockConfig+0x260>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d214      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 0207 	bic.w	r2, r3, #7
 8004d42:	4906      	ldr	r1, [pc, #24]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <HAL_RCC_ClockConfig+0x25c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e040      	b.n	8004dde <HAL_RCC_ClockConfig+0x2de>
 8004d5c:	40022000 	.word	0x40022000
 8004d60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <HAL_RCC_ClockConfig+0x2e8>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	491a      	ldr	r1, [pc, #104]	; (8004de8 <HAL_RCC_ClockConfig+0x2e8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_RCC_ClockConfig+0x2e8>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4912      	ldr	r1, [pc, #72]	; (8004de8 <HAL_RCC_ClockConfig+0x2e8>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004da2:	f000 f829 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004da6:	4601      	mov	r1, r0
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_RCC_ClockConfig+0x2e8>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db0:	22f0      	movs	r2, #240	; 0xf0
 8004db2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	60fa      	str	r2, [r7, #12]
  return result;
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	fab2 f282 	clz	r2, r2
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	40d3      	lsrs	r3, r2
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x2ec>)
 8004dc8:	5cd3      	ldrb	r3, [r2, r3]
 8004dca:	fa21 f303 	lsr.w	r3, r1, r3
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <HAL_RCC_ClockConfig+0x2f0>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <HAL_RCC_ClockConfig+0x2f4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fa96 	bl	8003308 <HAL_InitTick>
  
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3778      	adds	r7, #120	; 0x78
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08009050 	.word	0x08009050
 8004df0:	20000088 	.word	0x20000088
 8004df4:	2000008c 	.word	0x2000008c

08004df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x30>
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x36>
 8004e26:	e03c      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e28:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e2a:	623b      	str	r3, [r7, #32]
      break;
 8004e2c:	e03c      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	fa92 f2a2 	rbit	r2, r2
 8004e40:	607a      	str	r2, [r7, #4]
  return result;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	fab2 f282 	clz	r2, r2
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	40d3      	lsrs	r3, r2
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e4e:	5cd3      	ldrb	r3, [r2, r3]
 8004e50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e52:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	220f      	movs	r2, #15
 8004e5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	fa92 f2a2 	rbit	r2, r2
 8004e64:	60fa      	str	r2, [r7, #12]
  return result;
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	fab2 f282 	clz	r2, r2
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	40d3      	lsrs	r3, r2
 8004e70:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e72:	5cd3      	ldrb	r3, [r2, r3]
 8004e74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e80:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	e004      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	623b      	str	r3, [r7, #32]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ea4:	623b      	str	r3, [r7, #32]
      break;
 8004ea6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	372c      	adds	r7, #44	; 0x2c
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	007a1200 	.word	0x007a1200
 8004ec0:	08009068 	.word	0x08009068
 8004ec4:	08009078 	.word	0x08009078
 8004ec8:	003d0900 	.word	0x003d0900

08004ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000088 	.word	0x20000088

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004eea:	f7ff ffef 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eee:	4601      	mov	r1, r0
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ef8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004efc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	fa92 f2a2 	rbit	r2, r2
 8004f04:	603a      	str	r2, [r7, #0]
  return result;
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	fab2 f282 	clz	r2, r2
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	40d3      	lsrs	r3, r2
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
 8004f14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	08009060 	.word	0x08009060

08004f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f2e:	f7ff ffcd 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004f32:	4601      	mov	r1, r0
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	fa92 f2a2 	rbit	r2, r2
 8004f48:	603a      	str	r2, [r7, #0]
  return result;
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	fab2 f282 	clz	r2, r2
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	40d3      	lsrs	r3, r2
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f56:	5cd3      	ldrb	r3, [r2, r3]
 8004f58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	08009060 	.word	0x08009060

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b092      	sub	sp, #72	; 0x48
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80d4 	beq.w	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f90:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10e      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4a4a      	ldr	r2, [pc, #296]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	61d3      	str	r3, [r2, #28]
 8004fa8:	4b48      	ldr	r3, [pc, #288]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fba:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d118      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fc6:	4b42      	ldr	r3, [pc, #264]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a41      	ldr	r2, [pc, #260]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd2:	f7fe f9dd 	bl	8003390 <HAL_GetTick>
 8004fd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd8:	e008      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fe f9d9 	bl	8003390 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b64      	cmp	r3, #100	; 0x64
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e169      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fec:	4b38      	ldr	r3, [pc, #224]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff8:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8084 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005014:	429a      	cmp	r2, r3
 8005016:	d07c      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	fa93 f3a3 	rbit	r3, r3
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	461a      	mov	r2, r3
 8005042:	2301      	movs	r3, #1
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	fa93 f3a3 	rbit	r3, r3
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005056:	fab3 f383 	clz	r3, r3
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800506a:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d04b      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fe f989 	bl	8003390 <HAL_GetTick>
 800507e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	e00a      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fe f985 	bl	8003390 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e113      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005098:	2302      	movs	r3, #2
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
 80050a4:	2302      	movs	r3, #2
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	61fb      	str	r3, [r7, #28]
  return result;
 80050b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d108      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80050c6:	4b01      	ldr	r3, [pc, #4]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	e00d      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40007000 	.word	0x40007000
 80050d4:	10908100 	.word	0x10908100
 80050d8:	2302      	movs	r3, #2
 80050da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	4b78      	ldr	r3, [pc, #480]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2202      	movs	r2, #2
 80050ea:	613a      	str	r2, [r7, #16]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	fa92 f2a2 	rbit	r2, r2
 80050f2:	60fa      	str	r2, [r7, #12]
  return result;
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	fab2 f282 	clz	r2, r2
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	f002 021f 	and.w	r2, r2, #31
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f202 	lsl.w	r2, r1, r2
 800510c:	4013      	ands	r3, r2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0b7      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005112:	4b6d      	ldr	r3, [pc, #436]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	496a      	ldr	r1, [pc, #424]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005124:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512c:	4b66      	ldr	r3, [pc, #408]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	4a65      	ldr	r2, [pc, #404]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005136:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005144:	4b60      	ldr	r3, [pc, #384]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	495d      	ldr	r1, [pc, #372]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005162:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	4956      	ldr	r1, [pc, #344]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005180:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	494e      	ldr	r1, [pc, #312]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4947      	ldr	r1, [pc, #284]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	493f      	ldr	r1, [pc, #252]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051da:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f023 0220 	bic.w	r2, r3, #32
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4938      	ldr	r1, [pc, #224]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051f8:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	4930      	ldr	r1, [pc, #192]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005206:	4313      	orrs	r3, r2
 8005208:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005216:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	4929      	ldr	r1, [pc, #164]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	4921      	ldr	r1, [pc, #132]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	491a      	ldr	r1, [pc, #104]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005270:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	4912      	ldr	r1, [pc, #72]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	490b      	ldr	r1, [pc, #44]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3748      	adds	r7, #72	; 0x48
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000

080052cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e073      	b.n	80053ca <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7f5b      	ldrb	r3, [r3, #29]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fd fcbe 	bl	8002c74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b10      	cmp	r3, #16
 800530a:	d055      	beq.n	80053b8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	22ca      	movs	r2, #202	; 0xca
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2253      	movs	r2, #83	; 0x53
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa49 	bl	80057b4 <RTC_EnterInitMode>
 8005322:	4603      	mov	r3, r0
 8005324:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d12c      	bne.n	8005386 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800533a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68d2      	ldr	r2, [r2, #12]
 8005366:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	041a      	lsls	r2, r3, #16
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa50 	bl	8005822 <RTC_ExitInitMode>
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d110      	bne.n	80053ae <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	22ff      	movs	r2, #255	; 0xff
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24
 80053b6:	e001      	b.n	80053bc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053d2:	b590      	push	{r4, r7, lr}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	7f1b      	ldrb	r3, [r3, #28]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_RTC_SetTime+0x1c>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e087      	b.n	80054fe <HAL_RTC_SetTime+0x12c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2202      	movs	r2, #2
 80053f8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d126      	bne.n	800544e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fa27 	bl	800586c <RTC_ByteToBcd2>
 800541e:	4603      	mov	r3, r0
 8005420:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fa20 	bl	800586c <RTC_ByteToBcd2>
 800542c:	4603      	mov	r3, r0
 800542e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005430:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	789b      	ldrb	r3, [r3, #2]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fa18 	bl	800586c <RTC_ByteToBcd2>
 800543c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800543e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	78db      	ldrb	r3, [r3, #3]
 8005446:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e018      	b.n	8005480 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800546e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005474:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	78db      	ldrb	r3, [r3, #3]
 800547a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	22ca      	movs	r2, #202	; 0xca
 8005486:	625a      	str	r2, [r3, #36]	; 0x24
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2253      	movs	r2, #83	; 0x53
 800548e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f98f 	bl	80057b4 <RTC_EnterInitMode>
 8005496:	4603      	mov	r3, r0
 8005498:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d120      	bne.n	80054e2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6899      	ldr	r1, [r3, #8]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f9a2 	bl	8005822 <RTC_ExitInitMode>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	22ff      	movs	r2, #255	; 0xff
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]

  return status;
 80054fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}

08005506 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005538:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800553c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	0d9b      	lsrs	r3, r3, #22
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11a      	bne.n	80055b8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f98e 	bl	80058a8 <RTC_Bcd2ToByte>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f985 	bl	80058a8 <RTC_Bcd2ToByte>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	789b      	ldrb	r3, [r3, #2]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f97c 	bl	80058a8 <RTC_Bcd2ToByte>
 80055b0:	4603      	mov	r3, r0
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055c2:	b590      	push	{r4, r7, lr}
 80055c4:	b087      	sub	sp, #28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	7f1b      	ldrb	r3, [r3, #28]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_RTC_SetDate+0x1c>
 80055da:	2302      	movs	r3, #2
 80055dc:	e071      	b.n	80056c2 <HAL_RTC_SetDate+0x100>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2202      	movs	r2, #2
 80055e8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10e      	bne.n	800560e <HAL_RTC_SetDate+0x4c>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	f023 0310 	bic.w	r3, r3, #16
 8005604:	b2db      	uxtb	r3, r3
 8005606:	330a      	adds	r3, #10
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d11c      	bne.n	800564e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f927 	bl	800586c <RTC_ByteToBcd2>
 800561e:	4603      	mov	r3, r0
 8005620:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f920 	bl	800586c <RTC_ByteToBcd2>
 800562c:	4603      	mov	r3, r0
 800562e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005630:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	789b      	ldrb	r3, [r3, #2]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f918 	bl	800586c <RTC_ByteToBcd2>
 800563c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800563e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e00e      	b.n	800566c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800565a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005660:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	22ca      	movs	r2, #202	; 0xca
 8005672:	625a      	str	r2, [r3, #36]	; 0x24
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2253      	movs	r2, #83	; 0x53
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f899 	bl	80057b4 <RTC_EnterInitMode>
 8005682:	4603      	mov	r3, r0
 8005684:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10c      	bne.n	80056a6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005696:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800569a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f8c0 	bl	8005822 <RTC_ExitInitMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]

  return status;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd90      	pop	{r4, r7, pc}

080056ca <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056e8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	0b5b      	lsrs	r3, r3, #13
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d11a      	bne.n	800575e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f8bb 	bl	80058a8 <RTC_Bcd2ToByte>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f8b2 	bl	80058a8 <RTC_Bcd2ToByte>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	789b      	ldrb	r3, [r3, #2]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f8a9 	bl	80058a8 <RTC_Bcd2ToByte>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <HAL_RTC_WaitForSynchro+0x48>)
 800577a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800577c:	f7fd fe08 	bl	8003390 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005782:	e009      	b.n	8005798 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005784:	f7fd fe04 	bl	8003390 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005792:	d901      	bls.n	8005798 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e007      	b.n	80057a8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ee      	beq.n	8005784 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	0001ff5f 	.word	0x0001ff5f

080057b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d122      	bne.n	8005818 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057e2:	f7fd fdd5 	bl	8003390 <HAL_GetTick>
 80057e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057e8:	e00c      	b.n	8005804 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057ea:	f7fd fdd1 	bl	8003390 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f8:	d904      	bls.n	8005804 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2204      	movs	r2, #4
 80057fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <RTC_EnterInitMode+0x64>
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d1e8      	bne.n	80057ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800583c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff8b 	bl	8005768 <HAL_RTC_WaitForSynchro>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2204      	movs	r2, #4
 800585c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800587a:	e005      	b.n	8005888 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	3b0a      	subs	r3, #10
 8005886:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	2b09      	cmp	r3, #9
 800588c:	d8f6      	bhi.n	800587c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	b2da      	uxtb	r2, r3
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	4313      	orrs	r3, r2
 800589a:	b2db      	uxtb	r3, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	b2db      	uxtb	r3, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e049      	b.n	800598a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fd f9d8 	bl	8002cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 fdbe 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04a      	b.n	8005a42 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <HAL_TIM_Base_Start_IT+0xbc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x6c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d013      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x6c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_TIM_Base_Start_IT+0xc0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x6c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x6c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x6c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d115      	bne.n	8005a2c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d015      	beq.n	8005a3e <HAL_TIM_Base_Start_IT+0xaa>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a18:	d011      	beq.n	8005a3e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	e008      	b.n	8005a3e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e000      	b.n	8005a40 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	00010007 	.word	0x00010007

08005a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e049      	b.n	8005b0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f841 	bl	8005b16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f000 fcfc 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <HAL_TIM_PWM_Start+0x24>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e03c      	b.n	8005bca <HAL_TIM_PWM_Start+0x9e>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d109      	bne.n	8005b6a <HAL_TIM_PWM_Start+0x3e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	bf14      	ite	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	2300      	moveq	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	e02f      	b.n	8005bca <HAL_TIM_PWM_Start+0x9e>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d109      	bne.n	8005b84 <HAL_TIM_PWM_Start+0x58>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e022      	b.n	8005bca <HAL_TIM_PWM_Start+0x9e>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d109      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x72>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	bf14      	ite	ne
 8005b96:	2301      	movne	r3, #1
 8005b98:	2300      	moveq	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	e015      	b.n	8005bca <HAL_TIM_PWM_Start+0x9e>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d109      	bne.n	8005bb8 <HAL_TIM_PWM_Start+0x8c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e008      	b.n	8005bca <HAL_TIM_PWM_Start+0x9e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e097      	b.n	8005d02 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_PWM_Start+0xb6>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be0:	e023      	b.n	8005c2a <HAL_TIM_PWM_Start+0xfe>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0xc6>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf0:	e01b      	b.n	8005c2a <HAL_TIM_PWM_Start+0xfe>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_PWM_Start+0xd6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c00:	e013      	b.n	8005c2a <HAL_TIM_PWM_Start+0xfe>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b0c      	cmp	r3, #12
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Start+0xe6>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c10:	e00b      	b.n	8005c2a <HAL_TIM_PWM_Start+0xfe>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_PWM_Start+0xf6>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c20:	e003      	b.n	8005c2a <HAL_TIM_PWM_Start+0xfe>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f836 	bl	8006ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a33      	ldr	r2, [pc, #204]	; (8005d0c <HAL_TIM_PWM_Start+0x1e0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <HAL_TIM_PWM_Start+0x13e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a32      	ldr	r2, [pc, #200]	; (8005d10 <HAL_TIM_PWM_Start+0x1e4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00e      	beq.n	8005c6a <HAL_TIM_PWM_Start+0x13e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_TIM_PWM_Start+0x1e8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_TIM_PWM_Start+0x13e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2f      	ldr	r2, [pc, #188]	; (8005d18 <HAL_TIM_PWM_Start+0x1ec>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIM_PWM_Start+0x13e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2d      	ldr	r2, [pc, #180]	; (8005d1c <HAL_TIM_PWM_Start+0x1f0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x142>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_TIM_PWM_Start+0x144>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <HAL_TIM_PWM_Start+0x1e0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x194>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d013      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x194>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a20      	ldr	r2, [pc, #128]	; (8005d20 <HAL_TIM_PWM_Start+0x1f4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x194>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <HAL_TIM_PWM_Start+0x1f8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x194>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <HAL_TIM_PWM_Start+0x1e4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x194>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <HAL_TIM_PWM_Start+0x1e8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d115      	bne.n	8005cec <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <HAL_TIM_PWM_Start+0x1fc>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b06      	cmp	r3, #6
 8005cd0:	d015      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1d2>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd8:	d011      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cea:	e008      	b.n	8005cfe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e000      	b.n	8005d00 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40012c00 	.word	0x40012c00
 8005d10:	40013400 	.word	0x40013400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	00010007 	.word	0x00010007

08005d2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 ffb0 	bl	8006ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <HAL_TIM_PWM_Stop+0x118>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIM_PWM_Stop+0x4a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <HAL_TIM_PWM_Stop+0x11c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIM_PWM_Stop+0x4a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <HAL_TIM_PWM_Stop+0x120>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIM_PWM_Stop+0x4a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_TIM_PWM_Stop+0x124>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIM_PWM_Stop+0x4a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a38      	ldr	r2, [pc, #224]	; (8005e54 <HAL_TIM_PWM_Stop+0x128>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_PWM_Stop+0x4e>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_PWM_Stop+0x50>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <HAL_TIM_PWM_Stop+0x84>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	f240 4344 	movw	r3, #1092	; 0x444
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <HAL_TIM_PWM_Stop+0x84>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <HAL_TIM_PWM_Stop+0xb4>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	f240 4344 	movw	r3, #1092	; 0x444
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_PWM_Stop+0xb4>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <HAL_TIM_PWM_Stop+0xc4>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dee:	e023      	b.n	8005e38 <HAL_TIM_PWM_Stop+0x10c>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d104      	bne.n	8005e00 <HAL_TIM_PWM_Stop+0xd4>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dfe:	e01b      	b.n	8005e38 <HAL_TIM_PWM_Stop+0x10c>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d104      	bne.n	8005e10 <HAL_TIM_PWM_Stop+0xe4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e0e:	e013      	b.n	8005e38 <HAL_TIM_PWM_Stop+0x10c>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	d104      	bne.n	8005e20 <HAL_TIM_PWM_Stop+0xf4>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e1e:	e00b      	b.n	8005e38 <HAL_TIM_PWM_Stop+0x10c>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b10      	cmp	r3, #16
 8005e24:	d104      	bne.n	8005e30 <HAL_TIM_PWM_Stop+0x104>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e2e:	e003      	b.n	8005e38 <HAL_TIM_PWM_Stop+0x10c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	40014800 	.word	0x40014800

08005e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d122      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0202 	mvn.w	r2, #2
 8005e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fae3 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fad5 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fae6 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d122      	bne.n	8005f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0204 	mvn.w	r2, #4
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fab9 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 faab 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fabc 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d122      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d11b      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0208 	mvn.w	r2, #8
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2204      	movs	r2, #4
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa8f 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa81 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa92 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d122      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d11b      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0210 	mvn.w	r2, #16
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2208      	movs	r2, #8
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa65 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa57 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa68 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d10e      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d107      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0201 	mvn.w	r2, #1
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fb f8a4 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d10e      	bne.n	8006008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff4:	2b80      	cmp	r3, #128	; 0x80
 8005ff6:	d107      	bne.n	8006008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fefe 	bl	8006e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006016:	d10e      	bne.n	8006036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fef1 	bl	8006e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d10e      	bne.n	8006062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d107      	bne.n	8006062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa16 	bl	800648e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b20      	cmp	r3, #32
 800606e:	d10e      	bne.n	800608e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b20      	cmp	r3, #32
 800607c:	d107      	bne.n	800608e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f06f 0220 	mvn.w	r2, #32
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 feb1 	bl	8006df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e0ff      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b14      	cmp	r3, #20
 80060c2:	f200 80f0 	bhi.w	80062a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	08006121 	.word	0x08006121
 80060d0:	080062a7 	.word	0x080062a7
 80060d4:	080062a7 	.word	0x080062a7
 80060d8:	080062a7 	.word	0x080062a7
 80060dc:	08006161 	.word	0x08006161
 80060e0:	080062a7 	.word	0x080062a7
 80060e4:	080062a7 	.word	0x080062a7
 80060e8:	080062a7 	.word	0x080062a7
 80060ec:	080061a3 	.word	0x080061a3
 80060f0:	080062a7 	.word	0x080062a7
 80060f4:	080062a7 	.word	0x080062a7
 80060f8:	080062a7 	.word	0x080062a7
 80060fc:	080061e3 	.word	0x080061e3
 8006100:	080062a7 	.word	0x080062a7
 8006104:	080062a7 	.word	0x080062a7
 8006108:	080062a7 	.word	0x080062a7
 800610c:	08006225 	.word	0x08006225
 8006110:	080062a7 	.word	0x080062a7
 8006114:	080062a7 	.word	0x080062a7
 8006118:	080062a7 	.word	0x080062a7
 800611c:	08006265 	.word	0x08006265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fa4c 	bl	80065c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0204 	bic.w	r2, r2, #4
 800614a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6999      	ldr	r1, [r3, #24]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]
      break;
 800615e:	e0a5      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fabc 	bl	80066e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	021a      	lsls	r2, r3, #8
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	619a      	str	r2, [r3, #24]
      break;
 80061a0:	e084      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fb25 	bl	80067f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0208 	orr.w	r2, r2, #8
 80061bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0204 	bic.w	r2, r2, #4
 80061cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69d9      	ldr	r1, [r3, #28]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	61da      	str	r2, [r3, #28]
      break;
 80061e0:	e064      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fb8d 	bl	8006908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	021a      	lsls	r2, r3, #8
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	61da      	str	r2, [r3, #28]
      break;
 8006222:	e043      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fbd6 	bl	80069dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006262:	e023      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fc1a 	bl	8006aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062a4:	e002      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
      break;
 80062aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop

080062c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0b6      	b.n	800644a <HAL_TIM_ConfigClockSource+0x18a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006318:	d03e      	beq.n	8006398 <HAL_TIM_ConfigClockSource+0xd8>
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	f200 8087 	bhi.w	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006326:	f000 8086 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x176>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632e:	d87f      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006330:	2b70      	cmp	r3, #112	; 0x70
 8006332:	d01a      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xaa>
 8006334:	2b70      	cmp	r3, #112	; 0x70
 8006336:	d87b      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006338:	2b60      	cmp	r3, #96	; 0x60
 800633a:	d050      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x11e>
 800633c:	2b60      	cmp	r3, #96	; 0x60
 800633e:	d877      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006340:	2b50      	cmp	r3, #80	; 0x50
 8006342:	d03c      	beq.n	80063be <HAL_TIM_ConfigClockSource+0xfe>
 8006344:	2b50      	cmp	r3, #80	; 0x50
 8006346:	d873      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d058      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x13e>
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d86f      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006350:	2b30      	cmp	r3, #48	; 0x30
 8006352:	d064      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 8006354:	2b30      	cmp	r3, #48	; 0x30
 8006356:	d86b      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d060      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d867      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05c      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 8006364:	2b10      	cmp	r3, #16
 8006366:	d05a      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 8006368:	e062      	b.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6899      	ldr	r1, [r3, #8]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f000 fc73 	bl	8006c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800638c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	609a      	str	r2, [r3, #8]
      break;
 8006396:	e04f      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6899      	ldr	r1, [r3, #8]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f000 fc5c 	bl	8006c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ba:	609a      	str	r2, [r3, #8]
      break;
 80063bc:	e03c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 fbd0 	bl	8006b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2150      	movs	r1, #80	; 0x50
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fc29 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80063dc:	e02c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 fbef 	bl	8006bce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2160      	movs	r1, #96	; 0x60
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fc19 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80063fc:	e01c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	f000 fbb0 	bl	8006b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2140      	movs	r1, #64	; 0x40
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc09 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800641c:	e00c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f000 fc00 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800642e:	e003      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	e000      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3c      	ldr	r2, [pc, #240]	; (80065a8 <TIM_Base_SetConfig+0x104>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00f      	beq.n	80064dc <TIM_Base_SetConfig+0x38>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d00b      	beq.n	80064dc <TIM_Base_SetConfig+0x38>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a39      	ldr	r2, [pc, #228]	; (80065ac <TIM_Base_SetConfig+0x108>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0x38>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a38      	ldr	r2, [pc, #224]	; (80065b0 <TIM_Base_SetConfig+0x10c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x38>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a37      	ldr	r2, [pc, #220]	; (80065b4 <TIM_Base_SetConfig+0x110>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2d      	ldr	r2, [pc, #180]	; (80065a8 <TIM_Base_SetConfig+0x104>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01b      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fc:	d017      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2a      	ldr	r2, [pc, #168]	; (80065ac <TIM_Base_SetConfig+0x108>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a29      	ldr	r2, [pc, #164]	; (80065b0 <TIM_Base_SetConfig+0x10c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a28      	ldr	r2, [pc, #160]	; (80065b4 <TIM_Base_SetConfig+0x110>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a27      	ldr	r2, [pc, #156]	; (80065b8 <TIM_Base_SetConfig+0x114>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a26      	ldr	r2, [pc, #152]	; (80065bc <TIM_Base_SetConfig+0x118>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <TIM_Base_SetConfig+0x11c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d108      	bne.n	8006540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <TIM_Base_SetConfig+0x104>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <TIM_Base_SetConfig+0xe8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <TIM_Base_SetConfig+0x110>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_Base_SetConfig+0xe8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <TIM_Base_SetConfig+0x114>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_Base_SetConfig+0xe8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a0f      	ldr	r2, [pc, #60]	; (80065bc <TIM_Base_SetConfig+0x118>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0xe8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <TIM_Base_SetConfig+0x11c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d103      	bne.n	8006594 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	615a      	str	r2, [r3, #20]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f023 0201 	bic.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 0302 	bic.w	r3, r3, #2
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <TIM_OC1_SetConfig+0x10c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00f      	beq.n	8006644 <TIM_OC1_SetConfig+0x80>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a2b      	ldr	r2, [pc, #172]	; (80066d4 <TIM_OC1_SetConfig+0x110>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00b      	beq.n	8006644 <TIM_OC1_SetConfig+0x80>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <TIM_OC1_SetConfig+0x114>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_OC1_SetConfig+0x80>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a29      	ldr	r2, [pc, #164]	; (80066dc <TIM_OC1_SetConfig+0x118>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC1_SetConfig+0x80>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <TIM_OC1_SetConfig+0x11c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d10c      	bne.n	800665e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0308 	bic.w	r3, r3, #8
 800664a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 0304 	bic.w	r3, r3, #4
 800665c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <TIM_OC1_SetConfig+0x10c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00f      	beq.n	8006686 <TIM_OC1_SetConfig+0xc2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <TIM_OC1_SetConfig+0x110>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00b      	beq.n	8006686 <TIM_OC1_SetConfig+0xc2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <TIM_OC1_SetConfig+0x114>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d007      	beq.n	8006686 <TIM_OC1_SetConfig+0xc2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <TIM_OC1_SetConfig+0x118>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC1_SetConfig+0xc2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <TIM_OC1_SetConfig+0x11c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d111      	bne.n	80066aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0210 	bic.w	r2, r3, #16
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0320 	bic.w	r3, r3, #32
 8006732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a28      	ldr	r2, [pc, #160]	; (80067e4 <TIM_OC2_SetConfig+0x100>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC2_SetConfig+0x6c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a27      	ldr	r2, [pc, #156]	; (80067e8 <TIM_OC2_SetConfig+0x104>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10d      	bne.n	800676c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <TIM_OC2_SetConfig+0x100>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00f      	beq.n	8006794 <TIM_OC2_SetConfig+0xb0>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <TIM_OC2_SetConfig+0x104>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00b      	beq.n	8006794 <TIM_OC2_SetConfig+0xb0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <TIM_OC2_SetConfig+0x108>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d007      	beq.n	8006794 <TIM_OC2_SetConfig+0xb0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <TIM_OC2_SetConfig+0x10c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_OC2_SetConfig+0xb0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <TIM_OC2_SetConfig+0x110>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d113      	bne.n	80067bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40013400 	.word	0x40013400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800

080067f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a27      	ldr	r2, [pc, #156]	; (80068f4 <TIM_OC3_SetConfig+0xfc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC3_SetConfig+0x6a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <TIM_OC3_SetConfig+0x100>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d10d      	bne.n	800687e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800687c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <TIM_OC3_SetConfig+0xfc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00f      	beq.n	80068a6 <TIM_OC3_SetConfig+0xae>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <TIM_OC3_SetConfig+0x100>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00b      	beq.n	80068a6 <TIM_OC3_SetConfig+0xae>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <TIM_OC3_SetConfig+0x104>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <TIM_OC3_SetConfig+0xae>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a19      	ldr	r2, [pc, #100]	; (8006900 <TIM_OC3_SetConfig+0x108>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC3_SetConfig+0xae>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a18      	ldr	r2, [pc, #96]	; (8006904 <TIM_OC3_SetConfig+0x10c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d113      	bne.n	80068ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40013400 	.word	0x40013400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800

08006908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	031b      	lsls	r3, r3, #12
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <TIM_OC4_SetConfig+0xc0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00f      	beq.n	800698c <TIM_OC4_SetConfig+0x84>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a17      	ldr	r2, [pc, #92]	; (80069cc <TIM_OC4_SetConfig+0xc4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00b      	beq.n	800698c <TIM_OC4_SetConfig+0x84>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <TIM_OC4_SetConfig+0xc8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_OC4_SetConfig+0x84>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <TIM_OC4_SetConfig+0xcc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_OC4_SetConfig+0x84>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <TIM_OC4_SetConfig+0xd0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d109      	bne.n	80069a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	019b      	lsls	r3, r3, #6
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40013400 	.word	0x40013400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800

080069dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <TIM_OC5_SetConfig+0xb4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_OC5_SetConfig+0x7a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <TIM_OC5_SetConfig+0xb8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00b      	beq.n	8006a56 <TIM_OC5_SetConfig+0x7a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <TIM_OC5_SetConfig+0xbc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_OC5_SetConfig+0x7a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <TIM_OC5_SetConfig+0xc0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_OC5_SetConfig+0x7a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <TIM_OC5_SetConfig+0xc4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d109      	bne.n	8006a6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40013400 	.word	0x40013400
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800

08006aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <TIM_OC6_SetConfig+0xb8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00f      	beq.n	8006b20 <TIM_OC6_SetConfig+0x7c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <TIM_OC6_SetConfig+0xbc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00b      	beq.n	8006b20 <TIM_OC6_SetConfig+0x7c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <TIM_OC6_SetConfig+0xc0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d007      	beq.n	8006b20 <TIM_OC6_SetConfig+0x7c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <TIM_OC6_SetConfig+0xc4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC6_SetConfig+0x7c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <TIM_OC6_SetConfig+0xc8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d109      	bne.n	8006b34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	029b      	lsls	r3, r3, #10
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40014000 	.word	0x40014000
 8006b68:	40014400 	.word	0x40014400
 8006b6c:	40014800 	.word	0x40014800

08006b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 030a 	bic.w	r3, r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b087      	sub	sp, #28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0210 	bic.w	r2, r3, #16
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	031b      	lsls	r3, r3, #12
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f043 0307 	orr.w	r3, r3, #7
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	021a      	lsls	r2, r3, #8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e063      	b.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a2b      	ldr	r2, [pc, #172]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d108      	bne.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7a:	d013      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a18      	ldr	r2, [pc, #96]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a13      	ldr	r2, [pc, #76]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10c      	bne.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40013400 	.word	0x40013400
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40000800 	.word	0x40000800
 8006dec:	40014000 	.word	0x40014000

08006df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e040      	b.n	8006ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fb ffba 	bl	8002dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2224      	movs	r2, #36	; 0x24
 8006e58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fbf6 	bl	800765c <UART_SetConfig>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e022      	b.n	8006ec0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fdbe 	bl	8007a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fe45 	bl	8007b48 <UART_CheckIdleState>
 8006ebe:	4603      	mov	r3, r0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d178      	bne.n	8006fd2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_UART_Transmit+0x24>
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e071      	b.n	8006fd4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2221      	movs	r2, #33	; 0x21
 8006efc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006efe:	f7fc fa47 	bl	8003390 <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d108      	bne.n	8006f30 <HAL_UART_Transmit+0x68>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e003      	b.n	8006f38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f38:	e030      	b.n	8006f9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2180      	movs	r1, #128	; 0x80
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fea7 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2220      	movs	r2, #32
 8006f54:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e03c      	b.n	8006fd4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10b      	bne.n	8006f78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	3302      	adds	r3, #2
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e008      	b.n	8006f8a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	b292      	uxth	r2, r2
 8006f82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	3301      	adds	r3, #1
 8006f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1c8      	bne.n	8006f3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fe70 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e005      	b.n	8006fd4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e000      	b.n	8006fd4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006fd2:	2302      	movs	r3, #2
  }
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d132      	bne.n	800705a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_UART_Receive_IT+0x24>
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e02b      	b.n	800705c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d018      	beq.n	800704a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	613b      	str	r3, [r7, #16]
   return(result);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	623b      	str	r3, [r7, #32]
 8007038:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	69f9      	ldr	r1, [r7, #28]
 800703c:	6a3a      	ldr	r2, [r7, #32]
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	61bb      	str	r3, [r7, #24]
   return(result);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	461a      	mov	r2, r3
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fe89 	bl	8007d68 <UART_Start_Receive_IT>
 8007056:	4603      	mov	r3, r0
 8007058:	e000      	b.n	800705c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3728      	adds	r7, #40	; 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b0ba      	sub	sp, #232	; 0xe8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800708a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800708e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007092:	4013      	ands	r3, r2
 8007094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d115      	bne.n	80070cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00f      	beq.n	80070cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 82ab 	beq.w	8007618 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
      }
      return;
 80070ca:	e2a5      	b.n	8007618 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8117 	beq.w	8007304 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070e6:	4b85      	ldr	r3, [pc, #532]	; (80072fc <HAL_UART_IRQHandler+0x298>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 810a 	beq.w	8007304 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d011      	beq.n	8007120 <HAL_UART_IRQHandler+0xbc>
 80070fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2201      	movs	r2, #1
 800710e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007116:	f043 0201 	orr.w	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d011      	beq.n	8007150 <HAL_UART_IRQHandler+0xec>
 800712c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2202      	movs	r2, #2
 800713e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007146:	f043 0204 	orr.w	r2, r3, #4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d011      	beq.n	8007180 <HAL_UART_IRQHandler+0x11c>
 800715c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2204      	movs	r2, #4
 800716e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007176:	f043 0202 	orr.w	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d017      	beq.n	80071bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800719c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2208      	movs	r2, #8
 80071aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b2:	f043 0208 	orr.w	r2, r3, #8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d012      	beq.n	80071ee <HAL_UART_IRQHandler+0x18a>
 80071c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00c      	beq.n	80071ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e4:	f043 0220 	orr.w	r2, r3, #32
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8211 	beq.w	800761c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d005      	beq.n	8007246 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800723a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800723e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007242:	2b00      	cmp	r3, #0
 8007244:	d04f      	beq.n	80072e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fe42 	bl	8007ed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d141      	bne.n	80072de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3308      	adds	r3, #8
 8007282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800728a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800729e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1d9      	bne.n	800725a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d013      	beq.n	80072d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <HAL_UART_IRQHandler+0x29c>)
 80072b4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fc f9e2 	bl	8003684 <HAL_DMA_Abort_IT>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d017      	beq.n	80072f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e00f      	b.n	80072f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9aa 	bl	8007630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e00b      	b.n	80072f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f9a6 	bl	8007630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	e007      	b.n	80072f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9a2 	bl	8007630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80072f4:	e192      	b.n	800761c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f6:	bf00      	nop
    return;
 80072f8:	e190      	b.n	800761c <HAL_UART_IRQHandler+0x5b8>
 80072fa:	bf00      	nop
 80072fc:	04000120 	.word	0x04000120
 8007300:	08007f99 	.word	0x08007f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007308:	2b01      	cmp	r3, #1
 800730a:	f040 814b 	bne.w	80075a4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 0310 	and.w	r3, r3, #16
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8144 	beq.w	80075a4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 813d 	beq.w	80075a4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2210      	movs	r2, #16
 8007330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	f040 80b5 	bne.w	80074ac <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800734e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8164 	beq.w	8007620 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800735e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007362:	429a      	cmp	r2, r3
 8007364:	f080 815c 	bcs.w	8007620 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800736e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b20      	cmp	r3, #32
 800737a:	f000 8086 	beq.w	800748a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800739a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1da      	bne.n	800737e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e1      	bne.n	80073c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007428:	66fa      	str	r2, [r7, #108]	; 0x6c
 800742a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800742e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e3      	bne.n	8007404 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800746c:	65bb      	str	r3, [r7, #88]	; 0x58
 800746e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800747a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e4      	bne.n	800744a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007484:	4618      	mov	r0, r3
 8007486:	f7fc f8c4 	bl	8003612 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f8cd 	bl	8007644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074aa:	e0b9      	b.n	8007620 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80ab 	beq.w	8007624 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80074ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 80a6 	beq.w	8007624 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074fa:	647b      	str	r3, [r7, #68]	; 0x44
 80074fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e4      	bne.n	80074d8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	623b      	str	r3, [r7, #32]
   return(result);
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3308      	adds	r3, #8
 800752e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007532:	633a      	str	r2, [r7, #48]	; 0x30
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e3      	bne.n	800750e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60fb      	str	r3, [r7, #12]
   return(result);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0310 	bic.w	r3, r3, #16
 800756e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	69b9      	ldr	r1, [r7, #24]
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	617b      	str	r3, [r7, #20]
   return(result);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e4      	bne.n	800755a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f851 	bl	8007644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075a2:	e03f      	b.n	8007624 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <HAL_UART_IRQHandler+0x56a>
 80075b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fece 	bl	8008368 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075cc:	e02d      	b.n	800762a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01c      	beq.n	8007628 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
    }
    return;
 80075f6:	e017      	b.n	8007628 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d012      	beq.n	800762a <HAL_UART_IRQHandler+0x5c6>
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00c      	beq.n	800762a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fcd7 	bl	8007fc4 <UART_EndTransmit_IT>
    return;
 8007616:	e008      	b.n	800762a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007618:	bf00      	nop
 800761a:	e006      	b.n	800762a <HAL_UART_IRQHandler+0x5c6>
    return;
 800761c:	bf00      	nop
 800761e:	e004      	b.n	800762a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007620:	bf00      	nop
 8007622:	e002      	b.n	800762a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007624:	bf00      	nop
 8007626:	e000      	b.n	800762a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007628:	bf00      	nop
  }

}
 800762a:	37e8      	adds	r7, #232	; 0xe8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800768a:	f023 030c 	bic.w	r3, r3, #12
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	430b      	orrs	r3, r1
 8007696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4aa7      	ldr	r2, [pc, #668]	; (8007974 <UART_SetConfig+0x318>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d120      	bne.n	800771e <UART_SetConfig+0xc2>
 80076dc:	4ba6      	ldr	r3, [pc, #664]	; (8007978 <UART_SetConfig+0x31c>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d817      	bhi.n	8007718 <UART_SetConfig+0xbc>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x94>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007701 	.word	0x08007701
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	08007713 	.word	0x08007713
 80076fc:	08007707 	.word	0x08007707
 8007700:	2301      	movs	r3, #1
 8007702:	77fb      	strb	r3, [r7, #31]
 8007704:	e0b5      	b.n	8007872 <UART_SetConfig+0x216>
 8007706:	2302      	movs	r3, #2
 8007708:	77fb      	strb	r3, [r7, #31]
 800770a:	e0b2      	b.n	8007872 <UART_SetConfig+0x216>
 800770c:	2304      	movs	r3, #4
 800770e:	77fb      	strb	r3, [r7, #31]
 8007710:	e0af      	b.n	8007872 <UART_SetConfig+0x216>
 8007712:	2308      	movs	r3, #8
 8007714:	77fb      	strb	r3, [r7, #31]
 8007716:	e0ac      	b.n	8007872 <UART_SetConfig+0x216>
 8007718:	2310      	movs	r3, #16
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e0a9      	b.n	8007872 <UART_SetConfig+0x216>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a96      	ldr	r2, [pc, #600]	; (800797c <UART_SetConfig+0x320>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d124      	bne.n	8007772 <UART_SetConfig+0x116>
 8007728:	4b93      	ldr	r3, [pc, #588]	; (8007978 <UART_SetConfig+0x31c>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007730:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007734:	d011      	beq.n	800775a <UART_SetConfig+0xfe>
 8007736:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800773a:	d817      	bhi.n	800776c <UART_SetConfig+0x110>
 800773c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007740:	d011      	beq.n	8007766 <UART_SetConfig+0x10a>
 8007742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007746:	d811      	bhi.n	800776c <UART_SetConfig+0x110>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <UART_SetConfig+0xf8>
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007750:	d006      	beq.n	8007760 <UART_SetConfig+0x104>
 8007752:	e00b      	b.n	800776c <UART_SetConfig+0x110>
 8007754:	2300      	movs	r3, #0
 8007756:	77fb      	strb	r3, [r7, #31]
 8007758:	e08b      	b.n	8007872 <UART_SetConfig+0x216>
 800775a:	2302      	movs	r3, #2
 800775c:	77fb      	strb	r3, [r7, #31]
 800775e:	e088      	b.n	8007872 <UART_SetConfig+0x216>
 8007760:	2304      	movs	r3, #4
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	e085      	b.n	8007872 <UART_SetConfig+0x216>
 8007766:	2308      	movs	r3, #8
 8007768:	77fb      	strb	r3, [r7, #31]
 800776a:	e082      	b.n	8007872 <UART_SetConfig+0x216>
 800776c:	2310      	movs	r3, #16
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e07f      	b.n	8007872 <UART_SetConfig+0x216>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a82      	ldr	r2, [pc, #520]	; (8007980 <UART_SetConfig+0x324>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d124      	bne.n	80077c6 <UART_SetConfig+0x16a>
 800777c:	4b7e      	ldr	r3, [pc, #504]	; (8007978 <UART_SetConfig+0x31c>)
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007784:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007788:	d011      	beq.n	80077ae <UART_SetConfig+0x152>
 800778a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800778e:	d817      	bhi.n	80077c0 <UART_SetConfig+0x164>
 8007790:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007794:	d011      	beq.n	80077ba <UART_SetConfig+0x15e>
 8007796:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800779a:	d811      	bhi.n	80077c0 <UART_SetConfig+0x164>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <UART_SetConfig+0x14c>
 80077a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077a4:	d006      	beq.n	80077b4 <UART_SetConfig+0x158>
 80077a6:	e00b      	b.n	80077c0 <UART_SetConfig+0x164>
 80077a8:	2300      	movs	r3, #0
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e061      	b.n	8007872 <UART_SetConfig+0x216>
 80077ae:	2302      	movs	r3, #2
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e05e      	b.n	8007872 <UART_SetConfig+0x216>
 80077b4:	2304      	movs	r3, #4
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e05b      	b.n	8007872 <UART_SetConfig+0x216>
 80077ba:	2308      	movs	r3, #8
 80077bc:	77fb      	strb	r3, [r7, #31]
 80077be:	e058      	b.n	8007872 <UART_SetConfig+0x216>
 80077c0:	2310      	movs	r3, #16
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e055      	b.n	8007872 <UART_SetConfig+0x216>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a6e      	ldr	r2, [pc, #440]	; (8007984 <UART_SetConfig+0x328>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d124      	bne.n	800781a <UART_SetConfig+0x1be>
 80077d0:	4b69      	ldr	r3, [pc, #420]	; (8007978 <UART_SetConfig+0x31c>)
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077dc:	d011      	beq.n	8007802 <UART_SetConfig+0x1a6>
 80077de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e2:	d817      	bhi.n	8007814 <UART_SetConfig+0x1b8>
 80077e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e8:	d011      	beq.n	800780e <UART_SetConfig+0x1b2>
 80077ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ee:	d811      	bhi.n	8007814 <UART_SetConfig+0x1b8>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <UART_SetConfig+0x1a0>
 80077f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f8:	d006      	beq.n	8007808 <UART_SetConfig+0x1ac>
 80077fa:	e00b      	b.n	8007814 <UART_SetConfig+0x1b8>
 80077fc:	2300      	movs	r3, #0
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e037      	b.n	8007872 <UART_SetConfig+0x216>
 8007802:	2302      	movs	r3, #2
 8007804:	77fb      	strb	r3, [r7, #31]
 8007806:	e034      	b.n	8007872 <UART_SetConfig+0x216>
 8007808:	2304      	movs	r3, #4
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e031      	b.n	8007872 <UART_SetConfig+0x216>
 800780e:	2308      	movs	r3, #8
 8007810:	77fb      	strb	r3, [r7, #31]
 8007812:	e02e      	b.n	8007872 <UART_SetConfig+0x216>
 8007814:	2310      	movs	r3, #16
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e02b      	b.n	8007872 <UART_SetConfig+0x216>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a5a      	ldr	r2, [pc, #360]	; (8007988 <UART_SetConfig+0x32c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d124      	bne.n	800786e <UART_SetConfig+0x212>
 8007824:	4b54      	ldr	r3, [pc, #336]	; (8007978 <UART_SetConfig+0x31c>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800782c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007830:	d011      	beq.n	8007856 <UART_SetConfig+0x1fa>
 8007832:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007836:	d817      	bhi.n	8007868 <UART_SetConfig+0x20c>
 8007838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800783c:	d011      	beq.n	8007862 <UART_SetConfig+0x206>
 800783e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007842:	d811      	bhi.n	8007868 <UART_SetConfig+0x20c>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <UART_SetConfig+0x1f4>
 8007848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784c:	d006      	beq.n	800785c <UART_SetConfig+0x200>
 800784e:	e00b      	b.n	8007868 <UART_SetConfig+0x20c>
 8007850:	2300      	movs	r3, #0
 8007852:	77fb      	strb	r3, [r7, #31]
 8007854:	e00d      	b.n	8007872 <UART_SetConfig+0x216>
 8007856:	2302      	movs	r3, #2
 8007858:	77fb      	strb	r3, [r7, #31]
 800785a:	e00a      	b.n	8007872 <UART_SetConfig+0x216>
 800785c:	2304      	movs	r3, #4
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e007      	b.n	8007872 <UART_SetConfig+0x216>
 8007862:	2308      	movs	r3, #8
 8007864:	77fb      	strb	r3, [r7, #31]
 8007866:	e004      	b.n	8007872 <UART_SetConfig+0x216>
 8007868:	2310      	movs	r3, #16
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e001      	b.n	8007872 <UART_SetConfig+0x216>
 800786e:	2310      	movs	r3, #16
 8007870:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800787a:	d15b      	bne.n	8007934 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800787c:	7ffb      	ldrb	r3, [r7, #31]
 800787e:	2b08      	cmp	r3, #8
 8007880:	d827      	bhi.n	80078d2 <UART_SetConfig+0x276>
 8007882:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x22c>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078bd 	.word	0x080078bd
 8007894:	080078d3 	.word	0x080078d3
 8007898:	080078c3 	.word	0x080078c3
 800789c:	080078d3 	.word	0x080078d3
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078d3 	.word	0x080078d3
 80078a8:	080078cb 	.word	0x080078cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7fd fb1a 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80078b0:	61b8      	str	r0, [r7, #24]
        break;
 80078b2:	e013      	b.n	80078dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fd fb38 	bl	8004f28 <HAL_RCC_GetPCLK2Freq>
 80078b8:	61b8      	str	r0, [r7, #24]
        break;
 80078ba:	e00f      	b.n	80078dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078bc:	4b33      	ldr	r3, [pc, #204]	; (800798c <UART_SetConfig+0x330>)
 80078be:	61bb      	str	r3, [r7, #24]
        break;
 80078c0:	e00c      	b.n	80078dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c2:	f7fd fa99 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 80078c6:	61b8      	str	r0, [r7, #24]
        break;
 80078c8:	e008      	b.n	80078dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ce:	61bb      	str	r3, [r7, #24]
        break;
 80078d0:	e004      	b.n	80078dc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	77bb      	strb	r3, [r7, #30]
        break;
 80078da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8082 	beq.w	80079e8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	005a      	lsls	r2, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	441a      	add	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b0f      	cmp	r3, #15
 80078fe:	d916      	bls.n	800792e <UART_SetConfig+0x2d2>
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007906:	d212      	bcs.n	800792e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f023 030f 	bic.w	r3, r3, #15
 8007910:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	b29a      	uxth	r2, r3
 800791e:	89fb      	ldrh	r3, [r7, #14]
 8007920:	4313      	orrs	r3, r2
 8007922:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	89fa      	ldrh	r2, [r7, #14]
 800792a:	60da      	str	r2, [r3, #12]
 800792c:	e05c      	b.n	80079e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	77bb      	strb	r3, [r7, #30]
 8007932:	e059      	b.n	80079e8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007934:	7ffb      	ldrb	r3, [r7, #31]
 8007936:	2b08      	cmp	r3, #8
 8007938:	d835      	bhi.n	80079a6 <UART_SetConfig+0x34a>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x2e4>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007991 	.word	0x08007991
 800794c:	080079a7 	.word	0x080079a7
 8007950:	08007997 	.word	0x08007997
 8007954:	080079a7 	.word	0x080079a7
 8007958:	080079a7 	.word	0x080079a7
 800795c:	080079a7 	.word	0x080079a7
 8007960:	0800799f 	.word	0x0800799f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007964:	f7fd fabe 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e021      	b.n	80079b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fd fadc 	bl	8004f28 <HAL_RCC_GetPCLK2Freq>
 8007970:	61b8      	str	r0, [r7, #24]
        break;
 8007972:	e01d      	b.n	80079b0 <UART_SetConfig+0x354>
 8007974:	40013800 	.word	0x40013800
 8007978:	40021000 	.word	0x40021000
 800797c:	40004400 	.word	0x40004400
 8007980:	40004800 	.word	0x40004800
 8007984:	40004c00 	.word	0x40004c00
 8007988:	40005000 	.word	0x40005000
 800798c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <UART_SetConfig+0x3a4>)
 8007992:	61bb      	str	r3, [r7, #24]
        break;
 8007994:	e00c      	b.n	80079b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007996:	f7fd fa2f 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 800799a:	61b8      	str	r0, [r7, #24]
        break;
 800799c:	e008      	b.n	80079b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079a2:	61bb      	str	r3, [r7, #24]
        break;
 80079a4:	e004      	b.n	80079b0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	77bb      	strb	r3, [r7, #30]
        break;
 80079ae:	bf00      	nop
    }

    if (pclk != 0U)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d018      	beq.n	80079e8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	085a      	lsrs	r2, r3, #1
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	441a      	add	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b0f      	cmp	r3, #15
 80079ce:	d909      	bls.n	80079e4 <UART_SetConfig+0x388>
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d6:	d205      	bcs.n	80079e4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	e001      	b.n	80079e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80079f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	007a1200 	.word	0x007a1200

08007a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b02:	d10a      	bne.n	8007b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b098      	sub	sp, #96	; 0x60
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b58:	f7fb fc1a 	bl	8003390 <HAL_GetTick>
 8007b5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d12e      	bne.n	8007bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b74:	2200      	movs	r2, #0
 8007b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f88c 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d021      	beq.n	8007bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ba6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e6      	bne.n	8007b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e062      	b.n	8007c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d149      	bne.n	8007c6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be0:	2200      	movs	r2, #0
 8007be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f856 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d03c      	beq.n	8007c6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30
 8007c12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3308      	adds	r3, #8
 8007c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c44:	61fa      	str	r2, [r7, #28]
 8007c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	617b      	str	r3, [r7, #20]
   return(result);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e5      	bne.n	8007c24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e011      	b.n	8007c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3758      	adds	r7, #88	; 0x58
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca8:	e049      	b.n	8007d3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb0:	d045      	beq.n	8007d3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb2:	f7fb fb6d 	bl	8003390 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d302      	bcc.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e048      	b.n	8007d5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d031      	beq.n	8007d3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d110      	bne.n	8007d0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2208      	movs	r2, #8
 8007cee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f8ed 	bl	8007ed0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e029      	b.n	8007d5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d18:	d111      	bne.n	8007d3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f8d3 	bl	8007ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e00f      	b.n	8007d5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4013      	ands	r3, r2
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	bf0c      	ite	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	2300      	movne	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d0a6      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b097      	sub	sp, #92	; 0x5c
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9a:	d10e      	bne.n	8007dba <UART_Start_Receive_IT+0x52>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d105      	bne.n	8007db0 <UART_Start_Receive_IT+0x48>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007daa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dae:	e01a      	b.n	8007de6 <UART_Start_Receive_IT+0x7e>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	22ff      	movs	r2, #255	; 0xff
 8007db4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007db8:	e015      	b.n	8007de6 <UART_Start_Receive_IT+0x7e>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10d      	bne.n	8007dde <UART_Start_Receive_IT+0x76>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <UART_Start_Receive_IT+0x6c>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	22ff      	movs	r2, #255	; 0xff
 8007dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dd2:	e008      	b.n	8007de6 <UART_Start_Receive_IT+0x7e>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	227f      	movs	r2, #127	; 0x7f
 8007dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ddc:	e003      	b.n	8007de6 <UART_Start_Receive_IT+0x7e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2222      	movs	r2, #34	; 0x22
 8007df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e16:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	d107      	bne.n	8007e44 <UART_Start_Receive_IT+0xdc>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a22      	ldr	r2, [pc, #136]	; (8007ec8 <UART_Start_Receive_IT+0x160>)
 8007e40:	669a      	str	r2, [r3, #104]	; 0x68
 8007e42:	e002      	b.n	8007e4a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a21      	ldr	r2, [pc, #132]	; (8007ecc <UART_Start_Receive_IT+0x164>)
 8007e48:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d019      	beq.n	8007e86 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
 8007e72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e6      	bne.n	8007e52 <UART_Start_Receive_IT+0xea>
 8007e84:	e018      	b.n	8007eb8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	613b      	str	r3, [r7, #16]
   return(result);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f043 0320 	orr.w	r3, r3, #32
 8007e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea4:	623b      	str	r3, [r7, #32]
 8007ea6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69f9      	ldr	r1, [r7, #28]
 8007eaa:	6a3a      	ldr	r2, [r7, #32]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	375c      	adds	r7, #92	; 0x5c
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	080081c1 	.word	0x080081c1
 8007ecc:	08008019 	.word	0x08008019

08007ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b095      	sub	sp, #84	; 0x54
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e6      	bne.n	8007ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f023 0301 	bic.w	r3, r3, #1
 8007f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3308      	adds	r3, #8
 8007f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e5      	bne.n	8007f0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d118      	bne.n	8007f78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0310 	bic.w	r3, r3, #16
 8007f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e6      	bne.n	8007f46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f8c:	bf00      	nop
 8007f8e:	3754      	adds	r7, #84	; 0x54
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff fb3a 	bl	8007630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7f8 fe1c 	bl	8000c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008010:	bf00      	nop
 8008012:	3720      	adds	r7, #32
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b09c      	sub	sp, #112	; 0x70
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008026:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008030:	2b22      	cmp	r3, #34	; 0x22
 8008032:	f040 80b9 	bne.w	80081a8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800803c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008040:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008044:	b2d9      	uxtb	r1, r3
 8008046:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800804a:	b2da      	uxtb	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008050:	400a      	ands	r2, r1
 8008052:	b2d2      	uxtb	r2, r2
 8008054:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008078:	b29b      	uxth	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	f040 809c 	bne.w	80081b8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800808e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008094:	66bb      	str	r3, [r7, #104]	; 0x68
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800809e:	65bb      	str	r3, [r7, #88]	; 0x58
 80080a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e6      	bne.n	8008080 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	667b      	str	r3, [r7, #100]	; 0x64
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080d2:	647a      	str	r2, [r7, #68]	; 0x44
 80080d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e5      	bne.n	80080b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d018      	beq.n	800813a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	623b      	str	r3, [r7, #32]
   return(result);
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800811c:	663b      	str	r3, [r7, #96]	; 0x60
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008126:	633b      	str	r3, [r7, #48]	; 0x30
 8008128:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e6      	bne.n	8008108 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813e:	2b01      	cmp	r3, #1
 8008140:	d12e      	bne.n	80081a0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60fb      	str	r3, [r7, #12]
   return(result);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 0310 	bic.w	r3, r3, #16
 800815c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	69b9      	ldr	r1, [r7, #24]
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	617b      	str	r3, [r7, #20]
   return(result);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e6      	bne.n	8008148 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b10      	cmp	r3, #16
 8008186:	d103      	bne.n	8008190 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2210      	movs	r2, #16
 800818e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fa53 	bl	8007644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800819e:	e00b      	b.n	80081b8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7f8 fd67 	bl	8000c74 <HAL_UART_RxCpltCallback>
}
 80081a6:	e007      	b.n	80081b8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0208 	orr.w	r2, r2, #8
 80081b6:	619a      	str	r2, [r3, #24]
}
 80081b8:	bf00      	nop
 80081ba:	3770      	adds	r7, #112	; 0x70
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b09c      	sub	sp, #112	; 0x70
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081d8:	2b22      	cmp	r3, #34	; 0x22
 80081da:	f040 80b9 	bne.w	8008350 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80081ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80081f6:	4013      	ands	r3, r2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	1c9a      	adds	r2, r3, #2
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	f040 809c 	bne.w	8008360 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800823c:	667b      	str	r3, [r7, #100]	; 0x64
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008246:	657b      	str	r3, [r7, #84]	; 0x54
 8008248:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800824c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e6      	bne.n	8008228 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	663b      	str	r3, [r7, #96]	; 0x60
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800827a:	643a      	str	r2, [r7, #64]	; 0x40
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e5      	bne.n	800825a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2220      	movs	r2, #32
 8008292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d018      	beq.n	80082e2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e6      	bne.n	80082b0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d12e      	bne.n	8008348 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f023 0310 	bic.w	r3, r3, #16
 8008304:	65bb      	str	r3, [r7, #88]	; 0x58
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830e:	61bb      	str	r3, [r7, #24]
 8008310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6979      	ldr	r1, [r7, #20]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	613b      	str	r3, [r7, #16]
   return(result);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f003 0310 	and.w	r3, r3, #16
 800832c:	2b10      	cmp	r3, #16
 800832e:	d103      	bne.n	8008338 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2210      	movs	r2, #16
 8008336:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff f97f 	bl	8007644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008346:	e00b      	b.n	8008360 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7f8 fc93 	bl	8000c74 <HAL_UART_RxCpltCallback>
}
 800834e:	e007      	b.n	8008360 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0208 	orr.w	r2, r2, #8
 800835e:	619a      	str	r2, [r3, #24]
}
 8008360:	bf00      	nop
 8008362:	3770      	adds	r7, #112	; 0x70
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <atoi>:
 800837c:	220a      	movs	r2, #10
 800837e:	2100      	movs	r1, #0
 8008380:	f000 b9cc 	b.w	800871c <strtol>

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	; (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000094 	.word	0x20000094

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	4d0d      	ldr	r5, [pc, #52]	; (80083c8 <__libc_init_array+0x38>)
 8008394:	4c0d      	ldr	r4, [pc, #52]	; (80083cc <__libc_init_array+0x3c>)
 8008396:	1b64      	subs	r4, r4, r5
 8008398:	10a4      	asrs	r4, r4, #2
 800839a:	2600      	movs	r6, #0
 800839c:	42a6      	cmp	r6, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	4d0b      	ldr	r5, [pc, #44]	; (80083d0 <__libc_init_array+0x40>)
 80083a2:	4c0c      	ldr	r4, [pc, #48]	; (80083d4 <__libc_init_array+0x44>)
 80083a4:	f000 fd22 	bl	8008dec <_init>
 80083a8:	1b64      	subs	r4, r4, r5
 80083aa:	10a4      	asrs	r4, r4, #2
 80083ac:	2600      	movs	r6, #0
 80083ae:	42a6      	cmp	r6, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b8:	4798      	blx	r3
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c2:	4798      	blx	r3
 80083c4:	3601      	adds	r6, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	080091bc 	.word	0x080091bc
 80083cc:	080091bc 	.word	0x080091bc
 80083d0:	080091bc 	.word	0x080091bc
 80083d4:	080091c0 	.word	0x080091c0

080083d8 <free>:
 80083d8:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <free+0xc>)
 80083da:	4601      	mov	r1, r0
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f000 b80b 	b.w	80083f8 <_free_r>
 80083e2:	bf00      	nop
 80083e4:	20000094 	.word	0x20000094

080083e8 <memset>:
 80083e8:	4402      	add	r2, r0
 80083ea:	4603      	mov	r3, r0
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d100      	bne.n	80083f2 <memset+0xa>
 80083f0:	4770      	bx	lr
 80083f2:	f803 1b01 	strb.w	r1, [r3], #1
 80083f6:	e7f9      	b.n	80083ec <memset+0x4>

080083f8 <_free_r>:
 80083f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083fa:	2900      	cmp	r1, #0
 80083fc:	d044      	beq.n	8008488 <_free_r+0x90>
 80083fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008402:	9001      	str	r0, [sp, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f1a1 0404 	sub.w	r4, r1, #4
 800840a:	bfb8      	it	lt
 800840c:	18e4      	addlt	r4, r4, r3
 800840e:	f000 f98f 	bl	8008730 <__malloc_lock>
 8008412:	4a1e      	ldr	r2, [pc, #120]	; (800848c <_free_r+0x94>)
 8008414:	9801      	ldr	r0, [sp, #4]
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	b933      	cbnz	r3, 8008428 <_free_r+0x30>
 800841a:	6063      	str	r3, [r4, #4]
 800841c:	6014      	str	r4, [r2, #0]
 800841e:	b003      	add	sp, #12
 8008420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008424:	f000 b98a 	b.w	800873c <__malloc_unlock>
 8008428:	42a3      	cmp	r3, r4
 800842a:	d908      	bls.n	800843e <_free_r+0x46>
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	1961      	adds	r1, r4, r5
 8008430:	428b      	cmp	r3, r1
 8008432:	bf01      	itttt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	1949      	addeq	r1, r1, r5
 800843a:	6021      	streq	r1, [r4, #0]
 800843c:	e7ed      	b.n	800841a <_free_r+0x22>
 800843e:	461a      	mov	r2, r3
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b10b      	cbz	r3, 8008448 <_free_r+0x50>
 8008444:	42a3      	cmp	r3, r4
 8008446:	d9fa      	bls.n	800843e <_free_r+0x46>
 8008448:	6811      	ldr	r1, [r2, #0]
 800844a:	1855      	adds	r5, r2, r1
 800844c:	42a5      	cmp	r5, r4
 800844e:	d10b      	bne.n	8008468 <_free_r+0x70>
 8008450:	6824      	ldr	r4, [r4, #0]
 8008452:	4421      	add	r1, r4
 8008454:	1854      	adds	r4, r2, r1
 8008456:	42a3      	cmp	r3, r4
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	d1e0      	bne.n	800841e <_free_r+0x26>
 800845c:	681c      	ldr	r4, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	6053      	str	r3, [r2, #4]
 8008462:	4421      	add	r1, r4
 8008464:	6011      	str	r1, [r2, #0]
 8008466:	e7da      	b.n	800841e <_free_r+0x26>
 8008468:	d902      	bls.n	8008470 <_free_r+0x78>
 800846a:	230c      	movs	r3, #12
 800846c:	6003      	str	r3, [r0, #0]
 800846e:	e7d6      	b.n	800841e <_free_r+0x26>
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	1961      	adds	r1, r4, r5
 8008474:	428b      	cmp	r3, r1
 8008476:	bf04      	itt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	6063      	str	r3, [r4, #4]
 800847e:	bf04      	itt	eq
 8008480:	1949      	addeq	r1, r1, r5
 8008482:	6021      	streq	r1, [r4, #0]
 8008484:	6054      	str	r4, [r2, #4]
 8008486:	e7ca      	b.n	800841e <_free_r+0x26>
 8008488:	b003      	add	sp, #12
 800848a:	bd30      	pop	{r4, r5, pc}
 800848c:	20000c3c 	.word	0x20000c3c

08008490 <sbrk_aligned>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4e0e      	ldr	r6, [pc, #56]	; (80084cc <sbrk_aligned+0x3c>)
 8008494:	460c      	mov	r4, r1
 8008496:	6831      	ldr	r1, [r6, #0]
 8008498:	4605      	mov	r5, r0
 800849a:	b911      	cbnz	r1, 80084a2 <sbrk_aligned+0x12>
 800849c:	f000 f88c 	bl	80085b8 <_sbrk_r>
 80084a0:	6030      	str	r0, [r6, #0]
 80084a2:	4621      	mov	r1, r4
 80084a4:	4628      	mov	r0, r5
 80084a6:	f000 f887 	bl	80085b8 <_sbrk_r>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d00a      	beq.n	80084c4 <sbrk_aligned+0x34>
 80084ae:	1cc4      	adds	r4, r0, #3
 80084b0:	f024 0403 	bic.w	r4, r4, #3
 80084b4:	42a0      	cmp	r0, r4
 80084b6:	d007      	beq.n	80084c8 <sbrk_aligned+0x38>
 80084b8:	1a21      	subs	r1, r4, r0
 80084ba:	4628      	mov	r0, r5
 80084bc:	f000 f87c 	bl	80085b8 <_sbrk_r>
 80084c0:	3001      	adds	r0, #1
 80084c2:	d101      	bne.n	80084c8 <sbrk_aligned+0x38>
 80084c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084c8:	4620      	mov	r0, r4
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	20000c40 	.word	0x20000c40

080084d0 <_malloc_r>:
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d4:	1ccd      	adds	r5, r1, #3
 80084d6:	f025 0503 	bic.w	r5, r5, #3
 80084da:	3508      	adds	r5, #8
 80084dc:	2d0c      	cmp	r5, #12
 80084de:	bf38      	it	cc
 80084e0:	250c      	movcc	r5, #12
 80084e2:	2d00      	cmp	r5, #0
 80084e4:	4607      	mov	r7, r0
 80084e6:	db01      	blt.n	80084ec <_malloc_r+0x1c>
 80084e8:	42a9      	cmp	r1, r5
 80084ea:	d905      	bls.n	80084f8 <_malloc_r+0x28>
 80084ec:	230c      	movs	r3, #12
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	2600      	movs	r6, #0
 80084f2:	4630      	mov	r0, r6
 80084f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f8:	4e2e      	ldr	r6, [pc, #184]	; (80085b4 <_malloc_r+0xe4>)
 80084fa:	f000 f919 	bl	8008730 <__malloc_lock>
 80084fe:	6833      	ldr	r3, [r6, #0]
 8008500:	461c      	mov	r4, r3
 8008502:	bb34      	cbnz	r4, 8008552 <_malloc_r+0x82>
 8008504:	4629      	mov	r1, r5
 8008506:	4638      	mov	r0, r7
 8008508:	f7ff ffc2 	bl	8008490 <sbrk_aligned>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	4604      	mov	r4, r0
 8008510:	d14d      	bne.n	80085ae <_malloc_r+0xde>
 8008512:	6834      	ldr	r4, [r6, #0]
 8008514:	4626      	mov	r6, r4
 8008516:	2e00      	cmp	r6, #0
 8008518:	d140      	bne.n	800859c <_malloc_r+0xcc>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	4631      	mov	r1, r6
 800851e:	4638      	mov	r0, r7
 8008520:	eb04 0803 	add.w	r8, r4, r3
 8008524:	f000 f848 	bl	80085b8 <_sbrk_r>
 8008528:	4580      	cmp	r8, r0
 800852a:	d13a      	bne.n	80085a2 <_malloc_r+0xd2>
 800852c:	6821      	ldr	r1, [r4, #0]
 800852e:	3503      	adds	r5, #3
 8008530:	1a6d      	subs	r5, r5, r1
 8008532:	f025 0503 	bic.w	r5, r5, #3
 8008536:	3508      	adds	r5, #8
 8008538:	2d0c      	cmp	r5, #12
 800853a:	bf38      	it	cc
 800853c:	250c      	movcc	r5, #12
 800853e:	4629      	mov	r1, r5
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff ffa5 	bl	8008490 <sbrk_aligned>
 8008546:	3001      	adds	r0, #1
 8008548:	d02b      	beq.n	80085a2 <_malloc_r+0xd2>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	442b      	add	r3, r5
 800854e:	6023      	str	r3, [r4, #0]
 8008550:	e00e      	b.n	8008570 <_malloc_r+0xa0>
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	1b52      	subs	r2, r2, r5
 8008556:	d41e      	bmi.n	8008596 <_malloc_r+0xc6>
 8008558:	2a0b      	cmp	r2, #11
 800855a:	d916      	bls.n	800858a <_malloc_r+0xba>
 800855c:	1961      	adds	r1, r4, r5
 800855e:	42a3      	cmp	r3, r4
 8008560:	6025      	str	r5, [r4, #0]
 8008562:	bf18      	it	ne
 8008564:	6059      	strne	r1, [r3, #4]
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	bf08      	it	eq
 800856a:	6031      	streq	r1, [r6, #0]
 800856c:	5162      	str	r2, [r4, r5]
 800856e:	604b      	str	r3, [r1, #4]
 8008570:	4638      	mov	r0, r7
 8008572:	f104 060b 	add.w	r6, r4, #11
 8008576:	f000 f8e1 	bl	800873c <__malloc_unlock>
 800857a:	f026 0607 	bic.w	r6, r6, #7
 800857e:	1d23      	adds	r3, r4, #4
 8008580:	1af2      	subs	r2, r6, r3
 8008582:	d0b6      	beq.n	80084f2 <_malloc_r+0x22>
 8008584:	1b9b      	subs	r3, r3, r6
 8008586:	50a3      	str	r3, [r4, r2]
 8008588:	e7b3      	b.n	80084f2 <_malloc_r+0x22>
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	42a3      	cmp	r3, r4
 800858e:	bf0c      	ite	eq
 8008590:	6032      	streq	r2, [r6, #0]
 8008592:	605a      	strne	r2, [r3, #4]
 8008594:	e7ec      	b.n	8008570 <_malloc_r+0xa0>
 8008596:	4623      	mov	r3, r4
 8008598:	6864      	ldr	r4, [r4, #4]
 800859a:	e7b2      	b.n	8008502 <_malloc_r+0x32>
 800859c:	4634      	mov	r4, r6
 800859e:	6876      	ldr	r6, [r6, #4]
 80085a0:	e7b9      	b.n	8008516 <_malloc_r+0x46>
 80085a2:	230c      	movs	r3, #12
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	4638      	mov	r0, r7
 80085a8:	f000 f8c8 	bl	800873c <__malloc_unlock>
 80085ac:	e7a1      	b.n	80084f2 <_malloc_r+0x22>
 80085ae:	6025      	str	r5, [r4, #0]
 80085b0:	e7de      	b.n	8008570 <_malloc_r+0xa0>
 80085b2:	bf00      	nop
 80085b4:	20000c3c 	.word	0x20000c3c

080085b8 <_sbrk_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d06      	ldr	r5, [pc, #24]	; (80085d4 <_sbrk_r+0x1c>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	602b      	str	r3, [r5, #0]
 80085c4:	f7fa fe18 	bl	80031f8 <_sbrk>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_sbrk_r+0x1a>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_sbrk_r+0x1a>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	20000c44 	.word	0x20000c44

080085d8 <siprintf>:
 80085d8:	b40e      	push	{r1, r2, r3}
 80085da:	b500      	push	{lr}
 80085dc:	b09c      	sub	sp, #112	; 0x70
 80085de:	ab1d      	add	r3, sp, #116	; 0x74
 80085e0:	9002      	str	r0, [sp, #8]
 80085e2:	9006      	str	r0, [sp, #24]
 80085e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085e8:	4809      	ldr	r0, [pc, #36]	; (8008610 <siprintf+0x38>)
 80085ea:	9107      	str	r1, [sp, #28]
 80085ec:	9104      	str	r1, [sp, #16]
 80085ee:	4909      	ldr	r1, [pc, #36]	; (8008614 <siprintf+0x3c>)
 80085f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f4:	9105      	str	r1, [sp, #20]
 80085f6:	6800      	ldr	r0, [r0, #0]
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	a902      	add	r1, sp, #8
 80085fc:	f000 f900 	bl	8008800 <_svfiprintf_r>
 8008600:	9b02      	ldr	r3, [sp, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	b01c      	add	sp, #112	; 0x70
 8008608:	f85d eb04 	ldr.w	lr, [sp], #4
 800860c:	b003      	add	sp, #12
 800860e:	4770      	bx	lr
 8008610:	20000094 	.word	0x20000094
 8008614:	ffff0208 	.word	0xffff0208

08008618 <_strtol_l.constprop.0>:
 8008618:	2b01      	cmp	r3, #1
 800861a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861e:	d001      	beq.n	8008624 <_strtol_l.constprop.0+0xc>
 8008620:	2b24      	cmp	r3, #36	; 0x24
 8008622:	d906      	bls.n	8008632 <_strtol_l.constprop.0+0x1a>
 8008624:	f7ff feae 	bl	8008384 <__errno>
 8008628:	2316      	movs	r3, #22
 800862a:	6003      	str	r3, [r0, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008718 <_strtol_l.constprop.0+0x100>
 8008636:	460d      	mov	r5, r1
 8008638:	462e      	mov	r6, r5
 800863a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800863e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008642:	f017 0708 	ands.w	r7, r7, #8
 8008646:	d1f7      	bne.n	8008638 <_strtol_l.constprop.0+0x20>
 8008648:	2c2d      	cmp	r4, #45	; 0x2d
 800864a:	d132      	bne.n	80086b2 <_strtol_l.constprop.0+0x9a>
 800864c:	782c      	ldrb	r4, [r5, #0]
 800864e:	2701      	movs	r7, #1
 8008650:	1cb5      	adds	r5, r6, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d05b      	beq.n	800870e <_strtol_l.constprop.0+0xf6>
 8008656:	2b10      	cmp	r3, #16
 8008658:	d109      	bne.n	800866e <_strtol_l.constprop.0+0x56>
 800865a:	2c30      	cmp	r4, #48	; 0x30
 800865c:	d107      	bne.n	800866e <_strtol_l.constprop.0+0x56>
 800865e:	782c      	ldrb	r4, [r5, #0]
 8008660:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008664:	2c58      	cmp	r4, #88	; 0x58
 8008666:	d14d      	bne.n	8008704 <_strtol_l.constprop.0+0xec>
 8008668:	786c      	ldrb	r4, [r5, #1]
 800866a:	2310      	movs	r3, #16
 800866c:	3502      	adds	r5, #2
 800866e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008672:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008676:	f04f 0c00 	mov.w	ip, #0
 800867a:	fbb8 f9f3 	udiv	r9, r8, r3
 800867e:	4666      	mov	r6, ip
 8008680:	fb03 8a19 	mls	sl, r3, r9, r8
 8008684:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008688:	f1be 0f09 	cmp.w	lr, #9
 800868c:	d816      	bhi.n	80086bc <_strtol_l.constprop.0+0xa4>
 800868e:	4674      	mov	r4, lr
 8008690:	42a3      	cmp	r3, r4
 8008692:	dd24      	ble.n	80086de <_strtol_l.constprop.0+0xc6>
 8008694:	f1bc 0f00 	cmp.w	ip, #0
 8008698:	db1e      	blt.n	80086d8 <_strtol_l.constprop.0+0xc0>
 800869a:	45b1      	cmp	r9, r6
 800869c:	d31c      	bcc.n	80086d8 <_strtol_l.constprop.0+0xc0>
 800869e:	d101      	bne.n	80086a4 <_strtol_l.constprop.0+0x8c>
 80086a0:	45a2      	cmp	sl, r4
 80086a2:	db19      	blt.n	80086d8 <_strtol_l.constprop.0+0xc0>
 80086a4:	fb06 4603 	mla	r6, r6, r3, r4
 80086a8:	f04f 0c01 	mov.w	ip, #1
 80086ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086b0:	e7e8      	b.n	8008684 <_strtol_l.constprop.0+0x6c>
 80086b2:	2c2b      	cmp	r4, #43	; 0x2b
 80086b4:	bf04      	itt	eq
 80086b6:	782c      	ldrbeq	r4, [r5, #0]
 80086b8:	1cb5      	addeq	r5, r6, #2
 80086ba:	e7ca      	b.n	8008652 <_strtol_l.constprop.0+0x3a>
 80086bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086c0:	f1be 0f19 	cmp.w	lr, #25
 80086c4:	d801      	bhi.n	80086ca <_strtol_l.constprop.0+0xb2>
 80086c6:	3c37      	subs	r4, #55	; 0x37
 80086c8:	e7e2      	b.n	8008690 <_strtol_l.constprop.0+0x78>
 80086ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086ce:	f1be 0f19 	cmp.w	lr, #25
 80086d2:	d804      	bhi.n	80086de <_strtol_l.constprop.0+0xc6>
 80086d4:	3c57      	subs	r4, #87	; 0x57
 80086d6:	e7db      	b.n	8008690 <_strtol_l.constprop.0+0x78>
 80086d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80086dc:	e7e6      	b.n	80086ac <_strtol_l.constprop.0+0x94>
 80086de:	f1bc 0f00 	cmp.w	ip, #0
 80086e2:	da05      	bge.n	80086f0 <_strtol_l.constprop.0+0xd8>
 80086e4:	2322      	movs	r3, #34	; 0x22
 80086e6:	6003      	str	r3, [r0, #0]
 80086e8:	4646      	mov	r6, r8
 80086ea:	b942      	cbnz	r2, 80086fe <_strtol_l.constprop.0+0xe6>
 80086ec:	4630      	mov	r0, r6
 80086ee:	e79e      	b.n	800862e <_strtol_l.constprop.0+0x16>
 80086f0:	b107      	cbz	r7, 80086f4 <_strtol_l.constprop.0+0xdc>
 80086f2:	4276      	negs	r6, r6
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	d0f9      	beq.n	80086ec <_strtol_l.constprop.0+0xd4>
 80086f8:	f1bc 0f00 	cmp.w	ip, #0
 80086fc:	d000      	beq.n	8008700 <_strtol_l.constprop.0+0xe8>
 80086fe:	1e69      	subs	r1, r5, #1
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	e7f3      	b.n	80086ec <_strtol_l.constprop.0+0xd4>
 8008704:	2430      	movs	r4, #48	; 0x30
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1b1      	bne.n	800866e <_strtol_l.constprop.0+0x56>
 800870a:	2308      	movs	r3, #8
 800870c:	e7af      	b.n	800866e <_strtol_l.constprop.0+0x56>
 800870e:	2c30      	cmp	r4, #48	; 0x30
 8008710:	d0a5      	beq.n	800865e <_strtol_l.constprop.0+0x46>
 8008712:	230a      	movs	r3, #10
 8008714:	e7ab      	b.n	800866e <_strtol_l.constprop.0+0x56>
 8008716:	bf00      	nop
 8008718:	08009089 	.word	0x08009089

0800871c <strtol>:
 800871c:	4613      	mov	r3, r2
 800871e:	460a      	mov	r2, r1
 8008720:	4601      	mov	r1, r0
 8008722:	4802      	ldr	r0, [pc, #8]	; (800872c <strtol+0x10>)
 8008724:	6800      	ldr	r0, [r0, #0]
 8008726:	f7ff bf77 	b.w	8008618 <_strtol_l.constprop.0>
 800872a:	bf00      	nop
 800872c:	20000094 	.word	0x20000094

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <__malloc_lock+0x8>)
 8008732:	f000 baf9 	b.w	8008d28 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	20000c48 	.word	0x20000c48

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__malloc_unlock+0x8>)
 800873e:	f000 baf4 	b.w	8008d2a <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	20000c48 	.word	0x20000c48

08008748 <__ssputs_r>:
 8008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	688e      	ldr	r6, [r1, #8]
 800874e:	429e      	cmp	r6, r3
 8008750:	4682      	mov	sl, r0
 8008752:	460c      	mov	r4, r1
 8008754:	4690      	mov	r8, r2
 8008756:	461f      	mov	r7, r3
 8008758:	d838      	bhi.n	80087cc <__ssputs_r+0x84>
 800875a:	898a      	ldrh	r2, [r1, #12]
 800875c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008760:	d032      	beq.n	80087c8 <__ssputs_r+0x80>
 8008762:	6825      	ldr	r5, [r4, #0]
 8008764:	6909      	ldr	r1, [r1, #16]
 8008766:	eba5 0901 	sub.w	r9, r5, r1
 800876a:	6965      	ldr	r5, [r4, #20]
 800876c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008774:	3301      	adds	r3, #1
 8008776:	444b      	add	r3, r9
 8008778:	106d      	asrs	r5, r5, #1
 800877a:	429d      	cmp	r5, r3
 800877c:	bf38      	it	cc
 800877e:	461d      	movcc	r5, r3
 8008780:	0553      	lsls	r3, r2, #21
 8008782:	d531      	bpl.n	80087e8 <__ssputs_r+0xa0>
 8008784:	4629      	mov	r1, r5
 8008786:	f7ff fea3 	bl	80084d0 <_malloc_r>
 800878a:	4606      	mov	r6, r0
 800878c:	b950      	cbnz	r0, 80087a4 <__ssputs_r+0x5c>
 800878e:	230c      	movs	r3, #12
 8008790:	f8ca 3000 	str.w	r3, [sl]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	464a      	mov	r2, r9
 80087a8:	f000 fac0 	bl	8008d2c <memcpy>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	6165      	str	r5, [r4, #20]
 80087bc:	444e      	add	r6, r9
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	6026      	str	r6, [r4, #0]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	463e      	mov	r6, r7
 80087c8:	42be      	cmp	r6, r7
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x86>
 80087cc:	463e      	mov	r6, r7
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4641      	mov	r1, r8
 80087d4:	f000 fab8 	bl	8008d48 <memmove>
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4433      	add	r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7db      	b.n	80087a0 <__ssputs_r+0x58>
 80087e8:	462a      	mov	r2, r5
 80087ea:	f000 fac7 	bl	8008d7c <_realloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d1e1      	bne.n	80087b8 <__ssputs_r+0x70>
 80087f4:	6921      	ldr	r1, [r4, #16]
 80087f6:	4650      	mov	r0, sl
 80087f8:	f7ff fdfe 	bl	80083f8 <_free_r>
 80087fc:	e7c7      	b.n	800878e <__ssputs_r+0x46>
	...

08008800 <_svfiprintf_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4698      	mov	r8, r3
 8008806:	898b      	ldrh	r3, [r1, #12]
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	b09d      	sub	sp, #116	; 0x74
 800880c:	4607      	mov	r7, r0
 800880e:	460d      	mov	r5, r1
 8008810:	4614      	mov	r4, r2
 8008812:	d50e      	bpl.n	8008832 <_svfiprintf_r+0x32>
 8008814:	690b      	ldr	r3, [r1, #16]
 8008816:	b963      	cbnz	r3, 8008832 <_svfiprintf_r+0x32>
 8008818:	2140      	movs	r1, #64	; 0x40
 800881a:	f7ff fe59 	bl	80084d0 <_malloc_r>
 800881e:	6028      	str	r0, [r5, #0]
 8008820:	6128      	str	r0, [r5, #16]
 8008822:	b920      	cbnz	r0, 800882e <_svfiprintf_r+0x2e>
 8008824:	230c      	movs	r3, #12
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800882c:	e0d1      	b.n	80089d2 <_svfiprintf_r+0x1d2>
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	616b      	str	r3, [r5, #20]
 8008832:	2300      	movs	r3, #0
 8008834:	9309      	str	r3, [sp, #36]	; 0x24
 8008836:	2320      	movs	r3, #32
 8008838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800883c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008840:	2330      	movs	r3, #48	; 0x30
 8008842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089ec <_svfiprintf_r+0x1ec>
 8008846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800884a:	f04f 0901 	mov.w	r9, #1
 800884e:	4623      	mov	r3, r4
 8008850:	469a      	mov	sl, r3
 8008852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008856:	b10a      	cbz	r2, 800885c <_svfiprintf_r+0x5c>
 8008858:	2a25      	cmp	r2, #37	; 0x25
 800885a:	d1f9      	bne.n	8008850 <_svfiprintf_r+0x50>
 800885c:	ebba 0b04 	subs.w	fp, sl, r4
 8008860:	d00b      	beq.n	800887a <_svfiprintf_r+0x7a>
 8008862:	465b      	mov	r3, fp
 8008864:	4622      	mov	r2, r4
 8008866:	4629      	mov	r1, r5
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff ff6d 	bl	8008748 <__ssputs_r>
 800886e:	3001      	adds	r0, #1
 8008870:	f000 80aa 	beq.w	80089c8 <_svfiprintf_r+0x1c8>
 8008874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008876:	445a      	add	r2, fp
 8008878:	9209      	str	r2, [sp, #36]	; 0x24
 800887a:	f89a 3000 	ldrb.w	r3, [sl]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 80a2 	beq.w	80089c8 <_svfiprintf_r+0x1c8>
 8008884:	2300      	movs	r3, #0
 8008886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800888a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888e:	f10a 0a01 	add.w	sl, sl, #1
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	9307      	str	r3, [sp, #28]
 8008896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800889a:	931a      	str	r3, [sp, #104]	; 0x68
 800889c:	4654      	mov	r4, sl
 800889e:	2205      	movs	r2, #5
 80088a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a4:	4851      	ldr	r0, [pc, #324]	; (80089ec <_svfiprintf_r+0x1ec>)
 80088a6:	f7f7 fcab 	bl	8000200 <memchr>
 80088aa:	9a04      	ldr	r2, [sp, #16]
 80088ac:	b9d8      	cbnz	r0, 80088e6 <_svfiprintf_r+0xe6>
 80088ae:	06d0      	lsls	r0, r2, #27
 80088b0:	bf44      	itt	mi
 80088b2:	2320      	movmi	r3, #32
 80088b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b8:	0711      	lsls	r1, r2, #28
 80088ba:	bf44      	itt	mi
 80088bc:	232b      	movmi	r3, #43	; 0x2b
 80088be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c2:	f89a 3000 	ldrb.w	r3, [sl]
 80088c6:	2b2a      	cmp	r3, #42	; 0x2a
 80088c8:	d015      	beq.n	80088f6 <_svfiprintf_r+0xf6>
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	4654      	mov	r4, sl
 80088ce:	2000      	movs	r0, #0
 80088d0:	f04f 0c0a 	mov.w	ip, #10
 80088d4:	4621      	mov	r1, r4
 80088d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088da:	3b30      	subs	r3, #48	; 0x30
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d94e      	bls.n	800897e <_svfiprintf_r+0x17e>
 80088e0:	b1b0      	cbz	r0, 8008910 <_svfiprintf_r+0x110>
 80088e2:	9207      	str	r2, [sp, #28]
 80088e4:	e014      	b.n	8008910 <_svfiprintf_r+0x110>
 80088e6:	eba0 0308 	sub.w	r3, r0, r8
 80088ea:	fa09 f303 	lsl.w	r3, r9, r3
 80088ee:	4313      	orrs	r3, r2
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	46a2      	mov	sl, r4
 80088f4:	e7d2      	b.n	800889c <_svfiprintf_r+0x9c>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	1d19      	adds	r1, r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	9103      	str	r1, [sp, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfbb      	ittet	lt
 8008902:	425b      	neglt	r3, r3
 8008904:	f042 0202 	orrlt.w	r2, r2, #2
 8008908:	9307      	strge	r3, [sp, #28]
 800890a:	9307      	strlt	r3, [sp, #28]
 800890c:	bfb8      	it	lt
 800890e:	9204      	strlt	r2, [sp, #16]
 8008910:	7823      	ldrb	r3, [r4, #0]
 8008912:	2b2e      	cmp	r3, #46	; 0x2e
 8008914:	d10c      	bne.n	8008930 <_svfiprintf_r+0x130>
 8008916:	7863      	ldrb	r3, [r4, #1]
 8008918:	2b2a      	cmp	r3, #42	; 0x2a
 800891a:	d135      	bne.n	8008988 <_svfiprintf_r+0x188>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	9203      	str	r2, [sp, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	bfb8      	it	lt
 8008928:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800892c:	3402      	adds	r4, #2
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089fc <_svfiprintf_r+0x1fc>
 8008934:	7821      	ldrb	r1, [r4, #0]
 8008936:	2203      	movs	r2, #3
 8008938:	4650      	mov	r0, sl
 800893a:	f7f7 fc61 	bl	8000200 <memchr>
 800893e:	b140      	cbz	r0, 8008952 <_svfiprintf_r+0x152>
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	eba0 000a 	sub.w	r0, r0, sl
 8008946:	fa03 f000 	lsl.w	r0, r3, r0
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	4303      	orrs	r3, r0
 800894e:	3401      	adds	r4, #1
 8008950:	9304      	str	r3, [sp, #16]
 8008952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008956:	4826      	ldr	r0, [pc, #152]	; (80089f0 <_svfiprintf_r+0x1f0>)
 8008958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895c:	2206      	movs	r2, #6
 800895e:	f7f7 fc4f 	bl	8000200 <memchr>
 8008962:	2800      	cmp	r0, #0
 8008964:	d038      	beq.n	80089d8 <_svfiprintf_r+0x1d8>
 8008966:	4b23      	ldr	r3, [pc, #140]	; (80089f4 <_svfiprintf_r+0x1f4>)
 8008968:	bb1b      	cbnz	r3, 80089b2 <_svfiprintf_r+0x1b2>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	3307      	adds	r3, #7
 800896e:	f023 0307 	bic.w	r3, r3, #7
 8008972:	3308      	adds	r3, #8
 8008974:	9303      	str	r3, [sp, #12]
 8008976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008978:	4433      	add	r3, r6
 800897a:	9309      	str	r3, [sp, #36]	; 0x24
 800897c:	e767      	b.n	800884e <_svfiprintf_r+0x4e>
 800897e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008982:	460c      	mov	r4, r1
 8008984:	2001      	movs	r0, #1
 8008986:	e7a5      	b.n	80088d4 <_svfiprintf_r+0xd4>
 8008988:	2300      	movs	r3, #0
 800898a:	3401      	adds	r4, #1
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	4619      	mov	r1, r3
 8008990:	f04f 0c0a 	mov.w	ip, #10
 8008994:	4620      	mov	r0, r4
 8008996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800899a:	3a30      	subs	r2, #48	; 0x30
 800899c:	2a09      	cmp	r2, #9
 800899e:	d903      	bls.n	80089a8 <_svfiprintf_r+0x1a8>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0c5      	beq.n	8008930 <_svfiprintf_r+0x130>
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	e7c3      	b.n	8008930 <_svfiprintf_r+0x130>
 80089a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ac:	4604      	mov	r4, r0
 80089ae:	2301      	movs	r3, #1
 80089b0:	e7f0      	b.n	8008994 <_svfiprintf_r+0x194>
 80089b2:	ab03      	add	r3, sp, #12
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	462a      	mov	r2, r5
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <_svfiprintf_r+0x1f8>)
 80089ba:	a904      	add	r1, sp, #16
 80089bc:	4638      	mov	r0, r7
 80089be:	f3af 8000 	nop.w
 80089c2:	1c42      	adds	r2, r0, #1
 80089c4:	4606      	mov	r6, r0
 80089c6:	d1d6      	bne.n	8008976 <_svfiprintf_r+0x176>
 80089c8:	89ab      	ldrh	r3, [r5, #12]
 80089ca:	065b      	lsls	r3, r3, #25
 80089cc:	f53f af2c 	bmi.w	8008828 <_svfiprintf_r+0x28>
 80089d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d2:	b01d      	add	sp, #116	; 0x74
 80089d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	462a      	mov	r2, r5
 80089de:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <_svfiprintf_r+0x1f8>)
 80089e0:	a904      	add	r1, sp, #16
 80089e2:	4638      	mov	r0, r7
 80089e4:	f000 f87a 	bl	8008adc <_printf_i>
 80089e8:	e7eb      	b.n	80089c2 <_svfiprintf_r+0x1c2>
 80089ea:	bf00      	nop
 80089ec:	08009189 	.word	0x08009189
 80089f0:	08009193 	.word	0x08009193
 80089f4:	00000000 	.word	0x00000000
 80089f8:	08008749 	.word	0x08008749
 80089fc:	0800918f 	.word	0x0800918f

08008a00 <_printf_common>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	4616      	mov	r6, r2
 8008a06:	4699      	mov	r9, r3
 8008a08:	688a      	ldr	r2, [r1, #8]
 8008a0a:	690b      	ldr	r3, [r1, #16]
 8008a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	bfb8      	it	lt
 8008a14:	4613      	movlt	r3, r2
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b10a      	cbz	r2, 8008a26 <_printf_common+0x26>
 8008a22:	3301      	adds	r3, #1
 8008a24:	6033      	str	r3, [r6, #0]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	0699      	lsls	r1, r3, #26
 8008a2a:	bf42      	ittt	mi
 8008a2c:	6833      	ldrmi	r3, [r6, #0]
 8008a2e:	3302      	addmi	r3, #2
 8008a30:	6033      	strmi	r3, [r6, #0]
 8008a32:	6825      	ldr	r5, [r4, #0]
 8008a34:	f015 0506 	ands.w	r5, r5, #6
 8008a38:	d106      	bne.n	8008a48 <_printf_common+0x48>
 8008a3a:	f104 0a19 	add.w	sl, r4, #25
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	6832      	ldr	r2, [r6, #0]
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dc26      	bgt.n	8008a96 <_printf_common+0x96>
 8008a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a4c:	1e13      	subs	r3, r2, #0
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	bf18      	it	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	0692      	lsls	r2, r2, #26
 8008a56:	d42b      	bmi.n	8008ab0 <_printf_common+0xb0>
 8008a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4638      	mov	r0, r7
 8008a60:	47c0      	blx	r8
 8008a62:	3001      	adds	r0, #1
 8008a64:	d01e      	beq.n	8008aa4 <_printf_common+0xa4>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	68e5      	ldr	r5, [r4, #12]
 8008a6a:	6832      	ldr	r2, [r6, #0]
 8008a6c:	f003 0306 	and.w	r3, r3, #6
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	bf08      	it	eq
 8008a74:	1aad      	subeq	r5, r5, r2
 8008a76:	68a3      	ldr	r3, [r4, #8]
 8008a78:	6922      	ldr	r2, [r4, #16]
 8008a7a:	bf0c      	ite	eq
 8008a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a80:	2500      	movne	r5, #0
 8008a82:	4293      	cmp	r3, r2
 8008a84:	bfc4      	itt	gt
 8008a86:	1a9b      	subgt	r3, r3, r2
 8008a88:	18ed      	addgt	r5, r5, r3
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	341a      	adds	r4, #26
 8008a8e:	42b5      	cmp	r5, r6
 8008a90:	d11a      	bne.n	8008ac8 <_printf_common+0xc8>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e008      	b.n	8008aa8 <_printf_common+0xa8>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4652      	mov	r2, sl
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	47c0      	blx	r8
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d103      	bne.n	8008aac <_printf_common+0xac>
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	3501      	adds	r5, #1
 8008aae:	e7c6      	b.n	8008a3e <_printf_common+0x3e>
 8008ab0:	18e1      	adds	r1, r4, r3
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	2030      	movs	r0, #48	; 0x30
 8008ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aba:	4422      	add	r2, r4
 8008abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	e7c7      	b.n	8008a58 <_printf_common+0x58>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4622      	mov	r2, r4
 8008acc:	4649      	mov	r1, r9
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d0e6      	beq.n	8008aa4 <_printf_common+0xa4>
 8008ad6:	3601      	adds	r6, #1
 8008ad8:	e7d9      	b.n	8008a8e <_printf_common+0x8e>
	...

08008adc <_printf_i>:
 8008adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	7e0f      	ldrb	r7, [r1, #24]
 8008ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ae4:	2f78      	cmp	r7, #120	; 0x78
 8008ae6:	4691      	mov	r9, r2
 8008ae8:	4680      	mov	r8, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	469a      	mov	sl, r3
 8008aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008af2:	d807      	bhi.n	8008b04 <_printf_i+0x28>
 8008af4:	2f62      	cmp	r7, #98	; 0x62
 8008af6:	d80a      	bhi.n	8008b0e <_printf_i+0x32>
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	f000 80d8 	beq.w	8008cae <_printf_i+0x1d2>
 8008afe:	2f58      	cmp	r7, #88	; 0x58
 8008b00:	f000 80a3 	beq.w	8008c4a <_printf_i+0x16e>
 8008b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b0c:	e03a      	b.n	8008b84 <_printf_i+0xa8>
 8008b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b12:	2b15      	cmp	r3, #21
 8008b14:	d8f6      	bhi.n	8008b04 <_printf_i+0x28>
 8008b16:	a101      	add	r1, pc, #4	; (adr r1, 8008b1c <_printf_i+0x40>)
 8008b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b05 	.word	0x08008b05
 8008b28:	08008b05 	.word	0x08008b05
 8008b2c:	08008b05 	.word	0x08008b05
 8008b30:	08008b05 	.word	0x08008b05
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b05 	.word	0x08008b05
 8008b3c:	08008b05 	.word	0x08008b05
 8008b40:	08008b05 	.word	0x08008b05
 8008b44:	08008b05 	.word	0x08008b05
 8008b48:	08008c95 	.word	0x08008c95
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008c77 	.word	0x08008c77
 8008b54:	08008b05 	.word	0x08008b05
 8008b58:	08008b05 	.word	0x08008b05
 8008b5c:	08008cb7 	.word	0x08008cb7
 8008b60:	08008b05 	.word	0x08008b05
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008b05 	.word	0x08008b05
 8008b6c:	08008b05 	.word	0x08008b05
 8008b70:	08008c7f 	.word	0x08008c7f
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	602a      	str	r2, [r5, #0]
 8008b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0a3      	b.n	8008cd0 <_printf_i+0x1f4>
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	6829      	ldr	r1, [r5, #0]
 8008b8c:	0606      	lsls	r6, r0, #24
 8008b8e:	f101 0304 	add.w	r3, r1, #4
 8008b92:	d50a      	bpl.n	8008baa <_printf_i+0xce>
 8008b94:	680e      	ldr	r6, [r1, #0]
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	da03      	bge.n	8008ba4 <_printf_i+0xc8>
 8008b9c:	232d      	movs	r3, #45	; 0x2d
 8008b9e:	4276      	negs	r6, r6
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba4:	485e      	ldr	r0, [pc, #376]	; (8008d20 <_printf_i+0x244>)
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	e019      	b.n	8008bde <_printf_i+0x102>
 8008baa:	680e      	ldr	r6, [r1, #0]
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bb2:	bf18      	it	ne
 8008bb4:	b236      	sxthne	r6, r6
 8008bb6:	e7ef      	b.n	8008b98 <_printf_i+0xbc>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1d19      	adds	r1, r3, #4
 8008bbe:	6029      	str	r1, [r5, #0]
 8008bc0:	0601      	lsls	r1, r0, #24
 8008bc2:	d501      	bpl.n	8008bc8 <_printf_i+0xec>
 8008bc4:	681e      	ldr	r6, [r3, #0]
 8008bc6:	e002      	b.n	8008bce <_printf_i+0xf2>
 8008bc8:	0646      	lsls	r6, r0, #25
 8008bca:	d5fb      	bpl.n	8008bc4 <_printf_i+0xe8>
 8008bcc:	881e      	ldrh	r6, [r3, #0]
 8008bce:	4854      	ldr	r0, [pc, #336]	; (8008d20 <_printf_i+0x244>)
 8008bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bd2:	bf0c      	ite	eq
 8008bd4:	2308      	moveq	r3, #8
 8008bd6:	230a      	movne	r3, #10
 8008bd8:	2100      	movs	r1, #0
 8008bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bde:	6865      	ldr	r5, [r4, #4]
 8008be0:	60a5      	str	r5, [r4, #8]
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	bfa2      	ittt	ge
 8008be6:	6821      	ldrge	r1, [r4, #0]
 8008be8:	f021 0104 	bicge.w	r1, r1, #4
 8008bec:	6021      	strge	r1, [r4, #0]
 8008bee:	b90e      	cbnz	r6, 8008bf4 <_printf_i+0x118>
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	d04d      	beq.n	8008c90 <_printf_i+0x1b4>
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8008bfe:	5dc7      	ldrb	r7, [r0, r7]
 8008c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c04:	4637      	mov	r7, r6
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	460e      	mov	r6, r1
 8008c0a:	d9f4      	bls.n	8008bf6 <_printf_i+0x11a>
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d10b      	bne.n	8008c28 <_printf_i+0x14c>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	07de      	lsls	r6, r3, #31
 8008c14:	d508      	bpl.n	8008c28 <_printf_i+0x14c>
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	bfde      	ittt	le
 8008c1e:	2330      	movle	r3, #48	; 0x30
 8008c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c28:	1b52      	subs	r2, r2, r5
 8008c2a:	6122      	str	r2, [r4, #16]
 8008c2c:	f8cd a000 	str.w	sl, [sp]
 8008c30:	464b      	mov	r3, r9
 8008c32:	aa03      	add	r2, sp, #12
 8008c34:	4621      	mov	r1, r4
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff fee2 	bl	8008a00 <_printf_common>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d14c      	bne.n	8008cda <_printf_i+0x1fe>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c44:	b004      	add	sp, #16
 8008c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4a:	4835      	ldr	r0, [pc, #212]	; (8008d20 <_printf_i+0x244>)
 8008c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c50:	6829      	ldr	r1, [r5, #0]
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c58:	6029      	str	r1, [r5, #0]
 8008c5a:	061d      	lsls	r5, r3, #24
 8008c5c:	d514      	bpl.n	8008c88 <_printf_i+0x1ac>
 8008c5e:	07df      	lsls	r7, r3, #31
 8008c60:	bf44      	itt	mi
 8008c62:	f043 0320 	orrmi.w	r3, r3, #32
 8008c66:	6023      	strmi	r3, [r4, #0]
 8008c68:	b91e      	cbnz	r6, 8008c72 <_printf_i+0x196>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	f023 0320 	bic.w	r3, r3, #32
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	2310      	movs	r3, #16
 8008c74:	e7b0      	b.n	8008bd8 <_printf_i+0xfc>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f043 0320 	orr.w	r3, r3, #32
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	2378      	movs	r3, #120	; 0x78
 8008c80:	4828      	ldr	r0, [pc, #160]	; (8008d24 <_printf_i+0x248>)
 8008c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c86:	e7e3      	b.n	8008c50 <_printf_i+0x174>
 8008c88:	0659      	lsls	r1, r3, #25
 8008c8a:	bf48      	it	mi
 8008c8c:	b2b6      	uxthmi	r6, r6
 8008c8e:	e7e6      	b.n	8008c5e <_printf_i+0x182>
 8008c90:	4615      	mov	r5, r2
 8008c92:	e7bb      	b.n	8008c0c <_printf_i+0x130>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	6826      	ldr	r6, [r4, #0]
 8008c98:	6961      	ldr	r1, [r4, #20]
 8008c9a:	1d18      	adds	r0, r3, #4
 8008c9c:	6028      	str	r0, [r5, #0]
 8008c9e:	0635      	lsls	r5, r6, #24
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0x1cc>
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0x1d2>
 8008ca8:	0670      	lsls	r0, r6, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0x1c8>
 8008cac:	8019      	strh	r1, [r3, #0]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	4615      	mov	r5, r2
 8008cb4:	e7ba      	b.n	8008c2c <_printf_i+0x150>
 8008cb6:	682b      	ldr	r3, [r5, #0]
 8008cb8:	1d1a      	adds	r2, r3, #4
 8008cba:	602a      	str	r2, [r5, #0]
 8008cbc:	681d      	ldr	r5, [r3, #0]
 8008cbe:	6862      	ldr	r2, [r4, #4]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7f7 fa9c 	bl	8000200 <memchr>
 8008cc8:	b108      	cbz	r0, 8008cce <_printf_i+0x1f2>
 8008cca:	1b40      	subs	r0, r0, r5
 8008ccc:	6060      	str	r0, [r4, #4]
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd8:	e7a8      	b.n	8008c2c <_printf_i+0x150>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	462a      	mov	r2, r5
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	47d0      	blx	sl
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d0ab      	beq.n	8008c40 <_printf_i+0x164>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	079b      	lsls	r3, r3, #30
 8008cec:	d413      	bmi.n	8008d16 <_printf_i+0x23a>
 8008cee:	68e0      	ldr	r0, [r4, #12]
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	bfb8      	it	lt
 8008cf6:	4618      	movlt	r0, r3
 8008cf8:	e7a4      	b.n	8008c44 <_printf_i+0x168>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	47d0      	blx	sl
 8008d04:	3001      	adds	r0, #1
 8008d06:	d09b      	beq.n	8008c40 <_printf_i+0x164>
 8008d08:	3501      	adds	r5, #1
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	9903      	ldr	r1, [sp, #12]
 8008d0e:	1a5b      	subs	r3, r3, r1
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	dcf2      	bgt.n	8008cfa <_printf_i+0x21e>
 8008d14:	e7eb      	b.n	8008cee <_printf_i+0x212>
 8008d16:	2500      	movs	r5, #0
 8008d18:	f104 0619 	add.w	r6, r4, #25
 8008d1c:	e7f5      	b.n	8008d0a <_printf_i+0x22e>
 8008d1e:	bf00      	nop
 8008d20:	0800919a 	.word	0x0800919a
 8008d24:	080091ab 	.word	0x080091ab

08008d28 <__retarget_lock_acquire_recursive>:
 8008d28:	4770      	bx	lr

08008d2a <__retarget_lock_release_recursive>:
 8008d2a:	4770      	bx	lr

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d42:	4291      	cmp	r1, r2
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <memmove>:
 8008d48:	4288      	cmp	r0, r1
 8008d4a:	b510      	push	{r4, lr}
 8008d4c:	eb01 0402 	add.w	r4, r1, r2
 8008d50:	d902      	bls.n	8008d58 <memmove+0x10>
 8008d52:	4284      	cmp	r4, r0
 8008d54:	4623      	mov	r3, r4
 8008d56:	d807      	bhi.n	8008d68 <memmove+0x20>
 8008d58:	1e43      	subs	r3, r0, #1
 8008d5a:	42a1      	cmp	r1, r4
 8008d5c:	d008      	beq.n	8008d70 <memmove+0x28>
 8008d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d66:	e7f8      	b.n	8008d5a <memmove+0x12>
 8008d68:	4402      	add	r2, r0
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	428a      	cmp	r2, r1
 8008d6e:	d100      	bne.n	8008d72 <memmove+0x2a>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d7a:	e7f7      	b.n	8008d6c <memmove+0x24>

08008d7c <_realloc_r>:
 8008d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d80:	4680      	mov	r8, r0
 8008d82:	4614      	mov	r4, r2
 8008d84:	460e      	mov	r6, r1
 8008d86:	b921      	cbnz	r1, 8008d92 <_realloc_r+0x16>
 8008d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	f7ff bb9f 	b.w	80084d0 <_malloc_r>
 8008d92:	b92a      	cbnz	r2, 8008da0 <_realloc_r+0x24>
 8008d94:	f7ff fb30 	bl	80083f8 <_free_r>
 8008d98:	4625      	mov	r5, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	f000 f81b 	bl	8008dda <_malloc_usable_size_r>
 8008da4:	4284      	cmp	r4, r0
 8008da6:	4607      	mov	r7, r0
 8008da8:	d802      	bhi.n	8008db0 <_realloc_r+0x34>
 8008daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dae:	d812      	bhi.n	8008dd6 <_realloc_r+0x5a>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4640      	mov	r0, r8
 8008db4:	f7ff fb8c 	bl	80084d0 <_malloc_r>
 8008db8:	4605      	mov	r5, r0
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d0ed      	beq.n	8008d9a <_realloc_r+0x1e>
 8008dbe:	42bc      	cmp	r4, r7
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	bf28      	it	cs
 8008dc6:	463a      	movcs	r2, r7
 8008dc8:	f7ff ffb0 	bl	8008d2c <memcpy>
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7ff fb12 	bl	80083f8 <_free_r>
 8008dd4:	e7e1      	b.n	8008d9a <_realloc_r+0x1e>
 8008dd6:	4635      	mov	r5, r6
 8008dd8:	e7df      	b.n	8008d9a <_realloc_r+0x1e>

08008dda <_malloc_usable_size_r>:
 8008dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dde:	1f18      	subs	r0, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfbc      	itt	lt
 8008de4:	580b      	ldrlt	r3, [r1, r0]
 8008de6:	18c0      	addlt	r0, r0, r3
 8008de8:	4770      	bx	lr
	...

08008dec <_init>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr

08008df8 <_fini>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	bf00      	nop
 8008dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfe:	bc08      	pop	{r3}
 8008e00:	469e      	mov	lr, r3
 8008e02:	4770      	bx	lr
